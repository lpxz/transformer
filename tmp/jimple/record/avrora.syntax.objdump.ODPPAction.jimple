public class avrora.syntax.objdump.ODPPAction extends avrora.actions.Action
{
    protected final cck.util.Option$Str FILE;
    protected final cck.util.Option$List SECTIONS;
    private static final java.lang.String HELP;

    public void <init>()
    {
        avrora.syntax.objdump.ODPPAction this;
        cck.util.Option$Str $r0;
        cck.util.Option$List $r1;

        this := @this: avrora.syntax.objdump.ODPPAction;
        specialinvoke this.<avrora.actions.Action: void <init>(java.lang.String)>("The \"odpp\" action tests the functionality of the objdump preprocessor that cleans up the output of objdump into something more suitable for automated parsing.");
        $r0 = virtualinvoke this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("file", "", "The \"file\" option, when set, indicates the file to which to output the preprocessed objdump output.");
        this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$Str FILE> = $r0;
        $r1 = virtualinvoke this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("sections", ".text,.data", "This option specifies a list of sections that the loader should load from the output.");
        this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$List SECTIONS> = $r1;
        return;
    }

    public void <init>(cck.util.Option$List)
    {
        avrora.syntax.objdump.ODPPAction this;
        cck.util.Option$List s, $r1, $r2;
        cck.util.Option$Str $r0;
        java.lang.String $r3;

        this := @this: avrora.syntax.objdump.ODPPAction;
        s := @parameter0: cck.util.Option$List;
        specialinvoke this.<avrora.actions.Action: void <init>(java.lang.String)>("The \"odpp\" action tests the functionality of the objdump preprocessor that cleans up the output of objdump into something more suitable for automated parsing.");
        $r0 = virtualinvoke this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("file", "", "The \"file\" option, when set, indicates the file to which to output the preprocessed objdump output.");
        this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$Str FILE> = $r0;
        $r1 = virtualinvoke this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("sections", ".text,.data", "This option specifies a list of sections that the loader should load from the output.");
        this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$List SECTIONS> = $r1;
        $r2 = this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$List SECTIONS>;
        $r3 = virtualinvoke s.<cck.util.Option$List: java.lang.String stringValue()>();
        virtualinvoke $r2.<cck.util.Option$List: void set(java.lang.String)>($r3);
        return;
    }

    public void run(java.lang.String[]) throws java.lang.Exception
    {
        avrora.syntax.objdump.ODPPAction this;
        java.lang.String[] args;
        avrora.syntax.objdump.ObjDumpReformatter $r0, rf;
        java.io.FileOutputStream outf, $r7;
        java.io.PrintWriter p, $r9;
        cck.util.Option$List $r1;
        java.util.List $r2;
        cck.util.Option$Str $r3, $r8;
        boolean $z0;
        java.io.PrintStream $r4;
        java.lang.String $r5, $r10;
        java.lang.StringBuffer $r6;
        long tid_run;
        java.lang.Thread thread_run;

        this := @this: avrora.syntax.objdump.ODPPAction;
        args := @parameter0: java.lang.String[];
        thread_run = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_run = virtualinvoke thread_run.<java.lang.Thread: long getId()>();
        $r0 = new avrora.syntax.objdump.ObjDumpReformatter;
        $r1 = this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$List SECTIONS>;
        $r2 = virtualinvoke $r1.<cck.util.Option$List: java.util.List get()>();
        specialinvoke $r0.<avrora.syntax.objdump.ObjDumpReformatter: void <init>(java.util.List)>($r2);
        rf = $r0;
        $r3 = this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$Str FILE>;
        $z0 = virtualinvoke $r3.<cck.util.Option$Str: boolean isBlank()>();
        if $z0 == 0 goto label0;

        $r4 = <java.lang.System: java.io.PrintStream out>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(args, 18, tid_run, "avrora.syntax.objdump.ODPPAction", 70, 0, $r5);
        $r5 = args[0];
        $r6 = virtualinvoke rf.<avrora.syntax.objdump.ObjDumpReformatter: java.lang.StringBuffer cleanCode(java.lang.String)>($r5);
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.Object)>($r6);
        goto label1;

     label0:
        $r7 = new java.io.FileOutputStream;
        $r8 = this.<avrora.syntax.objdump.ODPPAction: cck.util.Option$Str FILE>;
        $r5 = virtualinvoke $r8.<cck.util.Option$Str: java.lang.String get()>();
        specialinvoke $r7.<java.io.FileOutputStream: void <init>(java.lang.String)>($r5);
        outf = $r7;
        $r9 = new java.io.PrintWriter;
        specialinvoke $r9.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(outf);
        p = $r9;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(args, 18, tid_run, "avrora.syntax.objdump.ODPPAction", 74, 0, $r5);
        $r5 = args[0];
        $r6 = virtualinvoke rf.<avrora.syntax.objdump.ObjDumpReformatter: java.lang.StringBuffer cleanCode(java.lang.String)>($r5);
        $r10 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke p.<java.io.PrintWriter: void write(java.lang.String)>($r10);
        virtualinvoke p.<java.io.PrintWriter: void close()>();

     label1:
        return;
    }
}
