public class avrora.sim.util.MulticastInterruptProbe extends avrora.sim.util.TransactionalList implements avrora.sim.Simulator$InterruptProbe
{

    public void <init>()
    {
        avrora.sim.util.MulticastInterruptProbe this;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        specialinvoke this.<avrora.sim.util.TransactionalList: void <init>()>();
        return;
    }

    public void fireBeforeInvoke(avrora.sim.State, int)
    {
        avrora.sim.util.MulticastInterruptProbe this;
        avrora.sim.State s;
        int inum;
        avrora.sim.util.TransactionalList$Link pos;
        java.lang.Object $r0;
        avrora.sim.Simulator$InterruptProbe $r1;
        long tid_fireBeforeInvoke;
        java.lang.Thread thread_fireBeforeInvoke;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        s := @parameter0: avrora.sim.State;
        inum := @parameter1: int;
        thread_fireBeforeInvoke = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fireBeforeInvoke = virtualinvoke thread_fireBeforeInvoke.<java.lang.Thread: long getId()>();
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void beginTransaction()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 78, tid_fireBeforeInvoke, "avrora.sim.util.MulticastInterruptProbe", 56, pos);
        pos = this.<avrora.sim.util.MulticastInterruptProbe: avrora.sim.util.TransactionalList$Link head>;

     label0:
        if pos == null goto label1;

        $r0 = pos.<avrora.sim.util.TransactionalList$Link: java.lang.Object object>;
        $r1 = (avrora.sim.Simulator$InterruptProbe) $r0;
        interfaceinvoke $r1.<avrora.sim.Simulator$InterruptProbe: void fireBeforeInvoke(avrora.sim.State,int)>(s, inum);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(pos, 79, tid_fireBeforeInvoke, "avrora.sim.util.MulticastInterruptProbe", 56, pos);
        pos = pos.<avrora.sim.util.TransactionalList$Link: avrora.sim.util.TransactionalList$Link next>;
        goto label0;

     label1:
        return;
    }

    public void fireAfterInvoke(avrora.sim.State, int)
    {
        avrora.sim.util.MulticastInterruptProbe this;
        avrora.sim.State s;
        int inum;
        avrora.sim.util.TransactionalList$Link pos;
        java.lang.Object $r0;
        avrora.sim.Simulator$InterruptProbe $r1;
        long tid_fireAfterInvoke;
        java.lang.Thread thread_fireAfterInvoke;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        s := @parameter0: avrora.sim.State;
        inum := @parameter1: int;
        thread_fireAfterInvoke = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fireAfterInvoke = virtualinvoke thread_fireAfterInvoke.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 78, tid_fireAfterInvoke, "avrora.sim.util.MulticastInterruptProbe", 70, pos);
        pos = this.<avrora.sim.util.MulticastInterruptProbe: avrora.sim.util.TransactionalList$Link head>;

     label0:
        if pos == null goto label1;

        $r0 = pos.<avrora.sim.util.TransactionalList$Link: java.lang.Object object>;
        $r1 = (avrora.sim.Simulator$InterruptProbe) $r0;
        interfaceinvoke $r1.<avrora.sim.Simulator$InterruptProbe: void fireAfterInvoke(avrora.sim.State,int)>(s, inum);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(pos, 79, tid_fireAfterInvoke, "avrora.sim.util.MulticastInterruptProbe", 70, pos);
        pos = pos.<avrora.sim.util.TransactionalList$Link: avrora.sim.util.TransactionalList$Link next>;
        goto label0;

     label1:
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void endTransaction()>();
        return;
    }

    public void fireWhenDisabled(avrora.sim.State, int)
    {
        avrora.sim.util.MulticastInterruptProbe this;
        avrora.sim.State s;
        int inum;
        avrora.sim.util.TransactionalList$Link pos;
        java.lang.Object $r0;
        avrora.sim.Simulator$InterruptProbe $r1;
        long tid_fireWhenDisabled;
        java.lang.Thread thread_fireWhenDisabled;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        s := @parameter0: avrora.sim.State;
        inum := @parameter1: int;
        thread_fireWhenDisabled = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fireWhenDisabled = virtualinvoke thread_fireWhenDisabled.<java.lang.Thread: long getId()>();
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void beginTransaction()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 78, tid_fireWhenDisabled, "avrora.sim.util.MulticastInterruptProbe", 85, pos);
        pos = this.<avrora.sim.util.MulticastInterruptProbe: avrora.sim.util.TransactionalList$Link head>;

     label0:
        if pos == null goto label1;

        $r0 = pos.<avrora.sim.util.TransactionalList$Link: java.lang.Object object>;
        $r1 = (avrora.sim.Simulator$InterruptProbe) $r0;
        interfaceinvoke $r1.<avrora.sim.Simulator$InterruptProbe: void fireWhenDisabled(avrora.sim.State,int)>(s, inum);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(pos, 79, tid_fireWhenDisabled, "avrora.sim.util.MulticastInterruptProbe", 85, pos);
        pos = pos.<avrora.sim.util.TransactionalList$Link: avrora.sim.util.TransactionalList$Link next>;
        goto label0;

     label1:
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void endTransaction()>();
        return;
    }

    public void fireWhenEnabled(avrora.sim.State, int)
    {
        avrora.sim.util.MulticastInterruptProbe this;
        avrora.sim.State s;
        int inum;
        avrora.sim.util.TransactionalList$Link pos;
        java.lang.Object $r0;
        avrora.sim.Simulator$InterruptProbe $r1;
        long tid_fireWhenEnabled;
        java.lang.Thread thread_fireWhenEnabled;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        s := @parameter0: avrora.sim.State;
        inum := @parameter1: int;
        thread_fireWhenEnabled = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fireWhenEnabled = virtualinvoke thread_fireWhenEnabled.<java.lang.Thread: long getId()>();
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void beginTransaction()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 78, tid_fireWhenEnabled, "avrora.sim.util.MulticastInterruptProbe", 99, pos);
        pos = this.<avrora.sim.util.MulticastInterruptProbe: avrora.sim.util.TransactionalList$Link head>;

     label0:
        if pos == null goto label1;

        $r0 = pos.<avrora.sim.util.TransactionalList$Link: java.lang.Object object>;
        $r1 = (avrora.sim.Simulator$InterruptProbe) $r0;
        interfaceinvoke $r1.<avrora.sim.Simulator$InterruptProbe: void fireWhenEnabled(avrora.sim.State,int)>(s, inum);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(pos, 79, tid_fireWhenEnabled, "avrora.sim.util.MulticastInterruptProbe", 99, pos);
        pos = pos.<avrora.sim.util.TransactionalList$Link: avrora.sim.util.TransactionalList$Link next>;
        goto label0;

     label1:
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void endTransaction()>();
        return;
    }

    public void fireWhenPosted(avrora.sim.State, int)
    {
        avrora.sim.util.MulticastInterruptProbe this;
        avrora.sim.State s;
        int inum;
        avrora.sim.util.TransactionalList$Link pos;
        java.lang.Object $r0;
        avrora.sim.Simulator$InterruptProbe $r1;
        long tid_fireWhenPosted;
        java.lang.Thread thread_fireWhenPosted;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        s := @parameter0: avrora.sim.State;
        inum := @parameter1: int;
        thread_fireWhenPosted = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fireWhenPosted = virtualinvoke thread_fireWhenPosted.<java.lang.Thread: long getId()>();
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void beginTransaction()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 78, tid_fireWhenPosted, "avrora.sim.util.MulticastInterruptProbe", 115, pos);
        pos = this.<avrora.sim.util.MulticastInterruptProbe: avrora.sim.util.TransactionalList$Link head>;

     label0:
        if pos == null goto label1;

        $r0 = pos.<avrora.sim.util.TransactionalList$Link: java.lang.Object object>;
        $r1 = (avrora.sim.Simulator$InterruptProbe) $r0;
        interfaceinvoke $r1.<avrora.sim.Simulator$InterruptProbe: void fireWhenPosted(avrora.sim.State,int)>(s, inum);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(pos, 79, tid_fireWhenPosted, "avrora.sim.util.MulticastInterruptProbe", 115, pos);
        pos = pos.<avrora.sim.util.TransactionalList$Link: avrora.sim.util.TransactionalList$Link next>;
        goto label0;

     label1:
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void endTransaction()>();
        return;
    }

    public void fireWhenUnposted(avrora.sim.State, int)
    {
        avrora.sim.util.MulticastInterruptProbe this;
        avrora.sim.State s;
        int inum;
        avrora.sim.util.TransactionalList$Link pos;
        java.lang.Object $r0;
        avrora.sim.Simulator$InterruptProbe $r1;
        long tid_fireWhenUnposted;
        java.lang.Thread thread_fireWhenUnposted;

        this := @this: avrora.sim.util.MulticastInterruptProbe;
        s := @parameter0: avrora.sim.State;
        inum := @parameter1: int;
        thread_fireWhenUnposted = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fireWhenUnposted = virtualinvoke thread_fireWhenUnposted.<java.lang.Thread: long getId()>();
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void beginTransaction()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 78, tid_fireWhenUnposted, "avrora.sim.util.MulticastInterruptProbe", 131, pos);
        pos = this.<avrora.sim.util.MulticastInterruptProbe: avrora.sim.util.TransactionalList$Link head>;

     label0:
        if pos == null goto label1;

        $r0 = pos.<avrora.sim.util.TransactionalList$Link: java.lang.Object object>;
        $r1 = (avrora.sim.Simulator$InterruptProbe) $r0;
        interfaceinvoke $r1.<avrora.sim.Simulator$InterruptProbe: void fireWhenUnposted(avrora.sim.State,int)>(s, inum);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(pos, 79, tid_fireWhenUnposted, "avrora.sim.util.MulticastInterruptProbe", 131, pos);
        pos = pos.<avrora.sim.util.TransactionalList$Link: avrora.sim.util.TransactionalList$Link next>;
        goto label0;

     label1:
        virtualinvoke this.<avrora.sim.util.MulticastInterruptProbe: void endTransaction()>();
        return;
    }
}
