public class spec.jbb.JBBLogFormatter extends java.util.logging.SimpleFormatter
{
    static final java.lang.String COPYRIGHT;
    protected static final java.lang.String ARROW_SEPARATOR;
    protected static final java.lang.String NEW_LINE_STRING;

    static void <clinit>()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");
        <spec.jbb.JBBLogFormatter: java.lang.String NEW_LINE_STRING> = $r0;
        return;
    }

    public void <init>()
    {
        spec.jbb.JBBLogFormatter this;

        this := @this: spec.jbb.JBBLogFormatter;
        specialinvoke this.<java.util.logging.SimpleFormatter: void <init>()>();
        return;
    }

    public java.lang.String format(java.util.logging.LogRecord)
    {
        spec.jbb.JBBLogFormatter this;
        java.util.logging.LogRecord record;
        java.lang.StringBuffer $r0, sb;
        int pos, end, $i0;
        java.lang.String $r1, $r2, $r3;

        this := @this: spec.jbb.JBBLogFormatter;
        record := @parameter0: java.util.logging.LogRecord;
        $r0 = new java.lang.StringBuffer;
        $r1 = specialinvoke this.<java.util.logging.SimpleFormatter: java.lang.String format(java.util.logging.LogRecord)>(record);
        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);
        sb = $r0;
        $r2 = <spec.jbb.JBBLogFormatter: java.lang.String NEW_LINE_STRING>;
        pos = virtualinvoke sb.<java.lang.StringBuffer: int indexOf(java.lang.String)>($r2);
        if pos == -1 goto label0;

        $r2 = <spec.jbb.JBBLogFormatter: java.lang.String NEW_LINE_STRING>;
        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();
        end = pos + $i0;
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>(pos, end, " -> ");

     label0:
        $r3 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r3;
    }
}
