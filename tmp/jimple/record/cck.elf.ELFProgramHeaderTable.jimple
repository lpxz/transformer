public class cck.elf.ELFProgramHeaderTable extends java.lang.Object
{
    public static final int PT_NULL;
    public static final int PT_LOAD;
    public static final int PT_DYNAMIC;
    public static final int PT_INTERP;
    public static final int PT_NOTE;
    public static final int PT_SHLIB;
    public static final int PT_PHDR;
    public static final int PT_LOPROC;
    public static final int PT_HIPROC;
    public static final int PF_EXEC;
    public static final int PF_WRITE;
    public static final int PF_READ;
    public final cck.elf.ELFHeader header;
    public final cck.elf.ELFProgramHeaderTable$Entry32[] entries;

    public void <init>(cck.elf.ELFHeader)
    {
        cck.elf.ELFProgramHeaderTable this;
        cck.elf.ELFHeader header;
        boolean $z0;
        cck.util.Util$InternalError $r0;
        short $s0;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r1;

        this := @this: cck.elf.ELFProgramHeaderTable;
        header := @parameter0: cck.elf.ELFHeader;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $z0 = virtualinvoke header.<cck.elf.ELFHeader: boolean is32Bit()>();
        if $z0 != 0 goto label0;

        $r0 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>("Only 32 bit ELF files are supported.");
        throw $r0;

     label0:
        this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header> = header;
        $s0 = header.<cck.elf.ELFHeader: short e_phnum>;
        $r1 = newarray (cck.elf.ELFProgramHeaderTable$Entry32)[$s0];
        this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries> = $r1;
        return;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException
    {
        cck.elf.ELFProgramHeaderTable this;
        java.io.RandomAccessFile fis;
        cck.elf.ELFDataInputStream is, $r2;
        int cntr, pad, $i0, $i1;
        cck.elf.ELFProgramHeaderTable$Entry32 e, $r5;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r0, $r4;
        cck.elf.ELFHeader $r1, $r3;
        long $l2;
        short $s3;

        this := @this: cck.elf.ELFProgramHeaderTable;
        fis := @parameter0: java.io.RandomAccessFile;
        $r0 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r0;
        if $i0 != 0 goto label0;

        return;

     label0:
        $r1 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header>;
        $i1 = $r1.<cck.elf.ELFHeader: int e_phoff>;
        $l2 = (long) $i1;
        virtualinvoke fis.<java.io.RandomAccessFile: void seek(long)>($l2);
        $r2 = new cck.elf.ELFDataInputStream;
        $r3 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header>;
        specialinvoke $r2.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>($r3, fis);
        is = $r2;
        cntr = 0;

     label1:
        $r4 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $i1 = lengthof $r4;
        if cntr >= $i1 goto label4;

        $r5 = new cck.elf.ELFProgramHeaderTable$Entry32;
        specialinvoke $r5.<cck.elf.ELFProgramHeaderTable$Entry32: void <init>(cck.elf.ELFProgramHeaderTable)>(this);
        e = $r5;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_type> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_offset> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_vaddr> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_memsz> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_flags> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_align> = $i1;
        $r0 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $r0[cntr] = e;
        pad = 32;

     label2:
        $r1 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFHeader header>;
        $s3 = $r1.<cck.elf.ELFHeader: short e_phentsize>;
        if pad >= $s3 goto label3;

        virtualinvoke fis.<java.io.RandomAccessFile: int read()>();
        pad = pad + 1;
        goto label2;

     label3:
        cntr = cntr + 1;
        goto label1;

     label4:
        return;
    }

    public cck.elf.ELFProgramHeaderTable$Entry32 getEntry(int)
    {
        cck.elf.ELFProgramHeaderTable this;
        int ind;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r0;
        cck.elf.ELFProgramHeaderTable$Entry32 $r1;

        this := @this: cck.elf.ELFProgramHeaderTable;
        ind := @parameter0: int;
        $r0 = this.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $r1 = $r0[ind];
        return $r1;
    }

    public static java.lang.String getType(cck.elf.ELFProgramHeaderTable$Entry32)
    {
        cck.elf.ELFProgramHeaderTable$Entry32 e;
        int $i0;
        long $l1;
        java.lang.String $r0;

        e := @parameter0: cck.elf.ELFProgramHeaderTable$Entry32;
        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_type>;
        tableswitch($i0)
        {
            case 0: goto label0;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label0:
        return "null";

     label1:
        return "load";

     label2:
        return "dynamic";

     label3:
        return "interp";

     label4:
        return "note";

     label5:
        return "shlib";

     label6:
        return "phdr";

     label7:
        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_type>;
        $l1 = (long) $i0;
        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($l1, 8);
        return $r0;
    }
}
