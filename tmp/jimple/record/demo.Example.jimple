public class demo.Example extends java.lang.Object
{
    static java.lang.Object lock;
    public static int x;

    static void <clinit>()
    {
        java.lang.Object $r0;

        $r0 = new java.lang.Object;
        specialinvoke $r0.<java.lang.Object: void <init>()>();
        <demo.Example: java.lang.Object lock> = $r0;
        <demo.Example: int x> = 5;
        return;
    }

    public void <init>()
    {
        demo.Example this;

        this := @this: demo.Example;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        demo.Example$MyThread $r0, t;
        java.util.Random random, $r1;
        java.lang.Object l4, $r2;
        java.lang.Throwable $r3;
        long tid_main;
        java.lang.Thread thread_main;

        args := @parameter0: java.lang.String[];
        thread_main = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_main = virtualinvoke thread_main.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void mainThreadStartRun(long,java.lang.String,java.lang.String[])>(tid_main, "demo.Example.main", args);
        $r0 = new demo.Example$MyThread;
        specialinvoke $r0.<demo.Example$MyThread: void <init>()>();
        t = $r0;
        $r1 = new java.util.Random;
        specialinvoke $r1.<java.util.Random: void <init>()>();
        random = $r1;
        virtualinvoke random.<java.util.Random: int nextInt(int)>(5);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void startRunThreadBefore(java.lang.Thread,long)>(t, tid_main);
        virtualinvoke t.<demo.Example$MyThread: void start()>();
        $r2 = <demo.Example: java.lang.Object lock>;
        l4 = $r2;
        entermonitor $r2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>($r2, 0, tid_main);

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,int)>(0, tid_main, "demodemo.Example", 53, 5);
        <demo.Example: int x> = 5;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(l4, 0, tid_main);
        exitmonitor l4;

     label1:
        goto label5;

     label2:
        $r3 := @caughtexception;

     label3:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(l4, 0, tid_main);
        exitmonitor l4;

     label4:
        throw $r3;

     label5:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void mainThreadStopRun(long,java.lang.String,java.lang.String[])>(tid_main, "demo.Example.main", args);
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }
}
