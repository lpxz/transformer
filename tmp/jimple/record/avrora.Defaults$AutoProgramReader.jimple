public class avrora.Defaults$AutoProgramReader extends avrora.core.ProgramReader
{

    public void <init>()
    {
        avrora.Defaults$AutoProgramReader this;

        this := @this: avrora.Defaults$AutoProgramReader;
        specialinvoke this.<avrora.core.ProgramReader: void <init>(java.lang.String)>("The \"auto\" input format reads a program from a single file at a time. It uses the extension of the filename as a clue to decide what input reader to use for that file. For example, an extension of \".asm\" is considered to be a program in Atmel assembly syntax.");
        return;
    }

    public avrora.core.Program read(java.lang.String[]) throws java.lang.Exception
    {
        avrora.Defaults$AutoProgramReader this;
        java.lang.String[] args;
        java.lang.String n, extension, $r1, $r2;
        int offset, $i0;
        avrora.core.ProgramReader reader;
        java.lang.StringBuilder $r0;
        boolean $z0;
        avrora.syntax.atmel.AtmelProgramReader $r3;
        avrora.syntax.objdump.ObjDumpProgramReader $r4;
        avrora.syntax.objdump.ObjDump2ProgramReader $r5;
        avrora.syntax.elf.ELFParser $r6;
        cck.util.Option$List $r7, $r8;
        cck.util.Option$Str $r9, $r10;
        cck.util.Options $r11, $r12;
        avrora.core.Program $r13;
        long tid_read;
        java.lang.Thread thread_read;

        this := @this: avrora.Defaults$AutoProgramReader;
        args := @parameter0: java.lang.String[];
        thread_read = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_read = virtualinvoke thread_read.<java.lang.Thread: long getId()>();
        $i0 = lengthof args;
        if $i0 != 0 goto label0;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("no input files");

     label0:
        $i0 = lengthof args;
        if $i0 == 1 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type \"auto\" accepts only one file at a time.");

     label1:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(args, 18, tid_read, "avrora.Defaults$AutoProgramReader", 408, 0, n);
        n = args[0];
        offset = virtualinvoke n.<java.lang.String: int lastIndexOf(int)>(46);
        if offset >= 0 goto label2;

        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file ");
        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(n);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have an extension");
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.util.Util: void userError(java.lang.String)>($r2);

     label2:
        $r2 = virtualinvoke n.<java.lang.String: java.lang.String substring(int)>(offset);
        extension = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();
        reader = null;
        $r2 = ".asm";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(extension);
        if $z0 == 0 goto label3;

        $r3 = new avrora.syntax.atmel.AtmelProgramReader;
        specialinvoke $r3.<avrora.syntax.atmel.AtmelProgramReader: void <init>()>();
        reader = $r3;
        goto label6;

     label3:
        $r2 = ".od";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(extension);
        if $z0 == 0 goto label4;

        $r4 = new avrora.syntax.objdump.ObjDumpProgramReader;
        specialinvoke $r4.<avrora.syntax.objdump.ObjDumpProgramReader: void <init>()>();
        reader = $r4;
        goto label6;

     label4:
        $r2 = ".odpp";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(extension);
        if $z0 == 0 goto label5;

        $r5 = new avrora.syntax.objdump.ObjDump2ProgramReader;
        specialinvoke $r5.<avrora.syntax.objdump.ObjDump2ProgramReader: void <init>()>();
        reader = $r5;
        goto label6;

     label5:
        $r2 = ".elf";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(extension);
        if $z0 == 0 goto label6;

        $r6 = new avrora.syntax.elf.ELFParser;
        specialinvoke $r6.<avrora.syntax.elf.ELFParser: void <init>()>();
        reader = $r6;

     label6:
        if reader != null goto label7;

        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("file extension ");
        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(extension);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unknown");
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.util.Util: void userError(java.lang.String)>($r2);
        return null;

     label7:
        $r7 = reader.<avrora.core.ProgramReader: cck.util.Option$List INDIRECT_EDGES>;
        $r8 = this.<avrora.Defaults$AutoProgramReader: cck.util.Option$List INDIRECT_EDGES>;
        $r1 = virtualinvoke $r8.<cck.util.Option$List: java.lang.String stringValue()>();
        virtualinvoke $r7.<cck.util.Option$List: void set(java.lang.String)>($r1);
        $r9 = reader.<avrora.core.ProgramReader: cck.util.Option$Str ARCH>;
        $r10 = this.<avrora.Defaults$AutoProgramReader: cck.util.Option$Str ARCH>;
        $r1 = virtualinvoke $r10.<cck.util.Option$Str: java.lang.String stringValue()>();
        virtualinvoke $r9.<cck.util.Option$Str: void set(java.lang.String)>($r1);
        $r11 = reader.<avrora.core.ProgramReader: cck.util.Options options>;
        $r12 = this.<avrora.Defaults$AutoProgramReader: cck.util.Options options>;
        virtualinvoke $r11.<cck.util.Options: void process(cck.util.Options)>($r12);
        $r13 = virtualinvoke reader.<avrora.core.ProgramReader: avrora.core.Program read(java.lang.String[])>(args);
        return $r13;
    }
}
