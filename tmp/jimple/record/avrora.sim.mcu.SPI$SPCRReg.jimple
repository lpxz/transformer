public class avrora.sim.mcu.SPI$SPCRReg extends avrora.sim.RWRegister
{
    static final int SPIE;
    static final int SPE;
    static final int MSTR;
    static final int SPR1;
    static final int SPR0;
    boolean prev_spie;
    final avrora.sim.state.BooleanView _master;
    final avrora.sim.state.BooleanView _enabled;
    final avrora.sim.state.RegisterView _spr;
    final avrora.sim.mcu.SPI this$0;

    protected void <init>(avrora.sim.mcu.SPI)
    {
        avrora.sim.mcu.SPI$SPCRReg this;
        avrora.sim.mcu.SPI l1;
        avrora.sim.state.BooleanView $r0;
        avrora.sim.state.RegisterView $r1;

        this := @this: avrora.sim.mcu.SPI$SPCRReg;
        l1 := @parameter0: avrora.sim.mcu.SPI;
        this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0> = l1;
        specialinvoke this.<avrora.sim.RWRegister: void <init>()>();
        $r0 = staticinvoke <avrora.sim.state.RegisterUtil: avrora.sim.state.BooleanView booleanView(avrora.sim.state.RegisterView,int)>(this, 4);
        this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.state.BooleanView _master> = $r0;
        $r0 = staticinvoke <avrora.sim.state.RegisterUtil: avrora.sim.state.BooleanView booleanView(avrora.sim.state.RegisterView,int)>(this, 6);
        this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.state.BooleanView _enabled> = $r0;
        $r1 = staticinvoke <avrora.sim.state.RegisterUtil: avrora.sim.state.RegisterView bitRangeView(avrora.sim.state.RegisterView,int,int)>(this, 0, 1);
        this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.state.RegisterView _spr> = $r1;
        return;
    }

    public void write(byte)
    {
        avrora.sim.mcu.SPI$SPCRReg this;
        byte val;
        java.lang.StringBuilder $r0;
        avrora.sim.mcu.SPI $r1;
        avrora.sim.output.SimPrinter $r2;
        java.lang.String $r3, $r4;

        this := @this: avrora.sim.mcu.SPI$SPCRReg;
        val := @parameter0: byte;
        $r1 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $r2 = $r1.<avrora.sim.mcu.SPI: avrora.sim.output.SimPrinter devicePrinter>;
        if $r2 == null goto label0;

        $r1 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $r2 = $r1.<avrora.sim.mcu.SPI: avrora.sim.output.SimPrinter devicePrinter>;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SPI: wrote ");
        $r3 = staticinvoke <cck.text.StringUtil: java.lang.String toMultirepString(int,int)>(val, 8);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to SPCR");
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($r4);

     label0:
        specialinvoke this.<avrora.sim.RWRegister: void write(byte)>(val);
        virtualinvoke this.<avrora.sim.mcu.SPI$SPCRReg: void decode(byte)>(val);
        return;
    }

    protected void decode(byte)
    {
        avrora.sim.mcu.SPI$SPCRReg this;
        byte val;
        boolean spie, $z0;
        int divider, $i0, $i1;
        avrora.sim.mcu.SPI $r0, $r2;
        avrora.sim.AtmelInterpreter $r1;
        avrora.sim.mcu.SPI$SPSReg $r3;
        avrora.sim.state.RegisterView $r4;
        avrora.sim.state.BooleanView $r5;
        long tid_decode;
        java.lang.Thread thread_decode;

        this := @this: avrora.sim.mcu.SPI$SPCRReg;
        val := @parameter0: byte;
        thread_decode = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_decode = virtualinvoke thread_decode.<java.lang.Thread: long getId()>();
        spie = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>(val, 7);
        $r0 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $r1 = $r0.<avrora.sim.mcu.SPI: avrora.sim.AtmelInterpreter interpreter>;
        $r2 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $i0 = $r2.<avrora.sim.mcu.SPI: int interruptNum>;
        virtualinvoke $r1.<avrora.sim.AtmelInterpreter: void setEnabled(int,boolean)>($i0, spie);
        if spie == 0 goto label0;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 110, tid_decode, "avrora.sim.mcu.SPI$SPCRReg", 243, $z0);
        $z0 = this.<avrora.sim.mcu.SPI$SPCRReg: boolean prev_spie>;
        if $z0 != 0 goto label0;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 110, tid_decode, "avrora.sim.mcu.SPI$SPCRReg", 244, 1);
        this.<avrora.sim.mcu.SPI$SPCRReg: boolean prev_spie> = 1;
        $r0 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $r3 = $r0.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg>;
        virtualinvoke $r3.<avrora.sim.mcu.SPI$SPSReg: void clearSPIF()>();

     label0:
        if spie != 0 goto label1;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 110, tid_decode, "avrora.sim.mcu.SPI$SPCRReg", 247, $z0);
        $z0 = this.<avrora.sim.mcu.SPI$SPCRReg: boolean prev_spie>;
        if $z0 == 0 goto label1;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 110, tid_decode, "avrora.sim.mcu.SPI$SPCRReg", 248, 0);
        this.<avrora.sim.mcu.SPI$SPCRReg: boolean prev_spie> = 0;

     label1:
        divider = 0;
        $r4 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.state.RegisterView _spr>;
        $i1 = interfaceinvoke $r4.<avrora.sim.state.RegisterView: int getValue()>();
        tableswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            default: goto label6;
        };

     label2:
        divider = 4;
        goto label6;

     label3:
        divider = 16;
        goto label6;

     label4:
        divider = 64;
        goto label6;

     label5:
        divider = 128;

     label6:
        $r0 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $r3 = $r0.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg>;
        $r5 = $r3.<avrora.sim.mcu.SPI$SPSReg: avrora.sim.state.BooleanView _spi2x>;
        $z0 = interfaceinvoke $r5.<avrora.sim.state.BooleanView: boolean getValue()>();
        if $z0 == 0 goto label7;

        divider = divider / 2;

     label7:
        $r0 = this.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.mcu.SPI this$0>;
        $i0 = divider * 8;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>($r0, 111, tid_decode, "avrora.sim.mcu.SPI$SPCRReg", 261, $i0);
        $r0.<avrora.sim.mcu.SPI: int period> = $i0;
        return;
    }
}
