public class spec.jbb.RunSequencer extends java.lang.Object
{
    static final java.lang.String COPYRIGHT;
    java.lang.String resultPrefix;
    java.lang.String resultSuffix;
    int resultPrefixLen;
    java.io.File f1;

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        spec.jbb.RunSequencer this;
        java.lang.String dir, prefix, suffix, $r1;
        java.io.File $r0;
        int $i0;

        this := @this: spec.jbb.RunSequencer;
        dir := @parameter0: java.lang.String;
        prefix := @parameter1: java.lang.String;
        suffix := @parameter2: java.lang.String;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(dir);
        this.<spec.jbb.RunSequencer: java.io.File f1> = $r0;
        this.<spec.jbb.RunSequencer: java.lang.String resultPrefix> = prefix;
        $r1 = this.<spec.jbb.RunSequencer: java.lang.String resultPrefix>;
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();
        this.<spec.jbb.RunSequencer: int resultPrefixLen> = $i0;
        this.<spec.jbb.RunSequencer: java.lang.String resultSuffix> = suffix;
        return;
    }

    public int getSeq()
    {
        spec.jbb.RunSequencer this;
        spec.jbb.ResFilter $r0, filter;
        boolean foo, skip, $z0;
        int max, i, fooLen, j, $i0, $i1, foo, $i3;
        java.lang.String[] ls;
        java.lang.String fooString, $r1, $r2, $r4;
        java.io.File $r3;
        char $c2;
        long tid_getSeq;
        java.lang.Thread thread_getSeq;

        this := @this: spec.jbb.RunSequencer;
        thread_getSeq = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getSeq = virtualinvoke thread_getSeq.<java.lang.Thread: long getId()>();
        $r0 = new spec.jbb.ResFilter;
        $r1 = this.<spec.jbb.RunSequencer: java.lang.String resultPrefix>;
        $r2 = this.<spec.jbb.RunSequencer: java.lang.String resultSuffix>;
        specialinvoke $r0.<spec.jbb.ResFilter: void <init>(java.lang.String,java.lang.String)>($r1, $r2);
        filter = $r0;
        foo = 0;
        max = 0;
        skip = 0;
        $r3 = this.<spec.jbb.RunSequencer: java.io.File f1>;
        ls = virtualinvoke $r3.<java.io.File: java.lang.String[] list(java.io.FilenameFilter)>(filter);
        i = 0;
        goto label5;

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(ls, 23, tid_getSeq, "spec.jbb.RunSequencer", 103, i, $r4);
        $r4 = ls[i];
        $i0 = this.<spec.jbb.RunSequencer: int resultPrefixLen>;
        $i1 = this.<spec.jbb.RunSequencer: int resultPrefixLen>;
        $i1 = $i1 + 3;
        fooString = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);
        fooLen = virtualinvoke fooString.<java.lang.String: int length()>();
        skip = 0;
        j = 0;
        goto label3;

     label1:
        $c2 = virtualinvoke fooString.<java.lang.String: char charAt(int)>(j);
        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c2);
        if $z0 != 0 goto label2;

        skip = 1;

     label2:
        j = j + 1;

     label3:
        if j < fooLen goto label1;

        if skip != 0 goto label4;

        foo = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(fooString);
        if foo <= max goto label4;

        max = foo;

     label4:
        i = i + 1;

     label5:
        if ls == null goto label6;

        $i0 = lengthof ls;
        if i < $i0 goto label0;

     label6:
        $i3 = max + 1;
        return $i3;
    }

    public java.lang.String getSeqString()
    {
        spec.jbb.RunSequencer this;
        int $i0;
        java.lang.String $r0;

        this := @this: spec.jbb.RunSequencer;
        $i0 = virtualinvoke this.<spec.jbb.RunSequencer: int getSeq()>();
        $r0 = virtualinvoke this.<spec.jbb.RunSequencer: java.lang.String padNumber(int)>($i0);
        return $r0;
    }

    public java.lang.String padNumber(int)
    {
        spec.jbb.RunSequencer this;
        int n, returnStringLength;
        java.lang.StringBuilder $r0;
        java.lang.String returnString;

        this := @this: spec.jbb.RunSequencer;
        n := @parameter0: int;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(n);
        returnString = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        returnStringLength = virtualinvoke returnString.<java.lang.String: int length()>();
        if returnStringLength != 1 goto label0;

        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("00");
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(returnString);
        returnString = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label0:
        if returnStringLength != 2 goto label1;

        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("0");
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(returnString);
        returnString = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return returnString;
    }
}
