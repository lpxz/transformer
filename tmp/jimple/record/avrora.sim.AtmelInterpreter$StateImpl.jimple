public class avrora.sim.AtmelInterpreter$StateImpl extends java.lang.Object implements avrora.arch.legacy.LegacyState
{
    final avrora.sim.AtmelInterpreter this$0;

    public void <init>(avrora.sim.AtmelInterpreter)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.sim.AtmelInterpreter l1;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        l1 := @parameter0: avrora.sim.AtmelInterpreter;
        this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0> = l1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public avrora.sim.Simulator getSimulator()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.Simulator $r1;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.Simulator simulator>;
        return $r1;
    }

    public avrora.sim.InterruptTable getInterruptTable()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.InterruptTable $r1;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable interrupts>;
        return $r1;
    }

    public byte getRegisterByte(avrora.arch.legacy.LegacyRegister)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.arch.legacy.LegacyRegister reg;
        avrora.sim.AtmelInterpreter $r0;
        byte[] $r1;
        int $i0;
        byte $b1;
        long tid_getRegisterByte;
        java.lang.Thread thread_getRegisterByte;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        reg := @parameter0: avrora.arch.legacy.LegacyRegister;
        thread_getRegisterByte = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getRegisterByte = virtualinvoke thread_getRegisterByte.<java.lang.Thread: long getId()>();
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: byte[] sram>;
        $i0 = virtualinvoke reg.<avrora.arch.legacy.LegacyRegister: int getNumber()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,byte)>($r1, 0, tid_getRegisterByte, "avrora.sim.AtmelInterpreter$StateImpl", 133, $i0, $b1);
        $b1 = $r1[$i0];
        return $b1;
    }

    public int getRegisterUnsigned(avrora.arch.legacy.LegacyRegister)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.arch.legacy.LegacyRegister reg;
        avrora.sim.AtmelInterpreter $r0;
        byte[] $r1;
        int $i0;
        byte $b1;
        short $s2;
        long tid_getRegisterUnsigned;
        java.lang.Thread thread_getRegisterUnsigned;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        reg := @parameter0: avrora.arch.legacy.LegacyRegister;
        thread_getRegisterUnsigned = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getRegisterUnsigned = virtualinvoke thread_getRegisterUnsigned.<java.lang.Thread: long getId()>();
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: byte[] sram>;
        $i0 = virtualinvoke reg.<avrora.arch.legacy.LegacyRegister: int getNumber()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,byte)>($r1, 0, tid_getRegisterUnsigned, "avrora.sim.AtmelInterpreter$StateImpl", 143, $i0, $b1);
        $b1 = $r1[$i0];
        $s2 = $b1 & 255;
        return $s2;
    }

    public int getRegisterWord(avrora.arch.legacy.LegacyRegister)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.arch.legacy.LegacyRegister reg;
        int number, $i1;
        avrora.sim.AtmelInterpreter $r0, $r2;
        byte[] $r1, $r3;
        byte $b0, $b2;
        char $c3;
        long tid_getRegisterWord;
        java.lang.Thread thread_getRegisterWord;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        reg := @parameter0: avrora.arch.legacy.LegacyRegister;
        thread_getRegisterWord = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getRegisterWord = virtualinvoke thread_getRegisterWord.<java.lang.Thread: long getId()>();
        number = virtualinvoke reg.<avrora.arch.legacy.LegacyRegister: int getNumber()>();
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: byte[] sram>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,byte)>($r1, 0, tid_getRegisterWord, "avrora.sim.AtmelInterpreter$StateImpl", 157, number, $b0);
        $b0 = $r1[number];
        $r2 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r3 = $r2.<avrora.sim.AtmelInterpreter: byte[] sram>;
        $i1 = number + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,byte)>($r3, 0, tid_getRegisterWord, "avrora.sim.AtmelInterpreter$StateImpl", 157, $i1, $b2);
        $b2 = $r3[$i1];
        $c3 = staticinvoke <cck.util.Arithmetic: char uword(byte,byte)>($b0, $b2);
        return $c3;
    }

    public byte getSREG()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        short value;
        avrora.sim.AtmelInterpreter $r0;
        boolean $z0;
        byte $b0;
        long tid_getSREG;
        java.lang.Thread thread_getSREG;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        thread_getSREG = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getSREG = virtualinvoke thread_getSREG.<java.lang.Thread: long getId()>();
        value = 0;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 7, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 169, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean I>;
        if $z0 == 0 goto label0;

        value = value | 128;

     label0:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 16, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 170, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean T>;
        if $z0 == 0 goto label1;

        value = value | 64;

     label1:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 11, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 171, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean H>;
        if $z0 == 0 goto label2;

        value = value | 32;

     label2:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 15, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 172, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean S>;
        if $z0 == 0 goto label3;

        value = value | 16;

     label3:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 14, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 173, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean V>;
        if $z0 == 0 goto label4;

        value = value | 8;

     label4:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 12, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 174, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean N>;
        if $z0 == 0 goto label5;

        value = value | 4;

     label5:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 13, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 175, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean Z>;
        if $z0 == 0 goto label6;

        value = value | 2;

     label6:
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r0, 10, tid_getSREG, "avrora.sim.AtmelInterpreter$StateImpl", 176, $z0);
        $z0 = $r0.<avrora.sim.AtmelInterpreter: boolean C>;
        if $z0 == 0 goto label7;

        value = value | 1;

     label7:
        $b0 = (byte) value;
        return $b0;
    }

    public boolean getFlag(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int bit;
        avrora.sim.AtmelInterpreter $r0;
        boolean $z0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        bit := @parameter0: int;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $z0 = virtualinvoke $r0.<avrora.sim.AtmelInterpreter: boolean getFlag(int)>(bit);
        return $z0;
    }

    public byte getStackByte()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int address;
        byte $b0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        address = virtualinvoke this.<avrora.sim.AtmelInterpreter$StateImpl: int getSP()>();
        $b0 = virtualinvoke this.<avrora.sim.AtmelInterpreter$StateImpl: byte getDataByte(int)>(address);
        return $b0;
    }

    public int getSP()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        byte low, high;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.RWRegister $r1;
        char $c0;
        long tid_getSP;
        java.lang.Thread thread_getSP;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        thread_getSP = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getSP = virtualinvoke thread_getSP.<java.lang.Thread: long getId()>();
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPL_reg>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,byte)>($r1, 17, tid_getSP, "avrora.sim.AtmelInterpreter$StateImpl", 206, low);
        low = $r1.<avrora.sim.RWRegister: byte value>;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.RWRegister SPH_reg>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,byte)>($r1, 17, tid_getSP, "avrora.sim.AtmelInterpreter$StateImpl", 207, high);
        high = $r1.<avrora.sim.RWRegister: byte value>;
        $c0 = staticinvoke <cck.util.Arithmetic: char uword(byte,byte)>(low, high);
        return $c0;
    }

    public int getPC()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.sim.AtmelInterpreter $r0;
        int $i0;
        long tid_getPC;
        java.lang.Thread thread_getPC;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        thread_getPC = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getPC = virtualinvoke thread_getPC.<java.lang.Thread: long getId()>();
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>($r0, 1, tid_getPC, "avrora.sim.AtmelInterpreter$StateImpl", 217, $i0);
        $i0 = $r0.<avrora.sim.AtmelInterpreter: int pc>;
        return $i0;
    }

    public avrora.arch.AbstractInstr getInstr(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int address;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.CodeSegment $r1;
        avrora.arch.legacy.LegacyInstr $r2;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        address := @parameter0: int;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;
        $r2 = virtualinvoke $r1.<avrora.sim.CodeSegment: avrora.arch.legacy.LegacyInstr readInstr(int)>(address);
        return $r2;
    }

    public byte getDataByte(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int address;
        avrora.sim.AtmelInterpreter $r0;
        byte $b0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        address := @parameter0: int;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $b0 = staticinvoke <avrora.sim.AtmelInterpreter: byte access$000(avrora.sim.AtmelInterpreter,boolean,int)>($r0, 0, address);
        return $b0;
    }

    public byte getProgramByte(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int address;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.CodeSegment $r1;
        byte $b0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        address := @parameter0: int;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.CodeSegment flash>;
        $b0 = virtualinvoke $r1.<avrora.sim.CodeSegment: byte get(int)>(address);
        return $b0;
    }

    public byte getIORegisterByte(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int ioreg;
        avrora.sim.ActiveRegister $r0;
        byte $b0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        ioreg := @parameter0: int;
        $r0 = specialinvoke this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.ActiveRegister getAR(int)>(ioreg);
        $b0 = interfaceinvoke $r0.<avrora.sim.ActiveRegister: byte read()>();
        return $b0;
    }

    public avrora.sim.ActiveRegister getIOReg(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int ioreg;
        avrora.sim.ActiveRegister $r0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        ioreg := @parameter0: int;
        $r0 = specialinvoke this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.ActiveRegister getAR(int)>(ioreg);
        return $r0;
    }

    private avrora.sim.ActiveRegister getAR(int)
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        int ioreg;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.ActiveRegister[] $r1;
        avrora.sim.ActiveRegister $r2;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        ioreg := @parameter0: int;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.ActiveRegister[] ioregs>;
        $r2 = $r1[ioreg];
        return $r2;
    }

    public long getCycles()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        avrora.sim.AtmelInterpreter $r0;
        avrora.sim.clock.MainClock $r1;
        long $l0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        $r0 = this.<avrora.sim.AtmelInterpreter$StateImpl: avrora.sim.AtmelInterpreter this$0>;
        $r1 = $r0.<avrora.sim.AtmelInterpreter: avrora.sim.clock.MainClock clock>;
        $l0 = virtualinvoke $r1.<avrora.sim.clock.MainClock: long getCount()>();
        return $l0;
    }

    public int getSleepMode()
    {
        avrora.sim.AtmelInterpreter$StateImpl this;
        cck.util.Util$InternalError $r0;

        this := @this: avrora.sim.AtmelInterpreter$StateImpl;
        $r0 = staticinvoke <cck.util.Util: cck.util.Util$InternalError unimplemented()>();
        throw $r0;
    }
}
