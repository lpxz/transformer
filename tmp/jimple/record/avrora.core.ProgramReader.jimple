public abstract class avrora.core.ProgramReader extends cck.help.HelpCategory
{
    public final cck.util.Option$Str ARCH;
    public final cck.util.Option$List INDIRECT_EDGES;

    public abstract avrora.core.Program read(java.lang.String[]) throws java.lang.Exception;

    protected void <init>(java.lang.String)
    {
        avrora.core.ProgramReader this;
        java.lang.String h, $r2;
        cck.util.Option$Str $r0;
        cck.util.Option$List $r1;
        cck.util.Options $r3;

        this := @this: avrora.core.ProgramReader;
        h := @parameter0: java.lang.String;
        specialinvoke this.<cck.help.HelpCategory: void <init>(java.lang.String,java.lang.String)>("reader", h);
        $r0 = virtualinvoke this.<avrora.core.ProgramReader: cck.util.Option$Str newOption(java.lang.String,java.lang.String,java.lang.String)>("arch", "avr", "This option specifies the name of the instruction set architecture for the specified program. This architecture option is used to retrieve an appropriate disassembler and interpreter for the program.");
        this.<avrora.core.ProgramReader: cck.util.Option$Str ARCH> = $r0;
        $r1 = virtualinvoke this.<avrora.core.ProgramReader: cck.util.Option$List newOptionList(java.lang.String,java.lang.String,java.lang.String)>("indirect-edges", "", "This option can be used to specify the possible targets of indirect calls and jumps within a program, which may be needed in performing stack analysis or building a control flow graph. Each element of the list is a pair of program addresses separated by a colon, where a program address can be a label or a hexadecimal number preceded by \"0x\". The first program address is the address of the indirect call or jump instruction and the second program address is a possible target.");
        this.<avrora.core.ProgramReader: cck.util.Option$List INDIRECT_EDGES> = $r1;
        $r2 = this.<avrora.core.ProgramReader: java.lang.String help>;
        virtualinvoke this.<avrora.core.ProgramReader: void addSection(java.lang.String,java.lang.String)>("OVERVIEW", $r2);
        $r3 = this.<avrora.core.ProgramReader: cck.util.Options options>;
        virtualinvoke this.<avrora.core.ProgramReader: void addOptionSection(java.lang.String,cck.util.Options)>("Help for specific options is below.", $r3);
        return;
    }

    protected void addIndirectEdges(avrora.core.Program)
    {
        avrora.core.ProgramReader this;
        avrora.core.Program p;
        java.util.Iterator i;
        java.lang.String s, $r4, $r5;
        int ind, $i0, $i1;
        avrora.core.SourceMapping sm;
        avrora.core.SourceMapping$Location loc, tar;
        cck.util.Option$List $r0;
        java.util.List $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3;
        cck.util.Util$InternalError $r6;

        this := @this: avrora.core.ProgramReader;
        p := @parameter0: avrora.core.Program;
        $r0 = this.<avrora.core.ProgramReader: cck.util.Option$List INDIRECT_EDGES>;
        $r1 = virtualinvoke $r0.<cck.util.Option$List: java.util.List get()>();
        i = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        s = (java.lang.String) $r2;
        ind = virtualinvoke s.<java.lang.String: int indexOf(int)>(58);
        if ind > 0 goto label1;

        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid indirect edge format: ");
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(s);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $r6 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>($r5);
        throw $r6;

     label1:
        sm = virtualinvoke p.<avrora.core.Program: avrora.core.SourceMapping getSourceMapping()>();
        $r4 = virtualinvoke s.<java.lang.String: java.lang.String substring(int,int)>(0, ind);
        loc = virtualinvoke sm.<avrora.core.SourceMapping: avrora.core.SourceMapping$Location getLocation(java.lang.String)>($r4);
        $i0 = ind + 1;
        $r4 = virtualinvoke s.<java.lang.String: java.lang.String substring(int)>($i0);
        tar = virtualinvoke sm.<avrora.core.SourceMapping: avrora.core.SourceMapping$Location getLocation(java.lang.String)>($r4);
        $i1 = loc.<avrora.core.SourceMapping$Location: int lma_addr>;
        $i0 = tar.<avrora.core.SourceMapping$Location: int lma_addr>;
        virtualinvoke p.<avrora.core.Program: void addIndirectEdge(int,int)>($i1, $i0);
        goto label0;

     label2:
        return;
    }

    public avrora.arch.AbstractArchitecture getArchitecture()
    {
        avrora.core.ProgramReader this;
        cck.util.Option$Str $r0;
        java.lang.String $r1;
        avrora.arch.AbstractArchitecture $r2;

        this := @this: avrora.core.ProgramReader;
        $r0 = this.<avrora.core.ProgramReader: cck.util.Option$Str ARCH>;
        $r1 = virtualinvoke $r0.<cck.util.Option$Str: java.lang.String get()>();
        $r2 = staticinvoke <avrora.arch.ArchitectureRegistry: avrora.arch.AbstractArchitecture getArchitecture(java.lang.String)>($r1);
        return $r2;
    }
}
