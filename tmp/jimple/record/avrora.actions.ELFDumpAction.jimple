public class avrora.actions.ELFDumpAction extends avrora.actions.Action
{
    public static final java.lang.String HELP;

    public void <init>()
    {
        avrora.actions.ELFDumpAction this;

        this := @this: avrora.actions.ELFDumpAction;
        specialinvoke this.<avrora.actions.Action: void <init>(java.lang.String)>("The \"elf-dump\" action loads an ELF executable and produces a listing of many important pieces of information, including the architecture, sections, symbol tables and sizes of various structures.");
        return;
    }

    public void run(java.lang.String[]) throws java.lang.Exception
    {
        avrora.actions.ELFDumpAction this;
        java.lang.String[] args;
        java.lang.String fname;
        java.io.RandomAccessFile fis, $r0;
        cck.elf.ELFHeader header;
        cck.elf.ELFProgramHeaderTable pht;
        cck.elf.ELFSectionHeaderTable sht;
        java.util.List symbolTables;
        java.util.Iterator i;
        cck.elf.ELFSymbolTable stab;
        cck.elf.ELFHeader$FormatError e, $r2;
        boolean $z0;
        java.lang.Object $r1;
        long tid_run;
        java.lang.Thread thread_run;

        this := @this: avrora.actions.ELFDumpAction;
        args := @parameter0: java.lang.String[];
        thread_run = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_run = virtualinvoke thread_run.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(args, 18, tid_run, "avrora.actions.ELFDumpAction", 78, 0, fname);
        fname = args[0];
        staticinvoke <avrora.Main: void checkFileExists(java.lang.String)>(fname);
        $r0 = new java.io.RandomAccessFile;
        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(fname, "r");
        fis = $r0;

     label0:
        header = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFHeader readELFHeader(java.io.RandomAccessFile)>(fis);
        staticinvoke <avrora.actions.ELFDumpAction: void printHeader(cck.elf.ELFHeader)>(header);
        pht = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFProgramHeaderTable readPHT(java.io.RandomAccessFile,cck.elf.ELFHeader)>(fis, header);
        staticinvoke <avrora.actions.ELFDumpAction: void printPHT(cck.elf.ELFProgramHeaderTable)>(pht);
        sht = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFSectionHeaderTable readSHT(java.io.RandomAccessFile,cck.elf.ELFHeader)>(fis, header);
        staticinvoke <avrora.actions.ELFDumpAction: void printSHT(cck.elf.ELFSectionHeaderTable)>(sht);
        symbolTables = staticinvoke <cck.elf.ELFLoader: java.util.List readSymbolTables(java.io.RandomAccessFile,cck.elf.ELFHeader,cck.elf.ELFSectionHeaderTable)>(fis, header, sht);
        i = interfaceinvoke symbolTables.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        stab = (cck.elf.ELFSymbolTable) $r1;
        staticinvoke <avrora.actions.ELFDumpAction: void printSymbolTable(cck.elf.ELFSymbolTable,cck.elf.ELFSectionHeaderTable)>(stab, sht);
        goto label1;

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;
        e = $r2;
        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>(fname, "invalid ELF header");

     label4:
        return;

        catch cck.elf.ELFHeader$FormatError from label0 to label2 with label3;
    }

    public static void printHeader(cck.elf.ELFHeader)
    {
        cck.elf.ELFHeader header;
        int $i0;
        long $l1;
        java.lang.String $r0;
        short $s2;
        boolean $z0;

        header := @parameter0: cck.elf.ELFHeader;
        staticinvoke <cck.text.Terminal: void nextln()>();
        staticinvoke <cck.text.TermUtil: void printSeparator()>();
        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ver Machine     Arch     Size  Endian");
        staticinvoke <cck.text.Terminal: void nextln()>();
        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();
        $i0 = header.<cck.elf.ELFHeader: int e_version>;
        $l1 = (long) $i0;
        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 3);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r0);
        $s2 = header.<cck.elf.ELFHeader: short e_machine>;
        $l1 = (long) $s2;
        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 8);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r0);
        $r0 = virtualinvoke header.<cck.elf.ELFHeader: java.lang.String getArchitecture()>();
        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($r0, 9);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r0);
        $z0 = virtualinvoke header.<cck.elf.ELFHeader: boolean is64Bit()>();
        if $z0 == 0 goto label0;

        $r0 = "64 bits";
        goto label1;

     label0:
        $r0 = "32 bits";

     label1:
        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($r0, 9);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r0);
        $z0 = virtualinvoke header.<cck.elf.ELFHeader: boolean isLittleEndian()>();
        if $z0 == 0 goto label2;

        $r0 = "  little";
        goto label3;

     label2:
        $r0 = "  big";

     label3:
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r0);
        staticinvoke <cck.text.Terminal: void nextln()>();
        return;
    }

    public static void printSHT(cck.elf.ELFSectionHeaderTable)
    {
        cck.elf.ELFSectionHeaderTable sht;
        int cntr, $i0, $i3;
        cck.elf.ELFSectionHeaderTable$Entry32 e;
        cck.elf.ELFSectionHeaderTable$Entry32[] $r0, $r1;
        long $l1, $l2;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;

        sht := @parameter0: cck.elf.ELFSectionHeaderTable;
        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Section Header Table");
        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ent  Name                        Type   Address  Offset    Size  Flags");
        staticinvoke <cck.text.Terminal: void nextln()>();
        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();
        cntr = 0;

     label0:
        $r0 = sht.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r0;
        if cntr >= $i0 goto label1;

        $r1 = sht.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        e = $r1[cntr];
        $l1 = (long) cntr;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 3);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $r4 = virtualinvoke e.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getName()>();
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($r4, 24);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r2 = virtualinvoke e.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getType()>();
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($r2, 8);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $i0 = e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addr>;
        $l2 = (long) $i0;
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($l2, 8);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $i3 = e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_offset>;
        $l1 = (long) $i3;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 8);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $i3 = e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_size>;
        $l1 = (long) $i3;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 8);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $r4 = virtualinvoke e.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getFlags()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        staticinvoke <cck.text.Terminal: void nextln()>();
        cntr = cntr + 1;
        goto label0;

     label1:
        return;
    }

    public static java.lang.String getName(cck.elf.ELFStringTable, int)
    {
        cck.elf.ELFStringTable st;
        int ind;
        java.lang.String $r0;

        st := @parameter0: cck.elf.ELFStringTable;
        ind := @parameter1: int;
        if st != null goto label0;

        return "";

     label0:
        $r0 = virtualinvoke st.<cck.elf.ELFStringTable: java.lang.String getString(int)>(ind);
        return $r0;
    }

    public static void printPHT(cck.elf.ELFProgramHeaderTable)
    {
        cck.elf.ELFProgramHeaderTable pht;
        int cntr, $i0, $i3;
        cck.elf.ELFProgramHeaderTable$Entry32 e;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r0, $r1;
        long $l1, $l2;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;

        pht := @parameter0: cck.elf.ELFProgramHeaderTable;
        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Program Header Table");
        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ent     Type  Virtual   Physical  Offset  Filesize  Memsize  Flags");
        staticinvoke <cck.text.Terminal: void nextln()>();
        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();
        cntr = 0;

     label0:
        $r0 = pht.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r0;
        if cntr >= $i0 goto label1;

        $r1 = pht.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        e = $r1[cntr];
        $l1 = (long) cntr;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 3);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r2 = staticinvoke <cck.elf.ELFProgramHeaderTable: java.lang.String getType(cck.elf.ELFProgramHeaderTable$Entry32)>(e);
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(java.lang.String,int)>($r2, 9);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_vaddr>;
        $l2 = (long) $i0;
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($l2, 8);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;
        $l2 = (long) $i0;
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($l2, 8);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $i3 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_offset>;
        $l1 = (long) $i3;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 8);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $i3 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz>;
        $l1 = (long) $i3;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 10);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $i3 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_memsz>;
        $l1 = (long) $i3;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 9);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $r4 = virtualinvoke e.<cck.elf.ELFProgramHeaderTable$Entry32: java.lang.String getFlags()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        staticinvoke <cck.text.Terminal: void nextln()>();
        cntr = cntr + 1;
        goto label0;

     label1:
        return;
    }

    public static void printSymbolTable(cck.elf.ELFSymbolTable, cck.elf.ELFSectionHeaderTable)
    {
        cck.elf.ELFSymbolTable stab;
        cck.elf.ELFSectionHeaderTable sht;
        cck.elf.ELFStringTable str;
        int cntr, $i0;
        cck.elf.ELFSymbolTable$Entry e;
        cck.elf.ELFSymbolTable$Entry[] $r0, $r1;
        long $l1, $l3;
        java.lang.String $r2, $r4;
        java.lang.StringBuilder $r3;
        short $s2;

        stab := @parameter0: cck.elf.ELFSymbolTable;
        sht := @parameter1: cck.elf.ELFSectionHeaderTable;
        staticinvoke <cck.text.TermUtil: void printSeparator(int,java.lang.String)>(78, "Symbol Table");
        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>("Ent  Type     Section     Bind    Name                     Address      Size");
        staticinvoke <cck.text.Terminal: void nextln()>();
        staticinvoke <cck.text.TermUtil: void printThinSeparator()>();
        str = virtualinvoke stab.<cck.elf.ELFSymbolTable: cck.elf.ELFStringTable getStringTable()>();
        cntr = 0;

     label0:
        $r0 = stab.<cck.elf.ELFSymbolTable: cck.elf.ELFSymbolTable$Entry[] entries>;
        $i0 = lengthof $r0;
        if cntr >= $i0 goto label1;

        $r1 = stab.<cck.elf.ELFSymbolTable: cck.elf.ELFSymbolTable$Entry[] entries>;
        e = $r1[cntr];
        $l1 = (long) cntr;
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l1, 3);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $r4 = virtualinvoke e.<cck.elf.ELFSymbolTable$Entry: java.lang.String getType()>();
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($r4, 7);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $s2 = e.<cck.elf.ELFSymbolTable$Entry: short st_shndx>;
        $r4 = virtualinvoke sht.<cck.elf.ELFSectionHeaderTable: java.lang.String getSectionName(int)>($s2);
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($r4, 12);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r2 = virtualinvoke e.<cck.elf.ELFSymbolTable$Entry: java.lang.String getBinding()>();
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($r2, 8);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $i0 = e.<cck.elf.ELFSymbolTable$Entry: int st_name>;
        $r2 = staticinvoke <avrora.actions.ELFDumpAction: java.lang.String getName(cck.elf.ELFStringTable,int)>(str, $i0);
        $r2 = staticinvoke <cck.text.StringUtil: java.lang.String leftJustify(java.lang.String,int)>($r2, 22);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $i0 = e.<cck.elf.ELFSymbolTable$Entry: int st_value>;
        $l3 = (long) $i0;
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String toHex(long,int)>($l3, 8);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        $r3 = new java.lang.StringBuilder;
        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");
        $i0 = e.<cck.elf.ELFSymbolTable$Entry: int st_size>;
        $l3 = (long) $i0;
        $r4 = staticinvoke <cck.text.StringUtil: java.lang.String rightJustify(long,int)>($l3, 8);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r2);
        staticinvoke <cck.text.Terminal: void nextln()>();
        cntr = cntr + 1;
        goto label0;

     label1:
        return;
    }
}
