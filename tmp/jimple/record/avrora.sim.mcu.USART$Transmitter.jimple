public class avrora.sim.mcu.USART$Transmitter extends java.lang.Object
{
    boolean transmitting;
    avrora.sim.mcu.USART$Transmitter$Transmit transmit;
    final avrora.sim.mcu.USART this$0;

    protected void <init>(avrora.sim.mcu.USART)
    {
        avrora.sim.mcu.USART$Transmitter this;
        avrora.sim.mcu.USART l1;
        avrora.sim.mcu.USART$Transmitter$Transmit $r0;

        this := @this: avrora.sim.mcu.USART$Transmitter;
        l1 := @parameter0: avrora.sim.mcu.USART;
        this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0> = l1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new avrora.sim.mcu.USART$Transmitter$Transmit;
        specialinvoke $r0.<avrora.sim.mcu.USART$Transmitter$Transmit: void <init>(avrora.sim.mcu.USART$Transmitter)>(this);
        this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART$Transmitter$Transmit transmit> = $r0;
        return;
    }

    protected void enableTransmit()
    {
        avrora.sim.mcu.USART$Transmitter this;
        avrora.sim.mcu.USART$Frame $r0;
        boolean $z0, $z1;
        avrora.sim.mcu.USART$Transmitter$Transmit $r1, $r13;
        avrora.sim.mcu.USART $r2, $r5, $r7, $r9;
        avrora.sim.mcu.USART$DataRegister $r3;
        avrora.sim.RWRegister $r4;
        byte $b0;
        avrora.sim.mcu.USART$ControlRegisterB $r6;
        avrora.sim.mcu.USART$ControlRegisterC $r8, $r14;
        int $i1, $i2, $i3;
        avrora.sim.mcu.USART$ControlRegisterA $r10;
        avrora.sim.mcu.ATMegaFamily$InterruptFlag $r11;
        avrora.sim.clock.Clock $r12;
        long $l4, tid_enableTransmit;
        java.lang.Thread thread_enableTransmit;

        this := @this: avrora.sim.mcu.USART$Transmitter;
        thread_enableTransmit = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_enableTransmit = virtualinvoke thread_enableTransmit.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 98, tid_enableTransmit, "avrora.sim.mcu.USART$Transmitter", 242, $z0);
        $z0 = this.<avrora.sim.mcu.USART$Transmitter: boolean transmitting>;
        if $z0 != 0 goto label0;

        $r1 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART$Transmitter$Transmit transmit>;
        $r0 = new avrora.sim.mcu.USART$Frame;
        $r2 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r3 = $r2.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$DataRegister UDRn_reg>;
        $r4 = $r3.<avrora.sim.mcu.USART$DataRegister: avrora.sim.RWRegister transmitRegister>;
        $b0 = virtualinvoke $r4.<avrora.sim.RWRegister: byte read()>();
        $r5 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r6 = $r5.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterB UCSRnB_reg>;
        $z1 = virtualinvoke $r6.<avrora.sim.mcu.USART$ControlRegisterB: boolean readBit(int)>(0);
        $r7 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r8 = $r7.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterC UCSRnC_reg>;
        $i1 = virtualinvoke $r8.<avrora.sim.mcu.USART$ControlRegisterC: int getFrameSize()>();
        specialinvoke $r0.<avrora.sim.mcu.USART$Frame: void <init>(byte,boolean,int)>($b0, $z1, $i1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>($r1, 99, tid_enableTransmit, "avrora.sim.mcu.USART$Transmitter", 244, $r0);
        $r1.<avrora.sim.mcu.USART$Transmitter$Transmit: avrora.sim.mcu.USART$Frame frame> = $r0;
        $r9 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r10 = $r9.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterA UCSRnA_reg>;
        $r11 = $r10.<avrora.sim.mcu.USART$ControlRegisterA: avrora.sim.mcu.ATMegaFamily$InterruptFlag UDRE_flag>;
        virtualinvoke $r11.<avrora.sim.mcu.ATMegaFamily$InterruptFlag: void flag(boolean)>(1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 98, tid_enableTransmit, "avrora.sim.mcu.USART$Transmitter", 247, 1);
        this.<avrora.sim.mcu.USART$Transmitter: boolean transmitting> = 1;
        $r9 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r12 = $r9.<avrora.sim.mcu.USART: avrora.sim.clock.Clock mainClock>;
        $r13 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART$Transmitter$Transmit transmit>;
        $r2 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r14 = $r2.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterC UCSRnC_reg>;
        $i2 = virtualinvoke $r14.<avrora.sim.mcu.USART$ControlRegisterC: int getFrameSize()>();
        $i3 = 1 + $i2;
        $r2 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        $r14 = $r2.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterC UCSRnC_reg>;
        $i2 = virtualinvoke $r14.<avrora.sim.mcu.USART$ControlRegisterC: int getStopBits()>();
        $i3 = $i3 + $i2;
        $r2 = this.<avrora.sim.mcu.USART$Transmitter: avrora.sim.mcu.USART this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>($r2, 32, tid_enableTransmit, "avrora.sim.mcu.USART$Transmitter", 248, $i2);
        $i2 = $r2.<avrora.sim.mcu.USART: int period>;
        $i3 = $i3 * $i2;
        $l4 = (long) $i3;
        virtualinvoke $r12.<avrora.sim.clock.Clock: void insertEvent(avrora.sim.Simulator$Event,long)>($r13, $l4);

     label0:
        return;
    }
}
