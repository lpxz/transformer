public class avrora.sim.mcu.SPI extends avrora.sim.mcu.AtmelInternalDevice implements avrora.sim.mcu.SPIDevice, avrora.sim.InterruptTable$Notification
{
    final avrora.sim.mcu.SPI$SPDReg SPDR_reg;
    final avrora.sim.mcu.SPI$SPCRReg SPCR_reg;
    final avrora.sim.mcu.SPI$SPSReg SPSR_reg;
    avrora.sim.mcu.SPIDevice connectedDevice;
    final avrora.sim.mcu.SPI$TransferEvent transferEvent;
    boolean spifAccessed;
    int interruptNum;
    protected int period;
    private static final avrora.sim.mcu.SPI$Frame[] frameCache;
    public static final avrora.sim.mcu.SPI$Frame ZERO_FRAME;
    public static final avrora.sim.mcu.SPI$Frame FF_FRAME;

    public static avrora.sim.mcu.SPI$Frame newFrame(byte)
    {
        byte data;
        avrora.sim.mcu.SPI$Frame[] $r0;
        short $s0;
        avrora.sim.mcu.SPI$Frame $r1;

        data := @parameter0: byte;
        $r0 = <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame[] frameCache>;
        $s0 = data & 255;
        $r1 = $r0[$s0];
        return $r1;
    }

    public void connect(avrora.sim.mcu.SPIDevice)
    {
        avrora.sim.mcu.SPI this;
        avrora.sim.mcu.SPIDevice d;

        this := @this: avrora.sim.mcu.SPI;
        d := @parameter0: avrora.sim.mcu.SPIDevice;
        this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPIDevice connectedDevice> = d;
        return;
    }

    public avrora.sim.mcu.SPI$Frame exchange(avrora.sim.mcu.SPI$Frame)
    {
        avrora.sim.mcu.SPI this;
        avrora.sim.mcu.SPI$Frame frame, result;
        avrora.sim.mcu.SPI$SPDReg $r0;
        avrora.sim.mcu.SPI$SPDReg$TransmitRegister $r1;
        byte $b0;

        this := @this: avrora.sim.mcu.SPI;
        frame := @parameter0: avrora.sim.mcu.SPI$Frame;
        $r0 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPDReg SPDR_reg>;
        $r1 = $r0.<avrora.sim.mcu.SPI$SPDReg: avrora.sim.mcu.SPI$SPDReg$TransmitRegister transmitReg>;
        $b0 = virtualinvoke $r1.<avrora.sim.mcu.SPI$SPDReg$TransmitRegister: byte read()>();
        result = staticinvoke <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame newFrame(byte)>($b0);
        virtualinvoke this.<avrora.sim.mcu.SPI: void receive(avrora.sim.mcu.SPI$Frame)>(frame);
        return result;
    }

    public void receive(avrora.sim.mcu.SPI$Frame)
    {
        avrora.sim.mcu.SPI this;
        avrora.sim.mcu.SPI$Frame frame;
        avrora.sim.mcu.SPI$SPDReg $r0;
        avrora.sim.RWRegister $r1;
        byte $b0;
        avrora.sim.mcu.SPI$SPCRReg $r2;
        avrora.sim.state.BooleanView $r3;
        boolean $z0;
        avrora.sim.mcu.SPI$TransferEvent $r4;
        long tid_receive;
        java.lang.Thread thread_receive;

        this := @this: avrora.sim.mcu.SPI;
        frame := @parameter0: avrora.sim.mcu.SPI$Frame;
        thread_receive = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_receive = virtualinvoke thread_receive.<java.lang.Thread: long getId()>();
        $r0 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPDReg SPDR_reg>;
        $r1 = $r0.<avrora.sim.mcu.SPI$SPDReg: avrora.sim.RWRegister receiveReg>;
        $b0 = frame.<avrora.sim.mcu.SPI$Frame: byte data>;
        virtualinvoke $r1.<avrora.sim.RWRegister: void write(byte)>($b0);
        $r2 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPCRReg SPCR_reg>;
        $r3 = $r2.<avrora.sim.mcu.SPI$SPCRReg: avrora.sim.state.BooleanView _master>;
        $z0 = interfaceinvoke $r3.<avrora.sim.state.BooleanView: boolean getValue()>();
        if $z0 != 0 goto label0;

        $r4 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$TransferEvent transferEvent>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>($r4, 35, tid_receive, "avrora.sim.mcu.SPI", 99, $z0);
        $z0 = $r4.<avrora.sim.mcu.SPI$TransferEvent: boolean transmitting>;
        if $z0 != 0 goto label0;

        specialinvoke this.<avrora.sim.mcu.SPI: void postSPIInterrupt()>();

     label0:
        return;
    }

    public void <init>(avrora.sim.mcu.AtmelMicrocontroller)
    {
        avrora.sim.mcu.SPI this;
        avrora.sim.mcu.AtmelMicrocontroller m;
        avrora.sim.mcu.SPI$TransferEvent $r0;
        avrora.sim.mcu.SPI$SPDReg $r1, $r5;
        avrora.sim.mcu.SPI$SPCRReg $r2, $r7;
        avrora.sim.mcu.SPI$SPSReg $r3, $r6;
        avrora.sim.mcu.MCUProperties $r4;
        int $i0, $i1;
        avrora.sim.AtmelInterpreter $r8;
        avrora.sim.InterruptTable $r9;

        this := @this: avrora.sim.mcu.SPI;
        m := @parameter0: avrora.sim.mcu.AtmelMicrocontroller;
        specialinvoke this.<avrora.sim.mcu.AtmelInternalDevice: void <init>(java.lang.String,avrora.sim.mcu.AtmelMicrocontroller)>("spi", m);
        $r0 = new avrora.sim.mcu.SPI$TransferEvent;
        specialinvoke $r0.<avrora.sim.mcu.SPI$TransferEvent: void <init>(avrora.sim.mcu.SPI)>(this);
        this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$TransferEvent transferEvent> = $r0;
        $r1 = new avrora.sim.mcu.SPI$SPDReg;
        specialinvoke $r1.<avrora.sim.mcu.SPI$SPDReg: void <init>(avrora.sim.mcu.SPI)>(this);
        this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPDReg SPDR_reg> = $r1;
        $r2 = new avrora.sim.mcu.SPI$SPCRReg;
        specialinvoke $r2.<avrora.sim.mcu.SPI$SPCRReg: void <init>(avrora.sim.mcu.SPI)>(this);
        this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPCRReg SPCR_reg> = $r2;
        $r3 = new avrora.sim.mcu.SPI$SPSReg;
        specialinvoke $r3.<avrora.sim.mcu.SPI$SPSReg: void <init>(avrora.sim.mcu.SPI)>(this);
        this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg> = $r3;
        $r4 = virtualinvoke m.<avrora.sim.mcu.AtmelMicrocontroller: avrora.sim.mcu.MCUProperties getProperties()>();
        $i0 = virtualinvoke $r4.<avrora.sim.mcu.MCUProperties: int getInterrupt(java.lang.String)>("SPI, STC");
        this.<avrora.sim.mcu.SPI: int interruptNum> = $i0;
        $r5 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPDReg SPDR_reg>;
        virtualinvoke this.<avrora.sim.mcu.SPI: void installIOReg(java.lang.String,avrora.sim.ActiveRegister)>("SPDR", $r5);
        $r6 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg>;
        virtualinvoke this.<avrora.sim.mcu.SPI: void installIOReg(java.lang.String,avrora.sim.ActiveRegister)>("SPSR", $r6);
        $r7 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPCRReg SPCR_reg>;
        virtualinvoke this.<avrora.sim.mcu.SPI: void installIOReg(java.lang.String,avrora.sim.ActiveRegister)>("SPCR", $r7);
        $r8 = this.<avrora.sim.mcu.SPI: avrora.sim.AtmelInterpreter interpreter>;
        $r9 = virtualinvoke $r8.<avrora.sim.AtmelInterpreter: avrora.sim.InterruptTable getInterruptTable()>();
        $i1 = this.<avrora.sim.mcu.SPI: int interruptNum>;
        virtualinvoke $r9.<avrora.sim.InterruptTable: void registerInternalNotification(avrora.sim.InterruptTable$Notification,int)>(this, $i1);
        return;
    }

    private void postSPIInterrupt()
    {
        avrora.sim.mcu.SPI this;
        avrora.sim.AtmelInterpreter $r0;
        int $i0;
        avrora.sim.mcu.SPI$SPSReg $r1;

        this := @this: avrora.sim.mcu.SPI;
        $r0 = this.<avrora.sim.mcu.SPI: avrora.sim.AtmelInterpreter interpreter>;
        $i0 = this.<avrora.sim.mcu.SPI: int interruptNum>;
        virtualinvoke $r0.<avrora.sim.AtmelInterpreter: void setPosted(int,boolean)>($i0, 1);
        $r1 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg>;
        virtualinvoke $r1.<avrora.sim.mcu.SPI$SPSReg: void setSPIF()>();
        return;
    }

    private void unpostSPIInterrupt()
    {
        avrora.sim.mcu.SPI this;
        avrora.sim.AtmelInterpreter $r0;
        int $i0;
        avrora.sim.mcu.SPI$SPSReg $r1;

        this := @this: avrora.sim.mcu.SPI;
        $r0 = this.<avrora.sim.mcu.SPI: avrora.sim.AtmelInterpreter interpreter>;
        $i0 = this.<avrora.sim.mcu.SPI: int interruptNum>;
        virtualinvoke $r0.<avrora.sim.AtmelInterpreter: void setPosted(int,boolean)>($i0, 0);
        $r1 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg>;
        virtualinvoke $r1.<avrora.sim.mcu.SPI$SPSReg: void clearSPIF()>();
        return;
    }

    public void force(int)
    {
        avrora.sim.mcu.SPI this;
        int inum;
        avrora.sim.mcu.SPI$SPSReg $r0;

        this := @this: avrora.sim.mcu.SPI;
        inum := @parameter0: int;
        $r0 = this.<avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$SPSReg SPSR_reg>;
        virtualinvoke $r0.<avrora.sim.mcu.SPI$SPSReg: void setSPIF()>();
        return;
    }

    public void invoke(int)
    {
        avrora.sim.mcu.SPI this;
        int inum;

        this := @this: avrora.sim.mcu.SPI;
        inum := @parameter0: int;
        specialinvoke this.<avrora.sim.mcu.SPI: void unpostSPIInterrupt()>();
        return;
    }

    static void access$000(avrora.sim.mcu.SPI)
    {
        avrora.sim.mcu.SPI x0;

        x0 := @parameter0: avrora.sim.mcu.SPI;
        specialinvoke x0.<avrora.sim.mcu.SPI: void postSPIInterrupt()>();
        return;
    }

    static void access$100(avrora.sim.mcu.SPI)
    {
        avrora.sim.mcu.SPI x0;

        x0 := @parameter0: avrora.sim.mcu.SPI;
        specialinvoke x0.<avrora.sim.mcu.SPI: void unpostSPIInterrupt()>();
        return;
    }

    static void <clinit>()
    {
        int cntr;
        avrora.sim.mcu.SPI$Frame $r0, $r2;
        avrora.sim.mcu.SPI$Frame[] $r1;
        byte $b0;

        $r1 = newarray (avrora.sim.mcu.SPI$Frame)[256];
        <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame[] frameCache> = $r1;
        cntr = 0;

     label0:
        if cntr >= 256 goto label1;

        $r1 = <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame[] frameCache>;
        $r0 = new avrora.sim.mcu.SPI$Frame;
        $b0 = (byte) cntr;
        specialinvoke $r0.<avrora.sim.mcu.SPI$Frame: void <init>(byte)>($b0);
        $r1[cntr] = $r0;
        cntr = cntr + 1;
        goto label0;

     label1:
        $r1 = <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame[] frameCache>;
        $r2 = $r1[0];
        <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame ZERO_FRAME> = $r2;
        $r1 = <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame[] frameCache>;
        $r2 = $r1[255];
        <avrora.sim.mcu.SPI: avrora.sim.mcu.SPI$Frame FF_FRAME> = $r2;
        return;
    }
}
