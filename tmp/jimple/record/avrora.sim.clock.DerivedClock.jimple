public class avrora.sim.clock.DerivedClock extends avrora.sim.clock.Clock
{
    protected final avrora.sim.clock.Clock driveClock;
    protected final double divider;

    public void <init>(java.lang.String, avrora.sim.clock.Clock, long)
    {
        avrora.sim.clock.DerivedClock this;
        java.lang.String n;
        avrora.sim.clock.Clock driver;
        long hz, $l0, $l2;
        byte $b1;
        cck.util.Util$InternalError $r0;
        double $d0;

        this := @this: avrora.sim.clock.DerivedClock;
        n := @parameter0: java.lang.String;
        driver := @parameter1: avrora.sim.clock.Clock;
        hz := @parameter2: long;
        specialinvoke this.<avrora.sim.clock.Clock: void <init>(java.lang.String,long)>(n, hz);
        this.<avrora.sim.clock.DerivedClock: avrora.sim.clock.Clock driveClock> = driver;
        $l0 = virtualinvoke driver.<avrora.sim.clock.Clock: long getHZ()>();
        $b1 = $l0 cmp hz;
        if $b1 >= 0 goto label0;

        $r0 = staticinvoke <cck.util.Util: cck.util.Util$InternalError failure(java.lang.String)>("cannot derive faster clock from slower clock");
        throw $r0;

     label0:
        $l2 = virtualinvoke driver.<avrora.sim.clock.Clock: long getHZ()>();
        $l2 = $l2 / hz;
        $d0 = (double) $l2;
        this.<avrora.sim.clock.DerivedClock: double divider> = $d0;
        return;
    }

    public long getCount()
    {
        avrora.sim.clock.DerivedClock this;
        avrora.sim.clock.Clock $r0;
        long $l0;
        double $d0, $d1;

        this := @this: avrora.sim.clock.DerivedClock;
        $r0 = this.<avrora.sim.clock.DerivedClock: avrora.sim.clock.Clock driveClock>;
        $l0 = virtualinvoke $r0.<avrora.sim.clock.Clock: long getCount()>();
        $d0 = (double) $l0;
        $d1 = this.<avrora.sim.clock.DerivedClock: double divider>;
        $d0 = $d0 / $d1;
        $l0 = (long) $d0;
        return $l0;
    }

    public void insertEvent(avrora.sim.Simulator$Event, long)
    {
        avrora.sim.clock.DerivedClock this;
        avrora.sim.Simulator$Event e;
        long delta, driverCount, nextTick, $l0, $l1;
        avrora.sim.clock.Clock $r0;
        double $d0, $d1;

        this := @this: avrora.sim.clock.DerivedClock;
        e := @parameter0: avrora.sim.Simulator$Event;
        delta := @parameter1: long;
        $r0 = this.<avrora.sim.clock.DerivedClock: avrora.sim.clock.Clock driveClock>;
        driverCount = virtualinvoke $r0.<avrora.sim.clock.Clock: long getCount()>();
        $d0 = (double) driverCount;
        $d1 = this.<avrora.sim.clock.DerivedClock: double divider>;
        $d0 = $d0 / $d1;
        $l0 = (long) $d0;
        $l0 = $l0 + delta;
        $d0 = (double) $l0;
        $d1 = this.<avrora.sim.clock.DerivedClock: double divider>;
        $d0 = $d0 * $d1;
        nextTick = (long) $d0;
        $r0 = this.<avrora.sim.clock.DerivedClock: avrora.sim.clock.Clock driveClock>;
        $l1 = nextTick - driverCount;
        virtualinvoke $r0.<avrora.sim.clock.Clock: void insertEvent(avrora.sim.Simulator$Event,long)>(e, $l1);
        return;
    }

    public void removeEvent(avrora.sim.Simulator$Event)
    {
        avrora.sim.clock.DerivedClock this;
        avrora.sim.Simulator$Event e;
        avrora.sim.clock.Clock $r0;

        this := @this: avrora.sim.clock.DerivedClock;
        e := @parameter0: avrora.sim.Simulator$Event;
        $r0 = this.<avrora.sim.clock.DerivedClock: avrora.sim.clock.Clock driveClock>;
        virtualinvoke $r0.<avrora.sim.clock.Clock: void removeEvent(avrora.sim.Simulator$Event)>(e);
        return;
    }
}
