public abstract class cck.util.Option extends java.lang.Object
{
    protected final java.lang.String name;
    protected final java.lang.String description;
    public static final java.util.Comparator COMPARATOR;

    public void <init>(java.lang.String, java.lang.String)
    {
        cck.util.Option this;
        java.lang.String n, d;

        this := @this: cck.util.Option;
        n := @parameter0: java.lang.String;
        d := @parameter1: java.lang.String;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<cck.util.Option: java.lang.String name> = n;
        this.<cck.util.Option: java.lang.String description> = d;
        return;
    }

    public java.lang.String getName()
    {
        cck.util.Option this;
        java.lang.String $r0;

        this := @this: cck.util.Option;
        $r0 = this.<cck.util.Option: java.lang.String name>;
        return $r0;
    }

    public abstract void set(java.lang.String);

    public abstract java.lang.String stringValue();

    public abstract void printHelp();

    public void printDescription()
    {
        cck.util.Option this;
        java.lang.String $r0;

        this := @this: cck.util.Option;
        $r0 = this.<cck.util.Option: java.lang.String description>;
        $r0 = staticinvoke <cck.text.StringUtil: java.lang.String formatParagraphs(java.lang.String,int,int,int)>($r0, 8, 0, 78);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>($r0);
        staticinvoke <cck.text.Terminal: void nextln()>();
        return;
    }

    public void printHeader(java.lang.String, java.lang.String)
    {
        cck.util.Option this;
        java.lang.String type, defvalue, $r1, $r2;
        java.lang.StringBuilder $r0;

        this := @this: cck.util.Option;
        type := @parameter0: java.lang.String;
        defvalue := @parameter1: java.lang.String;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    -");
        $r1 = this.<cck.util.Option: java.lang.String name>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.text.Terminal: void printGreen(java.lang.String)>($r2);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(": ");
        staticinvoke <cck.text.Terminal: void printBrightCyan(java.lang.String)>(type);
        staticinvoke <cck.text.Terminal: void print(java.lang.String)>(" = ");
        staticinvoke <cck.text.Terminal: void printYellow(java.lang.String)>(defvalue);
        staticinvoke <cck.text.Terminal: void nextln()>();
        return;
    }

    protected void parseError(java.lang.String, java.lang.String, java.lang.String)
    {
        cck.util.Option this;
        java.lang.String name, type, val, $r1, $r2;
        java.lang.StringBuilder $r0;

        this := @this: cck.util.Option;
        name := @parameter0: java.lang.String;
        type := @parameter1: java.lang.String;
        val := @parameter2: java.lang.String;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid value for ");
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(type);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" option ");
        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(name);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");
        $r1 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(val);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("Option Error", $r2);
        return;
    }

    static void <clinit>()
    {
        cck.util.Option$1 $r0;

        $r0 = new cck.util.Option$1;
        specialinvoke $r0.<cck.util.Option$1: void <init>()>();
        <cck.util.Option: java.util.Comparator COMPARATOR> = $r0;
        return;
    }
}
