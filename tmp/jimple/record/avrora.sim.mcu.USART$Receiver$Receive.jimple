public class avrora.sim.mcu.USART$Receiver$Receive extends java.lang.Object implements avrora.sim.Simulator$Event
{
    avrora.sim.mcu.USART$Frame frame;
    final avrora.sim.mcu.USART$Receiver this$1;

    protected void <init>(avrora.sim.mcu.USART$Receiver)
    {
        avrora.sim.mcu.USART$Receiver$Receive this;
        avrora.sim.mcu.USART$Receiver l1;

        this := @this: avrora.sim.mcu.USART$Receiver$Receive;
        l1 := @parameter0: avrora.sim.mcu.USART$Receiver;
        this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1> = l1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public void fire()
    {
        avrora.sim.mcu.USART$Receiver$Receive this;
        avrora.sim.mcu.USART$Receiver $r0, $r5;
        avrora.sim.mcu.USART $r1, $r6;
        avrora.sim.mcu.USART$Frame $r2, $r9;
        avrora.sim.output.SimPrinter $r3;
        java.lang.StringBuilder $r4;
        avrora.sim.mcu.USART$USARTProperties $r7;
        java.lang.String $r8, $r12;
        avrora.sim.mcu.USART$UBRRnHReg $r10;
        byte $b0;
        avrora.sim.mcu.USART$UBRRnLReg $r11;
        int $i1;
        avrora.sim.mcu.USART$ControlRegisterA $r13;
        avrora.sim.mcu.ATMegaFamily$InterruptFlag $r14;
        long tid_fire;
        java.lang.Thread thread_fire;

        this := @this: avrora.sim.mcu.USART$Receiver$Receive;
        thread_fire = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fire = virtualinvoke thread_fire.<java.lang.Thread: long getId()>();
        $r0 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r1 = $r0.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r2 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Frame frame>;
        virtualinvoke $r1.<avrora.sim.mcu.USART: void receiveFrame(avrora.sim.mcu.USART$Frame)>($r2);
        $r0 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r1 = $r0.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r3 = $r1.<avrora.sim.mcu.USART: avrora.sim.output.SimPrinter devicePrinter>;
        if $r3 == null goto label0;

        $r0 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r1 = $r0.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r3 = $r1.<avrora.sim.mcu.USART: avrora.sim.output.SimPrinter devicePrinter>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r5 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r6 = $r5.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r7 = $r6.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$USARTProperties properties>;
        $r8 = $r7.<avrora.sim.mcu.USART$USARTProperties: java.lang.String USART_name>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Received frame ");
        $r9 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Frame frame>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        $r5 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r6 = $r5.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r10 = $r6.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$UBRRnHReg UBRRnH_reg>;
        $b0 = virtualinvoke $r10.<avrora.sim.mcu.USART$UBRRnHReg: byte read()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        $r5 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r6 = $r5.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r11 = $r6.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$UBRRnLReg UBRRnL_reg>;
        $b0 = virtualinvoke $r11.<avrora.sim.mcu.USART$UBRRnLReg: byte read()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($b0);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        $r5 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r6 = $r5.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>($r6, 33, tid_fire, "avrora.sim.mcu.USART$Receiver$Receive", 297, $i1);
        $i1 = $r6.<avrora.sim.mcu.USART: int UBRRMultiplier>;
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);
        $r12 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r3.<avrora.sim.output.SimPrinter: void println(java.lang.String)>($r12);

     label0:
        $r0 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r1 = $r0.<avrora.sim.mcu.USART$Receiver: avrora.sim.mcu.USART this$0>;
        $r13 = $r1.<avrora.sim.mcu.USART: avrora.sim.mcu.USART$ControlRegisterA UCSRnA_reg>;
        $r14 = $r13.<avrora.sim.mcu.USART$ControlRegisterA: avrora.sim.mcu.ATMegaFamily$InterruptFlag RXC_flag>;
        virtualinvoke $r14.<avrora.sim.mcu.ATMegaFamily$InterruptFlag: void flag(boolean)>(1);
        $r0 = this.<avrora.sim.mcu.USART$Receiver$Receive: avrora.sim.mcu.USART$Receiver this$1>;
        $r0.<avrora.sim.mcu.USART$Receiver: boolean receiving> = 0;
        return;
    }
}
