public class spec.reporter.TextMetrics extends spec.reporter.Metrics
{
    static final java.lang.String COPYRIGHT;
    private static int digits;
    private static java.text.DecimalFormat memFormat;

    static void <clinit>()
    {
        java.text.DecimalFormat $r0;

        <spec.reporter.TextMetrics: int digits> = 3;
        $r0 = new java.text.DecimalFormat;
        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String)>("#0");
        <spec.reporter.TextMetrics: java.text.DecimalFormat memFormat> = $r0;
        return;
    }

    public void <init>(spec.reporter.ReportProps, boolean)
    {
        spec.reporter.TextMetrics this;
        spec.reporter.ReportProps props;
        boolean SPECInternalUse;

        this := @this: spec.reporter.TextMetrics;
        props := @parameter0: spec.reporter.ReportProps;
        SPECInternalUse := @parameter1: boolean;
        specialinvoke this.<spec.reporter.Metrics: void <init>(spec.reporter.ReportProps,boolean)>(props, SPECInternalUse);
        return;
    }

    public java.lang.String wrap(java.lang.String)
    {
        spec.reporter.TextMetrics this;
        java.lang.String s, $r1, $r2;
        java.lang.StringBuilder $r0;

        this := @this: spec.reporter.TextMetrics;
        s := @parameter0: java.lang.String;
        $r0 = new java.lang.StringBuilder;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(s);
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        return $r2;
    }

    public java.lang.String detail()
    {
        spec.reporter.TextMetrics this;
        java.lang.StringBuffer $r0, buf, $r1;
        spec.reporter.TextBlock c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, $r3, $r12;
        int i, j, $i0, $i1, $i2;
        spec.reporter.Result r;
        boolean $z0;
        java.lang.String $r2, $r13;
        spec.reporter.Result[] $r4, $r11;
        spec.reporter.Run[] $r5, $r9;
        java.lang.StringBuilder $r6;
        double $d0, $d1, $d2, $d3, $d4;
        java.text.DecimalFormat $r7;
        java.lang.String[] $r8;
        spec.reporter.Run $r10;
        long tid_detail;
        java.lang.Thread thread_detail;

        this := @this: spec.reporter.TextMetrics;
        thread_detail = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_detail = virtualinvoke thread_detail.<java.lang.Thread: long getId()>();
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        buf = $r0;
        $z0 = this.<spec.reporter.TextMetrics: boolean valid>;
        if $z0 != 0 goto label0;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("*** Invalid Result\n");
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("This result is not valid for the following reason(s):\n");
        $r1 = this.<spec.reporter.TextMetrics: java.lang.StringBuffer invalid_buf>;
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

     label0:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n* Details of Runs\n\n");
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(5);
        c1 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(8);
        c2 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(9);
        c3 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(9);
        c4 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(8);
        c5 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(8);
        c6 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int,java.lang.String)>(12, "Trans.");
        c7 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int)>(10);
        c8 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int,java.lang.String)>(6, "Resp.");
        c9 = $r3;
        $r3 = new spec.reporter.TextBlock;
        specialinvoke $r3.<spec.reporter.TextBlock: void <init>(int,java.lang.String)>(8, "Time (s)");
        c10 = $r3;
        virtualinvoke c1.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Wh.");
        virtualinvoke c1.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c2.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Score");
        virtualinvoke c2.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c3.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Tot.");
        virtualinvoke c3.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Heap");
        virtualinvoke c4.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Used");
        virtualinvoke c4.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Heap");
        virtualinvoke c5.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Thread");
        virtualinvoke c5.<spec.reporter.TextBlock: void addRight(java.lang.String)>("spread");
        virtualinvoke c6.<spec.reporter.TextBlock: void addRight(java.lang.String)>("elapsed");
        virtualinvoke c6.<spec.reporter.TextBlock: void addRight(java.lang.String)>("> 120s");
        virtualinvoke c7.<spec.reporter.TextBlock: void add(java.lang.String)>("Type");
        virtualinvoke c8.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Count");
        virtualinvoke c8.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c9.<spec.reporter.TextBlock: void add(java.lang.String)>("total");
        virtualinvoke c10.<spec.reporter.TextBlock: void add(java.lang.String)>("max");
        virtualinvoke c1.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c2.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c3.<spec.reporter.TextBlock: void addRight(java.lang.String)>("(MB)");
        virtualinvoke c4.<spec.reporter.TextBlock: void addRight(java.lang.String)>("(MB)");
        virtualinvoke c5.<spec.reporter.TextBlock: void add(java.lang.String)>("%");
        virtualinvoke c6.<spec.reporter.TextBlock: void add(java.lang.String)>("%");
        virtualinvoke c7.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c8.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c9.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c10.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        i = 0;
        goto label8;

     label1:
        $r4 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        r = $r4[i];
        $r5 = r.<spec.reporter.Result: spec.reporter.Run[] run>;
        $i0 = lengthof $r5;
        if $i0 > 0 goto label2;

        virtualinvoke c3.<spec.reporter.TextBlock: void add(java.lang.String)>("not run");
        virtualinvoke c4.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c5.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c6.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c7.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c8.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c9.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c10.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        goto label7;

     label2:
        j = 0;
        goto label6;

     label3:
        if j <= 0 goto label4;

        virtualinvoke c1.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c2.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c3.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c4.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c5.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke c6.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        goto label5;

     label4:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();
        $i1 = virtualinvoke r.<spec.reporter.Result: int warehouses()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);
        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke c1.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);
        $d0 = virtualinvoke r.<spec.reporter.Result: double score()>();
        $r2 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke c2.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);
        $r7 = <spec.reporter.TextMetrics: java.text.DecimalFormat memFormat>;
        $d1 = r.<spec.reporter.Result: double heapsize>;
        $r2 = virtualinvoke $r7.<java.text.DecimalFormat: java.lang.String format(double)>($d1);
        virtualinvoke c3.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);
        $r7 = <spec.reporter.TextMetrics: java.text.DecimalFormat memFormat>;
        $d1 = r.<spec.reporter.Result: double heapused>;
        $r2 = virtualinvoke $r7.<java.text.DecimalFormat: java.lang.String format(double)>($d1);
        virtualinvoke c4.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);
        $d2 = r.<spec.reporter.Result: double max_thread_transactions>;
        $d3 = r.<spec.reporter.Result: double min_thread_transactions>;
        $d2 = $d2 - $d3;
        $d0 = 100.0 * $d2;
        $d2 = r.<spec.reporter.Result: double max_thread_transactions>;
        $d0 = $d0 / $d2;
        $r2 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke c5.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);
        $d2 = r.<spec.reporter.Result: double elapsed>;
        $d4 = r.<spec.reporter.Result: double meas_int>;
        $d3 = 1000.0 * $d4;
        $d2 = $d2 - $d3;
        $d0 = 0.1 * $d2;
        $d2 = r.<spec.reporter.Result: double meas_int>;
        $d0 = $d0 / $d2;
        $r2 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke c6.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);

     label5:
        $r8 = <spec.reporter.Run: java.lang.String[] transaction>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>($r8, 23, tid_detail, "spec.reporter.TextMetrics", 122, j, $r2);
        $r2 = $r8[j];
        virtualinvoke c7.<spec.reporter.TextBlock: void add(java.lang.String)>($r2);
        $r9 = r.<spec.reporter.Result: spec.reporter.Run[] run>;
        $r10 = $r9[j];
        $i2 = $r10.<spec.reporter.Run: int count>;
        $d0 = (double) $i2;
        $r2 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke c8.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r2);
        $r9 = r.<spec.reporter.Result: spec.reporter.Run[] run>;
        $r10 = $r9[j];
        $d0 = $r10.<spec.reporter.Run: double totaltime>;
        $r2 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke c9.<spec.reporter.TextBlock: void add(java.lang.String)>($r2);
        $r9 = r.<spec.reporter.Result: spec.reporter.Run[] run>;
        $r10 = $r9[j];
        $d0 = $r10.<spec.reporter.Run: double maximumtime>;
        $r2 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke c10.<spec.reporter.TextBlock: void add(java.lang.String)>($r2);
        j = j + 1;

     label6:
        $r9 = r.<spec.reporter.Result: spec.reporter.Run[] run>;
        $i2 = lengthof $r9;
        if j < $i2 goto label3;

     label7:
        i = i + 1;

     label8:
        $r11 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $i2 = lengthof $r11;
        if i < $i2 goto label1;

        $r12 = virtualinvoke c1.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c2, "");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c3, "");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c4, "");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c5, "");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c6, "");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c7, " ");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c8, "");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c9, " ");
        $r12 = virtualinvoke $r12.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(c10, "");
        $r2 = virtualinvoke $r12.<spec.reporter.TextBlock: java.lang.String toString()>();
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        $r13 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r13;
    }

    public java.lang.String ratioTable()
    {
        spec.reporter.TextMetrics this;
        java.lang.StringBuffer $r0, buf;
        java.lang.String error_messages, $r9, $r11;
        spec.reporter.TextBlock messages, wh, thrp, $r1, $r10;
        int i, $i0, $i1, $i2;
        spec.reporter.Result[] $r2, $r4, $r7;
        spec.reporter.Result $r3, $r5, $r8;
        java.lang.StringBuilder $r6;
        double $d0;

        this := @this: spec.reporter.TextMetrics;
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        buf = $r0;
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\nValidity\n");
        $r0 = this.<spec.reporter.TextMetrics: java.lang.StringBuffer check_all_buf>;
        error_messages = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();
        if error_messages != null goto label0;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Valid run; no errors");
        goto label1;

     label0:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(error_messages);

     label1:
        $r1 = new spec.reporter.TextBlock;
        specialinvoke $r1.<spec.reporter.TextBlock: void <init>(int)>(119);
        messages = $r1;
        $r1 = new spec.reporter.TextBlock;
        specialinvoke $r1.<spec.reporter.TextBlock: void <init>(int)>(15);
        wh = $r1;
        virtualinvoke wh.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Warehouses");
        $r1 = new spec.reporter.TextBlock;
        specialinvoke $r1.<spec.reporter.TextBlock: void <init>(int)>(20);
        thrp = $r1;
        virtualinvoke thrp.<spec.reporter.TextBlock: void addRight(java.lang.String)>("Thrput");
        virtualinvoke messages.<spec.reporter.TextBlock: void add(java.lang.String)>("\n                   SPEC scores");
        i = 0;
        goto label5;

     label2:
        $i0 = this.<spec.reporter.TextMetrics: int expectedPeakWh>;
        $r2 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $r3 = $r2[i];
        $i1 = virtualinvoke $r3.<spec.reporter.Result: int warehouses()>();
        if $i0 > $i1 goto label3;

        $r4 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $r5 = $r4[i];
        $i0 = virtualinvoke $r5.<spec.reporter.Result: int warehouses()>();
        $i2 = this.<spec.reporter.TextMetrics: int expectedPeakWh>;
        $i1 = 2 * $i2;
        if $i0 > $i1 goto label3;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>(" * ");
        $r7 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $r8 = $r7[i];
        $i2 = virtualinvoke $r8.<spec.reporter.Result: int warehouses()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke wh.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r9);
        goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("   ");
        $r7 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $r8 = $r7[i];
        $i2 = virtualinvoke $r8.<spec.reporter.Result: int warehouses()>();
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);
        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke wh.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r9);

     label4:
        $r2 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $r3 = $r2[i];
        $d0 = virtualinvoke $r3.<spec.reporter.Result: double score()>();
        $r9 = staticinvoke <spec.reporter.Metrics: java.lang.String format(double)>($d0);
        virtualinvoke thrp.<spec.reporter.TextBlock: void addRight(java.lang.String)>($r9);
        i = i + 1;

     label5:
        $r2 = this.<spec.reporter.TextMetrics: spec.reporter.Result[] result>;
        $i1 = lengthof $r2;
        if i < $i1 goto label2;

        virtualinvoke wh.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke thrp.<spec.reporter.TextBlock: void add(java.lang.String)>("");
        virtualinvoke wh.<spec.reporter.TextBlock: void add(java.lang.String)>("Throughput");
        $r9 = virtualinvoke this.<spec.reporter.TextMetrics: java.lang.String metric()>();
        virtualinvoke thrp.<spec.reporter.TextBlock: void add(java.lang.String)>($r9);
        $r10 = virtualinvoke wh.<spec.reporter.TextBlock: spec.reporter.TextBlock join(spec.reporter.TextBlock,java.lang.String)>(thrp, " ");
        virtualinvoke messages.<spec.reporter.TextBlock: void add(spec.reporter.TextBlock)>($r10);
        $r9 = virtualinvoke messages.<spec.reporter.TextBlock: java.lang.String toString()>();
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);
        $r11 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r11;
    }
}
