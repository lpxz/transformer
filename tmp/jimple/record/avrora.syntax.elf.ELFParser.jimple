public class avrora.syntax.elf.ELFParser extends avrora.core.ProgramReader
{
    cck.elf.ELFHeader header;
    cck.elf.ELFProgramHeaderTable pht;
    cck.elf.ELFSectionHeaderTable sht;
    java.util.List symbolTables;
    cck.elf.ELFStringTable shstrtab;
    avrora.arch.AbstractArchitecture arch;
    protected final cck.util.Option$Bool SYMBOLS;

    public void <init>()
    {
        avrora.syntax.elf.ELFParser this;
        cck.util.Option$Bool $r0;

        this := @this: avrora.syntax.elf.ELFParser;
        specialinvoke this.<avrora.core.ProgramReader: void <init>(java.lang.String)>("The \"elf\" format loader reads a program from an ELF (Executable and Linkable Format) as a binary and disassembles the sections corresponding to executable code.");
        $r0 = virtualinvoke this.<avrora.syntax.elf.ELFParser: cck.util.Option$Bool newOption(java.lang.String,boolean,java.lang.String)>("load-symbols", 1, "This option causes the ELF loader to load the symbol table (if it exists) from the ELF file. The symbol table contains information about the names and sizes of data items and functions within the executable. Enabling this option allows for more source-level information during simulation, but disabling it speeds up loading of ELF files.");
        this.<avrora.syntax.elf.ELFParser: cck.util.Option$Bool SYMBOLS> = $r0;
        return;
    }

    public avrora.core.Program read(java.lang.String[]) throws java.lang.Exception
    {
        avrora.syntax.elf.ELFParser this;
        java.lang.String[] args;
        java.lang.String fname;
        java.io.RandomAccessFile fis, $r0;
        cck.elf.ELFHeader$FormatError e, $r2;
        avrora.core.Program p;
        int $i0;
        cck.elf.ELFHeader $r1, $r4;
        avrora.arch.AbstractArchitecture $r3;
        cck.elf.ELFProgramHeaderTable $r5;
        cck.util.Option$Bool $r6;
        boolean $z0;
        cck.elf.ELFSectionHeaderTable $r7;
        cck.elf.ELFStringTable $r8;
        long tid_read;
        java.lang.Thread thread_read;

        this := @this: avrora.syntax.elf.ELFParser;
        args := @parameter0: java.lang.String[];
        thread_read = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_read = virtualinvoke thread_read.<java.lang.Thread: long getId()>();
        $i0 = lengthof args;
        if $i0 != 0 goto label0;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("no input files");

     label0:
        $i0 = lengthof args;
        if $i0 == 1 goto label1;

        staticinvoke <cck.util.Util: void userError(java.lang.String)>("input type \"elf\" accepts only one file at a time.");

     label1:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(args, 18, tid_read, "avrora.syntax.elf.ELFParser", 73, 0, fname);
        fname = args[0];
        staticinvoke <avrora.Main: void checkFileExists(java.lang.String)>(fname);
        $r0 = new java.io.RandomAccessFile;
        specialinvoke $r0.<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)>(fname, "r");
        fis = $r0;

     label2:
        $r1 = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFHeader readELFHeader(java.io.RandomAccessFile)>(fis);
        this.<avrora.syntax.elf.ELFParser: cck.elf.ELFHeader header> = $r1;

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;
        e = $r2;
        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>(fname, "invalid ELF header");

     label5:
        $r3 = virtualinvoke this.<avrora.syntax.elf.ELFParser: avrora.arch.AbstractArchitecture getArchitecture()>();
        this.<avrora.syntax.elf.ELFParser: avrora.arch.AbstractArchitecture arch> = $r3;
        $r4 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFHeader header>;
        $r5 = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFProgramHeaderTable readPHT(java.io.RandomAccessFile,cck.elf.ELFHeader)>(fis, $r4);
        this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht> = $r5;
        $r6 = this.<avrora.syntax.elf.ELFParser: cck.util.Option$Bool SYMBOLS>;
        $z0 = virtualinvoke $r6.<cck.util.Option$Bool: boolean get()>();
        if $z0 == 0 goto label6;

        $r4 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFHeader header>;
        $r7 = staticinvoke <cck.elf.ELFLoader: cck.elf.ELFSectionHeaderTable readSHT(java.io.RandomAccessFile,cck.elf.ELFHeader)>(fis, $r4);
        this.<avrora.syntax.elf.ELFParser: cck.elf.ELFSectionHeaderTable sht> = $r7;
        $r7 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFSectionHeaderTable sht>;
        $r8 = virtualinvoke $r7.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable getStringTable()>();
        this.<avrora.syntax.elf.ELFParser: cck.elf.ELFStringTable shstrtab> = $r8;

     label6:
        p = specialinvoke this.<avrora.syntax.elf.ELFParser: avrora.core.Program loadSections(java.io.RandomAccessFile)>(fis);
        specialinvoke this.<avrora.syntax.elf.ELFParser: void loadSymbolTables(avrora.core.Program,java.io.RandomAccessFile)>(p, fis);
        return p;

        catch cck.elf.ELFHeader$FormatError from label2 to label3 with label4;
    }

    private void loadSymbolTables(avrora.core.Program, java.io.RandomAccessFile) throws java.io.IOException
    {
        avrora.syntax.elf.ELFParser this;
        avrora.core.Program p;
        java.io.RandomAccessFile fis;
        avrora.core.SourceMapping $r0, map;
        java.util.Iterator i;
        cck.elf.ELFSymbolTable stab;
        cck.util.Option$Bool $r1;
        boolean $z0;
        cck.elf.ELFHeader $r2;
        cck.elf.ELFSectionHeaderTable $r3;
        java.util.List $r4, $r5;
        java.lang.Object $r6;
        cck.elf.ELFStringTable $r7;

        this := @this: avrora.syntax.elf.ELFParser;
        p := @parameter0: avrora.core.Program;
        fis := @parameter1: java.io.RandomAccessFile;
        $r0 = new avrora.core.SourceMapping;
        specialinvoke $r0.<avrora.core.SourceMapping: void <init>(avrora.core.Program)>(p);
        map = $r0;
        virtualinvoke p.<avrora.core.Program: void setSourceMapping(avrora.core.SourceMapping)>(map);
        $r1 = this.<avrora.syntax.elf.ELFParser: cck.util.Option$Bool SYMBOLS>;
        $z0 = virtualinvoke $r1.<cck.util.Option$Bool: boolean get()>();
        if $z0 == 0 goto label1;

        $r2 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFHeader header>;
        $r3 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFSectionHeaderTable sht>;
        $r4 = staticinvoke <cck.elf.ELFLoader: java.util.List readSymbolTables(java.io.RandomAccessFile,cck.elf.ELFHeader,cck.elf.ELFSectionHeaderTable)>(fis, $r2, $r3);
        this.<avrora.syntax.elf.ELFParser: java.util.List symbolTables> = $r4;
        $r5 = this.<avrora.syntax.elf.ELFParser: java.util.List symbolTables>;
        i = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label0:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label1;

        $r6 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        stab = (cck.elf.ELFSymbolTable) $r6;
        $r7 = virtualinvoke stab.<cck.elf.ELFSymbolTable: cck.elf.ELFStringTable getStringTable()>();
        specialinvoke this.<avrora.syntax.elf.ELFParser: void addSymbols(avrora.core.SourceMapping,cck.elf.ELFSymbolTable,cck.elf.ELFStringTable)>(map, stab, $r7);
        goto label0;

     label1:
        return;
    }

    public avrora.arch.AbstractArchitecture getArchitecture()
    {
        avrora.syntax.elf.ELFParser this;
        java.lang.String specarch, filearch, $r2, $r5, $r6;
        avrora.arch.AbstractArchitecture farch, $r3;
        cck.util.Option$Str $r0;
        cck.elf.ELFHeader $r1;
        boolean $z0;
        java.lang.StringBuilder $r4;

        this := @this: avrora.syntax.elf.ELFParser;
        $r0 = this.<avrora.syntax.elf.ELFParser: cck.util.Option$Str ARCH>;
        specarch = virtualinvoke $r0.<cck.util.Option$Str: java.lang.String get()>();
        $r1 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFHeader header>;
        filearch = virtualinvoke $r1.<cck.elf.ELFHeader: java.lang.String getArchitecture()>();
        farch = staticinvoke <avrora.arch.ArchitectureRegistry: avrora.arch.AbstractArchitecture getArchitecture(java.lang.String)>(filearch);
        $r2 = "";
        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(specarch);
        if $z0 != 0 goto label0;

        $r3 = staticinvoke <avrora.arch.ArchitectureRegistry: avrora.arch.AbstractArchitecture getArchitecture(java.lang.String)>(specarch);
        if farch == $r3 goto label0;

        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected ");
        $r5 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(specarch);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" architecture, but header reports ");
        $r5 = staticinvoke <cck.text.StringUtil: java.lang.String quote(java.lang.Object)>(filearch);
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        staticinvoke <cck.util.Util: void userError(java.lang.String,java.lang.String)>("ELF Error", $r6);

     label0:
        return farch;
    }

    private avrora.core.Program loadSections(java.io.RandomAccessFile) throws java.io.IOException
    {
        avrora.syntax.elf.ELFParser this;
        java.io.RandomAccessFile fis;
        cck.elf.ELFDataInputStream $r0, is;
        avrora.core.Program p;
        int cntr, $i0, $i1, $i3;
        cck.elf.ELFProgramHeaderTable$Entry32 e;
        byte[] sect;
        cck.elf.ELFHeader $r1;
        cck.elf.ELFProgramHeaderTable $r2, $r4;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r3, $r5;
        boolean $z0;
        long $l2;

        this := @this: avrora.syntax.elf.ELFParser;
        fis := @parameter0: java.io.RandomAccessFile;
        $r0 = new cck.elf.ELFDataInputStream;
        $r1 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFHeader header>;
        specialinvoke $r0.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>($r1, fis);
        is = $r0;
        p = specialinvoke this.<avrora.syntax.elf.ELFParser: avrora.core.Program createProgram()>();
        cntr = 0;

     label0:
        $r2 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r3 = $r2.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r3;
        if cntr >= $i0 goto label2;

        $r4 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r5 = $r4.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        e = $r5[cntr];
        $z0 = virtualinvoke e.<cck.elf.ELFProgramHeaderTable$Entry32: boolean isLoadable()>();
        if $z0 == 0 goto label1;

        $i1 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz>;
        if $i1 <= 0 goto label1;

        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_offset>;
        $l2 = (long) $i0;
        virtualinvoke fis.<java.io.RandomAccessFile: void seek(long)>($l2);
        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_offset>;
        $i3 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz>;
        sect = virtualinvoke is.<cck.elf.ELFDataInputStream: byte[] read_section(int,int)>($i0, $i3);
        $i3 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;
        virtualinvoke p.<avrora.core.Program: void writeProgramBytes(byte[],int)>(sect, $i3);
        $z0 = virtualinvoke e.<cck.elf.ELFProgramHeaderTable$Entry32: boolean isExecutable()>();
        if $z0 == 0 goto label1;

        specialinvoke this.<avrora.syntax.elf.ELFParser: void disassembleSection(byte[],cck.elf.ELFProgramHeaderTable$Entry32,avrora.core.Program)>(sect, e, p);

     label1:
        cntr = cntr + 1;
        goto label0;

     label2:
        return p;
    }

    private avrora.core.Program createProgram()
    {
        avrora.syntax.elf.ELFParser this;
        int minp, maxp, cntr, start, end, $i0, $i1;
        cck.elf.ELFProgramHeaderTable$Entry32 e;
        cck.elf.ELFProgramHeaderTable $r0, $r2;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r1, $r3;
        boolean $z0;
        avrora.core.Program $r4;
        avrora.arch.AbstractArchitecture $r5;

        this := @this: avrora.syntax.elf.ELFParser;
        minp = 2147483647;
        maxp = 0;
        cntr = 0;

     label0:
        $r0 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r1 = $r0.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r1;
        if cntr >= $i0 goto label3;

        $r2 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r3 = $r2.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        e = $r3[cntr];
        $z0 = virtualinvoke e.<cck.elf.ELFProgramHeaderTable$Entry32: boolean isLoadable()>();
        if $z0 == 0 goto label2;

        $i1 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz>;
        if $i1 <= 0 goto label2;

        start = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;
        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_filesz>;
        end = start + $i0;
        if start >= minp goto label1;

        minp = start;

     label1:
        if end <= maxp goto label2;

        maxp = end;

     label2:
        cntr = cntr + 1;
        goto label0;

     label3:
        $r4 = new avrora.core.Program;
        $r5 = this.<avrora.syntax.elf.ELFParser: avrora.arch.AbstractArchitecture arch>;
        specialinvoke $r4.<avrora.core.Program: void <init>(avrora.arch.AbstractArchitecture,int,int)>($r5, minp, maxp);
        return $r4;
    }

    private void disassembleSection(byte[], cck.elf.ELFProgramHeaderTable$Entry32, avrora.core.Program)
    {
        avrora.syntax.elf.ELFParser this;
        byte[] sect;
        cck.elf.ELFProgramHeaderTable$Entry32 e;
        avrora.core.Program p;
        avrora.arch.AbstractDisassembler d;
        int off, $i0, $i1;
        avrora.arch.AbstractInstr i;
        avrora.arch.AbstractArchitecture $r0;

        this := @this: avrora.syntax.elf.ELFParser;
        sect := @parameter0: byte[];
        e := @parameter1: cck.elf.ELFProgramHeaderTable$Entry32;
        p := @parameter2: avrora.core.Program;
        $r0 = this.<avrora.syntax.elf.ELFParser: avrora.arch.AbstractArchitecture arch>;
        d = interfaceinvoke $r0.<avrora.arch.AbstractArchitecture: avrora.arch.AbstractDisassembler getDisassembler()>();
        off = 0;

     label0:
        $i0 = lengthof sect;
        if off >= $i0 goto label2;

        $i0 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;
        i = interfaceinvoke d.<avrora.arch.AbstractDisassembler: avrora.arch.AbstractInstr disassemble(int,int,byte[])>($i0, off, sect);
        if i == null goto label1;

        $i1 = e.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;
        $i1 = $i1 + off;
        virtualinvoke p.<avrora.core.Program: void writeInstr(avrora.arch.AbstractInstr,int)>(i, $i1);

     label1:
        off = off + 2;
        goto label0;

     label2:
        return;
    }

    private void addSymbols(avrora.core.SourceMapping, cck.elf.ELFSymbolTable, cck.elf.ELFStringTable)
    {
        avrora.syntax.elf.ELFParser this;
        avrora.core.SourceMapping map;
        cck.elf.ELFSymbolTable stab;
        cck.elf.ELFStringTable str;
        int cntr, $i0, $i2, $i3;
        cck.elf.ELFSymbolTable$Entry e;
        java.lang.String section, name;
        cck.elf.ELFSymbolTable$Entry[] $r0, $r1;
        boolean $z0;
        cck.elf.ELFSectionHeaderTable $r2;
        short $s1;

        this := @this: avrora.syntax.elf.ELFParser;
        map := @parameter0: avrora.core.SourceMapping;
        stab := @parameter1: cck.elf.ELFSymbolTable;
        str := @parameter2: cck.elf.ELFStringTable;
        cntr = 0;

     label0:
        $r0 = stab.<cck.elf.ELFSymbolTable: cck.elf.ELFSymbolTable$Entry[] entries>;
        $i0 = lengthof $r0;
        if cntr >= $i0 goto label3;

        $r1 = stab.<cck.elf.ELFSymbolTable: cck.elf.ELFSymbolTable$Entry[] entries>;
        e = $r1[cntr];
        $z0 = virtualinvoke e.<cck.elf.ELFSymbolTable$Entry: boolean isFunction()>();
        if $z0 != 0 goto label1;

        $z0 = virtualinvoke e.<cck.elf.ELFSymbolTable$Entry: boolean isObject()>();
        if $z0 == 0 goto label2;

     label1:
        $r2 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFSectionHeaderTable sht>;
        $s1 = e.<cck.elf.ELFSymbolTable$Entry: short st_shndx>;
        section = virtualinvoke $r2.<cck.elf.ELFSectionHeaderTable: java.lang.String getSectionName(int)>($s1);
        $i0 = e.<cck.elf.ELFSymbolTable$Entry: int st_name>;
        name = staticinvoke <avrora.actions.ELFDumpAction: java.lang.String getName(cck.elf.ELFStringTable,int)>(str, $i0);
        $i2 = e.<cck.elf.ELFSymbolTable$Entry: int st_value>;
        $i3 = specialinvoke this.<avrora.syntax.elf.ELFParser: int findLMA(cck.elf.ELFSymbolTable$Entry)>(e);
        virtualinvoke map.<avrora.core.SourceMapping: void newLocation(java.lang.String,java.lang.String,int,int)>(section, name, $i2, $i3);

     label2:
        cntr = cntr + 1;
        goto label0;

     label3:
        return;
    }

    private int findLMA(cck.elf.ELFSymbolTable$Entry)
    {
        avrora.syntax.elf.ELFParser this;
        cck.elf.ELFSymbolTable$Entry e;
        int vma_start, i, $i1, $i2;
        cck.elf.ELFSectionHeaderTable $r0;
        cck.elf.ELFSectionHeaderTable$Entry32[] $r1;
        short $s0;
        cck.elf.ELFSectionHeaderTable$Entry32 $r2;
        cck.elf.ELFProgramHeaderTable $r3, $r5;
        cck.elf.ELFProgramHeaderTable$Entry32[] $r4, $r6;
        cck.elf.ELFProgramHeaderTable$Entry32 $r7, $r8;

        this := @this: avrora.syntax.elf.ELFParser;
        e := @parameter0: cck.elf.ELFSymbolTable$Entry;
        $r0 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFSectionHeaderTable sht>;
        $r1 = $r0.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        $s0 = e.<cck.elf.ELFSymbolTable$Entry: short st_shndx>;
        $r2 = $r1[$s0];
        vma_start = $r2.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addr>;
        i = 0;

     label0:
        $r3 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r4 = $r3.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $i1 = lengthof $r4;
        if i >= $i1 goto label2;

        $r5 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r6 = $r5.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $r7 = $r6[i];
        $i2 = $r7.<cck.elf.ELFProgramHeaderTable$Entry32: int p_vaddr>;
        if $i2 != vma_start goto label1;

        $i2 = e.<cck.elf.ELFSymbolTable$Entry: int st_value>;
        $i2 = $i2 - vma_start;
        $r3 = this.<avrora.syntax.elf.ELFParser: cck.elf.ELFProgramHeaderTable pht>;
        $r4 = $r3.<cck.elf.ELFProgramHeaderTable: cck.elf.ELFProgramHeaderTable$Entry32[] entries>;
        $r8 = $r4[i];
        $i1 = $r8.<cck.elf.ELFProgramHeaderTable$Entry32: int p_paddr>;
        $i2 = $i2 + $i1;
        return $i2;

     label1:
        i = i + 1;
        goto label0;

     label2:
        return 0;
    }
}
