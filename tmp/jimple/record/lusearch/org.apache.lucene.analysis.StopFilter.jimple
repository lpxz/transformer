public final class org.apache.lucene.analysis.StopFilter extends org.apache.lucene.analysis.TokenFilter
{
    private static boolean ENABLE_POSITION_INCREMENTS_DEFAULT;
    private final org.apache.lucene.analysis.CharArraySet stopWords;
    private boolean enablePositionIncrements;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$lucene$analysis$StopFilter;

    public void <init>(org.apache.lucene.analysis.TokenStream, java.lang.String[])
    {
        org.apache.lucene.analysis.StopFilter this;
        org.apache.lucene.analysis.TokenStream input;
        java.lang.String[] stopWords;

        this := @this: org.apache.lucene.analysis.StopFilter;
        input := @parameter0: org.apache.lucene.analysis.TokenStream;
        stopWords := @parameter1: java.lang.String[];
        specialinvoke this.<org.apache.lucene.analysis.StopFilter: void <init>(org.apache.lucene.analysis.TokenStream,java.lang.String[],boolean)>(input, stopWords, 0);
        return;
    }

    public void <init>(org.apache.lucene.analysis.TokenStream, java.lang.String[], boolean)
    {
        org.apache.lucene.analysis.StopFilter this;
        org.apache.lucene.analysis.TokenStream in;
        java.lang.String[] stopWords;
        boolean ignoreCase, $z0;
        java.util.Set $r0;
        org.apache.lucene.analysis.CharArraySet $r1;

        this := @this: org.apache.lucene.analysis.StopFilter;
        in := @parameter0: org.apache.lucene.analysis.TokenStream;
        stopWords := @parameter1: java.lang.String[];
        ignoreCase := @parameter2: boolean;
        specialinvoke this.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(in);
        $z0 = <org.apache.lucene.analysis.StopFilter: boolean ENABLE_POSITION_INCREMENTS_DEFAULT>;
        this.<org.apache.lucene.analysis.StopFilter: boolean enablePositionIncrements> = $z0;
        $r0 = staticinvoke <org.apache.lucene.analysis.StopFilter: java.util.Set makeStopSet(java.lang.String[],boolean)>(stopWords, ignoreCase);
        $r1 = (org.apache.lucene.analysis.CharArraySet) $r0;
        this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.CharArraySet stopWords> = $r1;
        return;
    }

    public void <init>(org.apache.lucene.analysis.TokenStream, java.util.Set, boolean)
    {
        org.apache.lucene.analysis.StopFilter this;
        org.apache.lucene.analysis.TokenStream input;
        java.util.Set stopWords;
        boolean ignoreCase, $z0, $z1;
        org.apache.lucene.analysis.CharArraySet $r0, $r1;
        int $i0;

        this := @this: org.apache.lucene.analysis.StopFilter;
        input := @parameter0: org.apache.lucene.analysis.TokenStream;
        stopWords := @parameter1: java.util.Set;
        ignoreCase := @parameter2: boolean;
        specialinvoke this.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(input);
        $z0 = <org.apache.lucene.analysis.StopFilter: boolean ENABLE_POSITION_INCREMENTS_DEFAULT>;
        this.<org.apache.lucene.analysis.StopFilter: boolean enablePositionIncrements> = $z0;
        $z1 = stopWords instanceof org.apache.lucene.analysis.CharArraySet;
        if $z1 == 0 goto label0;

        $r0 = (org.apache.lucene.analysis.CharArraySet) stopWords;
        this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.CharArraySet stopWords> = $r0;
        goto label1;

     label0:
        $r0 = new org.apache.lucene.analysis.CharArraySet;
        $i0 = interfaceinvoke stopWords.<java.util.Set: int size()>();
        specialinvoke $r0.<org.apache.lucene.analysis.CharArraySet: void <init>(int,boolean)>($i0, ignoreCase);
        this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.CharArraySet stopWords> = $r0;
        $r1 = this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.CharArraySet stopWords>;
        virtualinvoke $r1.<org.apache.lucene.analysis.CharArraySet: boolean addAll(java.util.Collection)>(stopWords);

     label1:
        return;
    }

    public void <init>(org.apache.lucene.analysis.TokenStream, java.util.Set)
    {
        org.apache.lucene.analysis.StopFilter this;
        org.apache.lucene.analysis.TokenStream in;
        java.util.Set stopWords;

        this := @this: org.apache.lucene.analysis.StopFilter;
        in := @parameter0: org.apache.lucene.analysis.TokenStream;
        stopWords := @parameter1: java.util.Set;
        specialinvoke this.<org.apache.lucene.analysis.StopFilter: void <init>(org.apache.lucene.analysis.TokenStream,java.util.Set,boolean)>(in, stopWords, 0);
        return;
    }

    public static final java.util.Set makeStopSet(java.lang.String[])
    {
        java.lang.String[] stopWords;
        java.util.Set $r0;

        stopWords := @parameter0: java.lang.String[];
        $r0 = staticinvoke <org.apache.lucene.analysis.StopFilter: java.util.Set makeStopSet(java.lang.String[],boolean)>(stopWords, 0);
        return $r0;
    }

    public static final java.util.Set makeStopSet(java.lang.String[], boolean)
    {
        java.lang.String[] stopWords;
        boolean ignoreCase;
        org.apache.lucene.analysis.CharArraySet $r0, stopSet;
        int $i0;
        java.util.List $r1;

        stopWords := @parameter0: java.lang.String[];
        ignoreCase := @parameter1: boolean;
        $r0 = new org.apache.lucene.analysis.CharArraySet;
        $i0 = lengthof stopWords;
        specialinvoke $r0.<org.apache.lucene.analysis.CharArraySet: void <init>(int,boolean)>($i0, ignoreCase);
        stopSet = $r0;
        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(stopWords);
        virtualinvoke stopSet.<org.apache.lucene.analysis.CharArraySet: boolean addAll(java.util.Collection)>($r1);
        return stopSet;
    }

    public final org.apache.lucene.analysis.Token next(org.apache.lucene.analysis.Token) throws java.io.IOException
    {
        org.apache.lucene.analysis.StopFilter this;
        org.apache.lucene.analysis.Token reusableToken, nextToken;
        boolean $z0;
        int skippedPositions, $i0, $i1;
        java.lang.AssertionError $r0;
        org.apache.lucene.analysis.TokenStream $r1;
        org.apache.lucene.analysis.CharArraySet $r2;
        char[] $r3;

        this := @this: org.apache.lucene.analysis.StopFilter;
        reusableToken := @parameter0: org.apache.lucene.analysis.Token;
        $z0 = <org.apache.lucene.analysis.StopFilter: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if reusableToken != null goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        skippedPositions = 0;
        $r1 = this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.TokenStream input>;
        nextToken = virtualinvoke $r1.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.analysis.Token next(org.apache.lucene.analysis.Token)>(reusableToken);

     label1:
        if nextToken == null goto label4;

        $r2 = this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.CharArraySet stopWords>;
        $r3 = virtualinvoke nextToken.<org.apache.lucene.analysis.Token: char[] termBuffer()>();
        $i0 = virtualinvoke nextToken.<org.apache.lucene.analysis.Token: int termLength()>();
        $z0 = virtualinvoke $r2.<org.apache.lucene.analysis.CharArraySet: boolean contains(char[],int,int)>($r3, 0, $i0);
        if $z0 != 0 goto label3;

        $z0 = this.<org.apache.lucene.analysis.StopFilter: boolean enablePositionIncrements>;
        if $z0 == 0 goto label2;

        $i1 = virtualinvoke nextToken.<org.apache.lucene.analysis.Token: int getPositionIncrement()>();
        $i1 = $i1 + skippedPositions;
        virtualinvoke nextToken.<org.apache.lucene.analysis.Token: void setPositionIncrement(int)>($i1);

     label2:
        return nextToken;

     label3:
        $i1 = virtualinvoke nextToken.<org.apache.lucene.analysis.Token: int getPositionIncrement()>();
        skippedPositions = skippedPositions + $i1;
        $r1 = this.<org.apache.lucene.analysis.StopFilter: org.apache.lucene.analysis.TokenStream input>;
        nextToken = virtualinvoke $r1.<org.apache.lucene.analysis.TokenStream: org.apache.lucene.analysis.Token next(org.apache.lucene.analysis.Token)>(reusableToken);
        goto label1;

     label4:
        return null;
    }

    public static boolean getEnablePositionIncrementsDefault()
    {
        boolean $z0;
        long tid_getEnablePositionIncrementsDefault;
        java.lang.Thread thread_getEnablePositionIncrementsDefault;

        thread_getEnablePositionIncrementsDefault = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getEnablePositionIncrementsDefault = virtualinvoke thread_getEnablePositionIncrementsDefault.<java.lang.Thread: long getId()>();
        nop;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeStatic(int,long,java.lang.String,int,boolean)>(139, tid_getEnablePositionIncrementsDefault, "org.apache.lucene.analysisorg.apache.lucene.analysis.StopFilter", 137, $z0);
        $z0 = <org.apache.lucene.analysis.StopFilter: boolean ENABLE_POSITION_INCREMENTS_DEFAULT>;
        return $z0;
    }

    public static void setEnablePositionIncrementsDefault(boolean)
    {
        boolean defaultValue;
        long tid_setEnablePositionIncrementsDefault;
        java.lang.Thread thread_setEnablePositionIncrementsDefault;

        defaultValue := @parameter0: boolean;
        thread_setEnablePositionIncrementsDefault = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setEnablePositionIncrementsDefault = virtualinvoke thread_setEnablePositionIncrementsDefault.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,boolean)>(139, tid_setEnablePositionIncrementsDefault, "org.apache.lucene.analysisorg.apache.lucene.analysis.StopFilter", 152, defaultValue);
        <org.apache.lucene.analysis.StopFilter: boolean ENABLE_POSITION_INCREMENTS_DEFAULT> = defaultValue;
        return;
    }

    public boolean getEnablePositionIncrements()
    {
        org.apache.lucene.analysis.StopFilter this;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.StopFilter;
        $z0 = this.<org.apache.lucene.analysis.StopFilter: boolean enablePositionIncrements>;
        return $z0;
    }

    public void setEnablePositionIncrements(boolean)
    {
        org.apache.lucene.analysis.StopFilter this;
        boolean enable;

        this := @this: org.apache.lucene.analysis.StopFilter;
        enable := @parameter0: boolean;
        this.<org.apache.lucene.analysis.StopFilter: boolean enablePositionIncrements> = enable;
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException x1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        x1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(x1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = <org.apache.lucene.analysis.StopFilter: java.lang.Class class$org$apache$lucene$analysis$StopFilter>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.lucene.analysis.StopFilter: java.lang.Class class$(java.lang.String)>("org.apache.lucene.analysis.StopFilter");
        <org.apache.lucene.analysis.StopFilter: java.lang.Class class$org$apache$lucene$analysis$StopFilter> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.lucene.analysis.StopFilter: java.lang.Class class$org$apache$lucene$analysis$StopFilter>;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        <org.apache.lucene.analysis.StopFilter: boolean $assertionsDisabled> = $z0;
        <org.apache.lucene.analysis.StopFilter: boolean ENABLE_POSITION_INCREMENTS_DEFAULT> = 0;
        return;
    }
}
