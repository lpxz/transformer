class org.apache.lucene.index.ReadOnlySegmentReader extends org.apache.lucene.index.SegmentReader
{

    void <init>()
    {
        org.apache.lucene.index.ReadOnlySegmentReader this;

        this := @this: org.apache.lucene.index.ReadOnlySegmentReader;
        specialinvoke this.<org.apache.lucene.index.SegmentReader: void <init>()>();
        return;
    }

    static void noWrite()
    {
        java.lang.UnsupportedOperationException $r0;

        nop;
        $r0 = new java.lang.UnsupportedOperationException;
        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This IndexReader cannot make any changes to the index (it was opened with readOnly = true)");
        throw $r0;
    }

    protected void acquireWriteLock()
    {
        org.apache.lucene.index.ReadOnlySegmentReader this;

        this := @this: org.apache.lucene.index.ReadOnlySegmentReader;
        staticinvoke <org.apache.lucene.index.ReadOnlySegmentReader: void noWrite()>();
        return;
    }

    public boolean isDeleted(int)
    {
        org.apache.lucene.index.ReadOnlySegmentReader this;
        int n;
        org.apache.lucene.util.BitVector $r0;
        boolean $z0;

        this := @this: org.apache.lucene.index.ReadOnlySegmentReader;
        n := @parameter0: int;
        $r0 = this.<org.apache.lucene.index.ReadOnlySegmentReader: org.apache.lucene.util.BitVector deletedDocs>;
        if $r0 == null goto label0;

        $r0 = this.<org.apache.lucene.index.ReadOnlySegmentReader: org.apache.lucene.util.BitVector deletedDocs>;
        $z0 = virtualinvoke $r0.<org.apache.lucene.util.BitVector: boolean get(int)>(n);
        if $z0 == 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }
}
