public class org.apache.lucene.util.CloseableThreadLocal extends java.lang.Object
{
    private java.lang.ThreadLocal t;
    private java.util.Map hardRefs;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$lucene$util$CloseableThreadLocal;

    public void <init>()
    {
        org.apache.lucene.util.CloseableThreadLocal this;
        java.lang.ThreadLocal $r0;
        java.util.HashMap $r1;

        this := @this: org.apache.lucene.util.CloseableThreadLocal;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $r0 = new java.lang.ThreadLocal;
        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();
        this.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t> = $r0;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        this.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs> = $r1;
        return;
    }

    protected java.lang.Object initialValue()
    {
        org.apache.lucene.util.CloseableThreadLocal this;

        this := @this: org.apache.lucene.util.CloseableThreadLocal;
        return null;
    }

    public java.lang.Object get()
    {
        org.apache.lucene.util.CloseableThreadLocal this;
        java.lang.ref.WeakReference weakRef;
        java.lang.Object iv, v, $r1;
        java.lang.ThreadLocal $r0;
        boolean $z0;
        java.lang.AssertionError $r2;

        this := @this: org.apache.lucene.util.CloseableThreadLocal;
        $r0 = this.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t>;
        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();
        weakRef = (java.lang.ref.WeakReference) $r1;
        if weakRef != null goto label1;

        iv = virtualinvoke this.<org.apache.lucene.util.CloseableThreadLocal: java.lang.Object initialValue()>();
        if iv == null goto label0;

        virtualinvoke this.<org.apache.lucene.util.CloseableThreadLocal: void set(java.lang.Object)>(iv);
        return iv;

     label0:
        return null;

     label1:
        v = virtualinvoke weakRef.<java.lang.ref.WeakReference: java.lang.Object get()>();
        $z0 = <org.apache.lucene.util.CloseableThreadLocal: boolean $assertionsDisabled>;
        if $z0 != 0 goto label2;

        if v != null goto label2;

        $r2 = new java.lang.AssertionError;
        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();
        throw $r2;

     label2:
        return v;
    }

    public void set(java.lang.Object)
    {
        org.apache.lucene.util.CloseableThreadLocal this;
        java.lang.Object object, $r4;
        java.lang.ref.WeakReference $r0;
        java.util.Map l2, $r2;
        java.util.Iterator it;
        java.lang.Thread t, $r3, thread_set;
        java.lang.Throwable l5, $r6;
        java.lang.ThreadLocal $r1;
        java.util.Set $r5;
        boolean $z0;
        long tid_set;

        this := @this: org.apache.lucene.util.CloseableThreadLocal;
        object := @parameter0: java.lang.Object;
        thread_set = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_set = virtualinvoke thread_set.<java.lang.Thread: long getId()>();
        $r1 = this.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t>;
        $r0 = new java.lang.ref.WeakReference;
        specialinvoke $r0.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(object);
        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r0);
        $r2 = this.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;
        l2 = $r2;
        entermonitor $r2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>($r2, 2, tid_set);

     label0:
        $r2 = this.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, object);
        $r2 = this.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs>;
        $r5 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();
        it = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();
        t = (java.lang.Thread) $r4;
        $z0 = virtualinvoke t.<java.lang.Thread: boolean isAlive()>();
        if $z0 != 0 goto label2;

        interfaceinvoke it.<java.util.Iterator: void remove()>();

     label2:
        goto label1;

     label3:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(l2, 2, tid_set);
        exitmonitor l2;

     label4:
        goto label8;

     label5:
        $r6 := @caughtexception;

     label6:
        l5 = $r6;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(l2, 2, tid_set);
        exitmonitor l2;

     label7:
        throw l5;

     label8:
        return;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void close()
    {
        org.apache.lucene.util.CloseableThreadLocal this;

        this := @this: org.apache.lucene.util.CloseableThreadLocal;
        this.<org.apache.lucene.util.CloseableThreadLocal: java.util.Map hardRefs> = null;
        this.<org.apache.lucene.util.CloseableThreadLocal: java.lang.ThreadLocal t> = null;
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException x1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        x1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(x1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = <org.apache.lucene.util.CloseableThreadLocal: java.lang.Class class$org$apache$lucene$util$CloseableThreadLocal>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.lucene.util.CloseableThreadLocal: java.lang.Class class$(java.lang.String)>("org.apache.lucene.util.CloseableThreadLocal");
        <org.apache.lucene.util.CloseableThreadLocal: java.lang.Class class$org$apache$lucene$util$CloseableThreadLocal> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.lucene.util.CloseableThreadLocal: java.lang.Class class$org$apache$lucene$util$CloseableThreadLocal>;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        <org.apache.lucene.util.CloseableThreadLocal: boolean $assertionsDisabled> = $z0;
        return;
    }
}
