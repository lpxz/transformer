class org.apache.lucene.index.SegmentReader$Norm extends java.lang.Object
{
    volatile int refCount;
    boolean useSingleNormStream;
    private org.apache.lucene.store.IndexInput in;
    private byte[] bytes;
    private boolean dirty;
    private int number;
    private long normSeek;
    private boolean rollbackDirty;
    static final boolean $assertionsDisabled;
    private final org.apache.lucene.index.SegmentReader this$0;

    public void incRef()
    {
        org.apache.lucene.index.SegmentReader$Norm this;
        boolean $z0;
        int $i0, $i1;
        java.lang.AssertionError $r0;
        java.lang.Object localthislockincRef;
        java.lang.Throwable throwableLocal39;
        long tid_incRef;
        java.lang.Thread thread_incRef;

        this := @this: org.apache.lucene.index.SegmentReader$Norm;
        thread_incRef = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_incRef = virtualinvoke thread_incRef.<java.lang.Thread: long getId()>();
        localthislockincRef = this;

     label0:
        entermonitor localthislockincRef;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockincRef, 0, tid_incRef);
        $z0 = <org.apache.lucene.index.SegmentReader$Norm: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $i0 = this.<org.apache.lucene.index.SegmentReader$Norm: int refCount>;
        if $i0 > 0 goto label1;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label1:
        $i1 = this.<org.apache.lucene.index.SegmentReader$Norm: int refCount>;
        $i1 = $i1 + 1;
        this.<org.apache.lucene.index.SegmentReader$Norm: int refCount> = $i1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockincRef, 0, tid_incRef);
        exitmonitor localthislockincRef;
        goto label2;

     label2:
        return;

     label3:
        throwableLocal39 := @caughtexception;

     label4:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockincRef, 0, tid_incRef);
        exitmonitor localthislockincRef;

     label5:
        throw throwableLocal39;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void decRef() throws java.io.IOException
    {
        org.apache.lucene.index.SegmentReader$Norm this;
        boolean $z0;
        int $i0, $i1;
        java.lang.AssertionError $r0;
        java.lang.Object localthislockdecRef;
        java.lang.Throwable throwableLocal40;
        long tid_decRef;
        java.lang.Thread thread_decRef;

        this := @this: org.apache.lucene.index.SegmentReader$Norm;
        thread_decRef = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_decRef = virtualinvoke thread_decRef.<java.lang.Thread: long getId()>();
        localthislockdecRef = this;

     label0:
        entermonitor localthislockdecRef;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockdecRef, 0, tid_decRef);
        $z0 = <org.apache.lucene.index.SegmentReader$Norm: boolean $assertionsDisabled>;
        if $z0 != 0 goto label1;

        $i0 = this.<org.apache.lucene.index.SegmentReader$Norm: int refCount>;
        if $i0 > 0 goto label1;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label1:
        $i0 = this.<org.apache.lucene.index.SegmentReader$Norm: int refCount>;
        if $i0 != 1 goto label2;

        specialinvoke this.<org.apache.lucene.index.SegmentReader$Norm: void close()>();

     label2:
        $i1 = this.<org.apache.lucene.index.SegmentReader$Norm: int refCount>;
        $i1 = $i1 - 1;
        this.<org.apache.lucene.index.SegmentReader$Norm: int refCount> = $i1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdecRef, 0, tid_decRef);
        exitmonitor localthislockdecRef;
        goto label3;

     label3:
        return;

     label4:
        throwableLocal40 := @caughtexception;

     label5:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdecRef, 0, tid_decRef);
        exitmonitor localthislockdecRef;

     label6:
        throw throwableLocal40;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void <init>(org.apache.lucene.index.SegmentReader, org.apache.lucene.store.IndexInput, boolean, int, long)
    {
        org.apache.lucene.index.SegmentReader$Norm this;
        org.apache.lucene.index.SegmentReader l1;
        org.apache.lucene.store.IndexInput in;
        boolean useSingleNormStream;
        int number;
        long normSeek;

        this := @this: org.apache.lucene.index.SegmentReader$Norm;
        l1 := @parameter0: org.apache.lucene.index.SegmentReader;
        in := @parameter1: org.apache.lucene.store.IndexInput;
        useSingleNormStream := @parameter2: boolean;
        number := @parameter3: int;
        normSeek := @parameter4: long;
        this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.index.SegmentReader this$0> = l1;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<org.apache.lucene.index.SegmentReader$Norm: int refCount> = 1;
        this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.store.IndexInput in> = in;
        this.<org.apache.lucene.index.SegmentReader$Norm: int number> = number;
        this.<org.apache.lucene.index.SegmentReader$Norm: long normSeek> = normSeek;
        this.<org.apache.lucene.index.SegmentReader$Norm: boolean useSingleNormStream> = useSingleNormStream;
        return;
    }

    private void reWrite(org.apache.lucene.index.SegmentInfo) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentReader$Norm this;
        org.apache.lucene.index.SegmentInfo si;
        org.apache.lucene.store.IndexOutput out;
        java.lang.Throwable l3, $r5;
        int $i0, $i1;
        org.apache.lucene.index.SegmentReader $r0, $r4;
        org.apache.lucene.store.Directory $r1;
        java.lang.String $r2;
        byte[] $r3;

        this := @this: org.apache.lucene.index.SegmentReader$Norm;
        si := @parameter0: org.apache.lucene.index.SegmentInfo;
        $i0 = this.<org.apache.lucene.index.SegmentReader$Norm: int number>;
        virtualinvoke si.<org.apache.lucene.index.SegmentInfo: void advanceNormGen(int)>($i0);
        $r0 = this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.index.SegmentReader this$0>;
        $r1 = virtualinvoke $r0.<org.apache.lucene.index.SegmentReader: org.apache.lucene.store.Directory directory()>();
        $i1 = this.<org.apache.lucene.index.SegmentReader$Norm: int number>;
        $r2 = virtualinvoke si.<org.apache.lucene.index.SegmentInfo: java.lang.String getNormFileName(int)>($i1);
        out = virtualinvoke $r1.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>($r2);

     label0:
        $r3 = this.<org.apache.lucene.index.SegmentReader$Norm: byte[] bytes>;
        $r4 = this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.index.SegmentReader this$0>;
        $i1 = virtualinvoke $r4.<org.apache.lucene.index.SegmentReader: int maxDoc()>();
        virtualinvoke out.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int)>($r3, $i1);
        goto label6;

     label1:
        goto label5;

     label2:
        $r5 := @caughtexception;

     label3:
        l3 = $r5;
        goto label7;

     label4:
        throw l3;

     label5:
        this.<org.apache.lucene.index.SegmentReader$Norm: boolean dirty> = 0;
        return;

     label6:
        virtualinvoke out.<org.apache.lucene.store.IndexOutput: void close()>();
        goto label1;

     label7:
        virtualinvoke out.<org.apache.lucene.store.IndexOutput: void close()>();
        goto label4;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    private void close() throws java.io.IOException
    {
        org.apache.lucene.index.SegmentReader$Norm this;
        org.apache.lucene.store.IndexInput $r0;
        boolean $z0;
        java.lang.Object localthislockclose;
        java.lang.Throwable throwableLocal41;
        long tid_close;
        java.lang.Thread thread_close;

        this := @this: org.apache.lucene.index.SegmentReader$Norm;
        thread_close = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_close = virtualinvoke thread_close.<java.lang.Thread: long getId()>();
        localthislockclose = this;

     label0:
        entermonitor localthislockclose;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockclose, 0, tid_close);
        $r0 = this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.store.IndexInput in>;
        if $r0 == null goto label1;

        $z0 = this.<org.apache.lucene.index.SegmentReader$Norm: boolean useSingleNormStream>;
        if $z0 != 0 goto label1;

        $r0 = this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.store.IndexInput in>;
        virtualinvoke $r0.<org.apache.lucene.store.IndexInput: void close()>();

     label1:
        this.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.store.IndexInput in> = null;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockclose, 0, tid_close);
        exitmonitor localthislockclose;
        goto label2;

     label2:
        return;

     label3:
        throwableLocal41 := @caughtexception;

     label4:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockclose, 0, tid_close);
        exitmonitor localthislockclose;

     label5:
        throw throwableLocal41;

        catch java.lang.Throwable from label0 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static boolean access$000(org.apache.lucene.index.SegmentReader$Norm)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        boolean $z0;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        $z0 = x0.<org.apache.lucene.index.SegmentReader$Norm: boolean dirty>;
        return $z0;
    }

    static void access$100(org.apache.lucene.index.SegmentReader$Norm, org.apache.lucene.index.SegmentInfo) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        org.apache.lucene.index.SegmentInfo x1;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        x1 := @parameter1: org.apache.lucene.index.SegmentInfo;
        specialinvoke x0.<org.apache.lucene.index.SegmentReader$Norm: void reWrite(org.apache.lucene.index.SegmentInfo)>(x1);
        return;
    }

    static byte[] access$200(org.apache.lucene.index.SegmentReader$Norm)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        byte[] $r0;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        $r0 = x0.<org.apache.lucene.index.SegmentReader$Norm: byte[] bytes>;
        return $r0;
    }

    static byte[] access$202(org.apache.lucene.index.SegmentReader$Norm, byte[])
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        byte[] x1;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        x1 := @parameter1: byte[];
        x0.<org.apache.lucene.index.SegmentReader$Norm: byte[] bytes> = x1;
        return x1;
    }

    static void access$300(org.apache.lucene.index.SegmentReader$Norm) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentReader$Norm x0;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        specialinvoke x0.<org.apache.lucene.index.SegmentReader$Norm: void close()>();
        return;
    }

    static boolean access$002(org.apache.lucene.index.SegmentReader$Norm, boolean)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        boolean x1;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        x1 := @parameter1: boolean;
        x0.<org.apache.lucene.index.SegmentReader$Norm: boolean dirty> = x1;
        return x1;
    }

    static org.apache.lucene.store.IndexInput access$400(org.apache.lucene.index.SegmentReader$Norm)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        org.apache.lucene.store.IndexInput $r0;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        $r0 = x0.<org.apache.lucene.index.SegmentReader$Norm: org.apache.lucene.store.IndexInput in>;
        return $r0;
    }

    static long access$500(org.apache.lucene.index.SegmentReader$Norm)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        long $l0;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        $l0 = x0.<org.apache.lucene.index.SegmentReader$Norm: long normSeek>;
        return $l0;
    }

    static boolean access$602(org.apache.lucene.index.SegmentReader$Norm, boolean)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        boolean x1;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        x1 := @parameter1: boolean;
        x0.<org.apache.lucene.index.SegmentReader$Norm: boolean rollbackDirty> = x1;
        return x1;
    }

    static boolean access$600(org.apache.lucene.index.SegmentReader$Norm)
    {
        org.apache.lucene.index.SegmentReader$Norm x0;
        boolean $z0;

        x0 := @parameter0: org.apache.lucene.index.SegmentReader$Norm;
        $z0 = x0.<org.apache.lucene.index.SegmentReader$Norm: boolean rollbackDirty>;
        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = <org.apache.lucene.index.SegmentReader: java.lang.Class class$org$apache$lucene$index$SegmentReader>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.lucene.index.SegmentReader: java.lang.Class class$(java.lang.String)>("org.apache.lucene.index.SegmentReader");
        <org.apache.lucene.index.SegmentReader: java.lang.Class class$org$apache$lucene$index$SegmentReader> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.lucene.index.SegmentReader: java.lang.Class class$org$apache$lucene$index$SegmentReader>;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        <org.apache.lucene.index.SegmentReader$Norm: boolean $assertionsDisabled> = $z0;
        return;
    }
}
