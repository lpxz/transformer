public abstract class org.apache.lucene.analysis.CharTokenizer extends org.apache.lucene.analysis.Tokenizer
{
    private int offset;
    private int bufferIndex;
    private int dataLen;
    private static final int MAX_WORD_LEN;
    private static final int IO_BUFFER_SIZE;
    private final char[] ioBuffer;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$lucene$analysis$CharTokenizer;

    public void <init>(java.io.Reader)
    {
        org.apache.lucene.analysis.CharTokenizer this;
        java.io.Reader input;
        char[] $r0;

        this := @this: org.apache.lucene.analysis.CharTokenizer;
        input := @parameter0: java.io.Reader;
        specialinvoke this.<org.apache.lucene.analysis.Tokenizer: void <init>(java.io.Reader)>(input);
        this.<org.apache.lucene.analysis.CharTokenizer: int offset> = 0;
        this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex> = 0;
        this.<org.apache.lucene.analysis.CharTokenizer: int dataLen> = 0;
        $r0 = newarray (char)[4096];
        this.<org.apache.lucene.analysis.CharTokenizer: char[] ioBuffer> = $r0;
        return;
    }

    protected abstract boolean isTokenChar(char);

    protected char normalize(char)
    {
        org.apache.lucene.analysis.CharTokenizer this;
        char c;

        this := @this: org.apache.lucene.analysis.CharTokenizer;
        c := @parameter0: char;
        return c;
    }

    public final org.apache.lucene.analysis.Token next(org.apache.lucene.analysis.Token) throws java.io.IOException
    {
        org.apache.lucene.analysis.CharTokenizer this;
        org.apache.lucene.analysis.Token reusableToken;
        boolean $z0;
        int length, start, $i0, $i1, $i2, $i3, $i4;
        char[] buffer, $r3, $r4;
        char c, $c5;
        java.lang.AssertionError $r0;
        java.io.Reader $r2;
        long tid_next;
        java.lang.Thread thread_next;

        this := @this: org.apache.lucene.analysis.CharTokenizer;
        reusableToken := @parameter0: org.apache.lucene.analysis.Token;
        thread_next = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_next = virtualinvoke thread_next.<java.lang.Thread: long getId()>();
        $z0 = <org.apache.lucene.analysis.CharTokenizer: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        if reusableToken != null goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        virtualinvoke reusableToken.<org.apache.lucene.analysis.Token: void clear()>();
        length = 0;
        start = this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex>;
        buffer = virtualinvoke reusableToken.<org.apache.lucene.analysis.Token: char[] termBuffer()>();

     label1:
        $i1 = this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex>;
        $i2 = this.<org.apache.lucene.analysis.CharTokenizer: int dataLen>;
        if $i1 < $i2 goto label4;

        $i2 = this.<org.apache.lucene.analysis.CharTokenizer: int offset>;
        $i3 = this.<org.apache.lucene.analysis.CharTokenizer: int dataLen>;
        $i2 = $i2 + $i3;
        this.<org.apache.lucene.analysis.CharTokenizer: int offset> = $i2;
        $r2 = this.<org.apache.lucene.analysis.CharTokenizer: java.io.Reader input>;
        $r3 = this.<org.apache.lucene.analysis.CharTokenizer: char[] ioBuffer>;
        $i2 = virtualinvoke $r2.<java.io.Reader: int read(char[])>($r3);
        this.<org.apache.lucene.analysis.CharTokenizer: int dataLen> = $i2;
        $i1 = this.<org.apache.lucene.analysis.CharTokenizer: int dataLen>;
        if $i1 != -1 goto label3;

        if length <= 0 goto label2;

        goto label9;

     label2:
        return null;

     label3:
        this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex> = 0;

     label4:
        $r4 = this.<org.apache.lucene.analysis.CharTokenizer: char[] ioBuffer>;
        $i0 = this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex>;
        $i4 = $i0 + 1;
        this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex> = $i4;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>($r4, 25, tid_next, "org.apache.lucene.analysis.CharTokenizer", 67, $i0, c);
        c = $r4[$i0];
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharTokenizer: boolean isTokenChar(char)>(c);
        if $z0 == 0 goto label7;

        if length != 0 goto label5;

        $i1 = this.<org.apache.lucene.analysis.CharTokenizer: int offset>;
        $i2 = this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex>;
        $i1 = $i1 + $i2;
        start = $i1 - 1;
        goto label6;

     label5:
        $i2 = lengthof buffer;
        if length != $i2 goto label6;

        $i2 = 1 + length;
        buffer = virtualinvoke reusableToken.<org.apache.lucene.analysis.Token: char[] resizeTermBuffer(int)>($i2);

     label6:
        $i2 = length;
        length = length + 1;
        $c5 = virtualinvoke this.<org.apache.lucene.analysis.CharTokenizer: char normalize(char)>(c);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(buffer, 25, tid_next, "org.apache.lucene.analysis.CharTokenizer", 76, $i2, $c5);
        buffer[$i2] = $c5;
        if length != 255 goto label8;

        goto label9;

     label7:
        if length <= 0 goto label8;

        goto label9;

     label8:
        goto label1;

     label9:
        virtualinvoke reusableToken.<org.apache.lucene.analysis.Token: void setTermLength(int)>(length);
        virtualinvoke reusableToken.<org.apache.lucene.analysis.Token: void setStartOffset(int)>(start);
        $i2 = start + length;
        virtualinvoke reusableToken.<org.apache.lucene.analysis.Token: void setEndOffset(int)>($i2);
        return reusableToken;
    }

    public void reset(java.io.Reader) throws java.io.IOException
    {
        org.apache.lucene.analysis.CharTokenizer this;
        java.io.Reader input;

        this := @this: org.apache.lucene.analysis.CharTokenizer;
        input := @parameter0: java.io.Reader;
        specialinvoke this.<org.apache.lucene.analysis.Tokenizer: void reset(java.io.Reader)>(input);
        this.<org.apache.lucene.analysis.CharTokenizer: int bufferIndex> = 0;
        this.<org.apache.lucene.analysis.CharTokenizer: int offset> = 0;
        this.<org.apache.lucene.analysis.CharTokenizer: int dataLen> = 0;
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.String x0;
        java.lang.ClassNotFoundException x1, $r1;
        java.lang.Class $r0;
        java.lang.NoClassDefFoundError $r2;
        java.lang.Throwable $r3;

        x0 := @parameter0: java.lang.String;

     label0:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(x0);

     label1:
        return $r0;

     label2:
        $r1 := @caughtexception;
        x1 = $r1;
        $r2 = new java.lang.NoClassDefFoundError;
        specialinvoke $r2.<java.lang.NoClassDefFoundError: void <init>()>();
        $r3 = virtualinvoke $r2.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>(x1);
        throw $r3;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = <org.apache.lucene.analysis.CharTokenizer: java.lang.Class class$org$apache$lucene$analysis$CharTokenizer>;
        if $r0 != null goto label0;

        $r0 = staticinvoke <org.apache.lucene.analysis.CharTokenizer: java.lang.Class class$(java.lang.String)>("org.apache.lucene.analysis.CharTokenizer");
        <org.apache.lucene.analysis.CharTokenizer: java.lang.Class class$org$apache$lucene$analysis$CharTokenizer> = $r0;
        goto label1;

     label0:
        $r0 = <org.apache.lucene.analysis.CharTokenizer: java.lang.Class class$org$apache$lucene$analysis$CharTokenizer>;

     label1:
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label2;

        $z0 = 1;
        goto label3;

     label2:
        $z0 = 0;

     label3:
        <org.apache.lucene.analysis.CharTokenizer: boolean $assertionsDisabled> = $z0;
        return;
    }
}
