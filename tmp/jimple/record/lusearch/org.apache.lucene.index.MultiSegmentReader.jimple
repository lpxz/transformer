class org.apache.lucene.index.MultiSegmentReader extends org.apache.lucene.index.DirectoryIndexReader
{
    protected org.apache.lucene.index.SegmentReader[] subReaders;
    private int[] starts;
    private java.util.Map normsCache;
    private int maxDoc;
    private int numDocs;
    private boolean hasDeletions;
    private byte[] ones;

    void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos, boolean, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.store.Directory directory;
        org.apache.lucene.index.SegmentInfos sis;
        boolean closeDirectory, readOnly;
        org.apache.lucene.index.SegmentReader[] readers;
        int i, $i0, $i1;
        java.io.IOException e, ignore, $r3, $r5;
        java.util.HashMap $r0;
        org.apache.lucene.index.SegmentInfo $r1;
        org.apache.lucene.index.SegmentReader $r2, $r4;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        directory := @parameter0: org.apache.lucene.store.Directory;
        sis := @parameter1: org.apache.lucene.index.SegmentInfos;
        closeDirectory := @parameter2: boolean;
        readOnly := @parameter3: boolean;
        specialinvoke this.<org.apache.lucene.index.DirectoryIndexReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfos,boolean,boolean)>(directory, sis, closeDirectory, readOnly);
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache> = $r0;
        this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc> = 0;
        this.<org.apache.lucene.index.MultiSegmentReader: int numDocs> = -1;
        this.<org.apache.lucene.index.MultiSegmentReader: boolean hasDeletions> = 0;
        $i0 = virtualinvoke sis.<org.apache.lucene.index.SegmentInfos: int size()>();
        readers = newarray (org.apache.lucene.index.SegmentReader)[$i0];
        $i0 = virtualinvoke sis.<org.apache.lucene.index.SegmentInfos: int size()>();
        i = $i0 - 1;

     label0:
        if i < 0 goto label11;

     label1:
        $r1 = virtualinvoke sis.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfo info(int)>(i);
        $r2 = staticinvoke <org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo)>(readOnly, $r1);
        readers[i] = $r2;

     label2:
        goto label10;

     label3:
        $r3 := @caughtexception;
        e = $r3;
        i = i + 1;

     label4:
        $i1 = virtualinvoke sis.<org.apache.lucene.index.SegmentInfos: int size()>();
        if i >= $i1 goto label9;

     label5:
        $r4 = readers[i];
        virtualinvoke $r4.<org.apache.lucene.index.SegmentReader: void close()>();

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;
        ignore = $r5;

     label8:
        i = i + 1;
        goto label4;

     label9:
        throw e;

     label10:
        i = i + -1;
        goto label0;

     label11:
        specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: void initialize(org.apache.lucene.index.SegmentReader[])>(readers);
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label5 to label6 with label7;
    }

    void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos, boolean, org.apache.lucene.index.SegmentReader[], int[], java.util.Map, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.store.Directory directory;
        org.apache.lucene.index.SegmentInfos infos;
        boolean closeDirectory, readOnly, success, $z0, $z1;
        org.apache.lucene.index.SegmentReader[] oldReaders, newReaders, $r14, $r21;
        int[] oldStarts, $r18, $r19, $r20;
        java.util.Map oldNormsCache, $r15, $r16;
        java.util.HashMap segmentReaders, $r0, $r1;
        int i, $i0, $i1, $i2, $i3, $i4, $i5;
        boolean[] readerShared;
        java.lang.Integer oldReaderIndex, $r4;
        org.apache.lucene.index.SegmentReader newReader, $r2, $r7, $r8;
        java.lang.Throwable l15, ignore, $r10, $r22, $r23;
        java.util.Iterator it;
        java.util.Map$Entry entry;
        java.lang.String field, $r3;
        byte[] oldBytes, bytes, $r13;
        java.lang.Object $r5, $r17;
        org.apache.lucene.index.SegmentInfo $r6, $r9;
        java.io.IOException $r11;
        java.util.Set $r12;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        directory := @parameter0: org.apache.lucene.store.Directory;
        infos := @parameter1: org.apache.lucene.index.SegmentInfos;
        closeDirectory := @parameter2: boolean;
        oldReaders := @parameter3: org.apache.lucene.index.SegmentReader[];
        oldStarts := @parameter4: int[];
        oldNormsCache := @parameter5: java.util.Map;
        readOnly := @parameter6: boolean;
        specialinvoke this.<org.apache.lucene.index.DirectoryIndexReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfos,boolean,boolean)>(directory, infos, closeDirectory, readOnly);
        $r0 = new java.util.HashMap;
        specialinvoke $r0.<java.util.HashMap: void <init>()>();
        this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache> = $r0;
        this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc> = 0;
        this.<org.apache.lucene.index.MultiSegmentReader: int numDocs> = -1;
        this.<org.apache.lucene.index.MultiSegmentReader: boolean hasDeletions> = 0;
        $r1 = new java.util.HashMap;
        specialinvoke $r1.<java.util.HashMap: void <init>()>();
        segmentReaders = $r1;
        if oldReaders == null goto label1;

        i = 0;

     label0:
        $i0 = lengthof oldReaders;
        if i >= $i0 goto label1;

        $r2 = oldReaders[i];
        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: java.lang.String getSegmentName()>();
        $r4 = new java.lang.Integer;
        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i);
        interfaceinvoke segmentReaders.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);
        i = i + 1;
        goto label0;

     label1:
        $i1 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: int size()>();
        newReaders = newarray (org.apache.lucene.index.SegmentReader)[$i1];
        $i1 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: int size()>();
        readerShared = newarray (boolean)[$i1];
        $i1 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: int size()>();
        i = $i1 - 1;

     label2:
        if i < 0 goto label16;

        $r6 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfo info(int)>(i);
        $r3 = $r6.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;
        $r5 = interfaceinvoke segmentReaders.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);
        oldReaderIndex = (java.lang.Integer) $r5;
        if oldReaderIndex != null goto label3;

        newReaders[i] = null;
        goto label4;

     label3:
        $i2 = virtualinvoke oldReaderIndex.<java.lang.Integer: int intValue()>();
        $r7 = oldReaders[$i2];
        newReaders[i] = $r7;

     label4:
        success = 0;

     label5:
        $r8 = newReaders[i];
        if $r8 == null goto label6;

        $r9 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfo info(int)>(i);
        $z0 = virtualinvoke $r9.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();
        $r2 = newReaders[i];
        $r6 = virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfo getSegmentInfo()>();
        $z1 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();
        if $z0 == $z1 goto label7;

     label6:
        $r6 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfo info(int)>(i);
        newReader = staticinvoke <org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfo)>(readOnly, $r6);
        goto label8;

     label7:
        $r8 = newReaders[i];
        $r6 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfo info(int)>(i);
        newReader = virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader reopenSegment(org.apache.lucene.index.SegmentInfo)>($r6);

     label8:
        $r2 = newReaders[i];
        if newReader != $r2 goto label9;

        readerShared[i] = 1;
        virtualinvoke newReader.<org.apache.lucene.index.SegmentReader: void incRef()>();
        goto label10;

     label9:
        readerShared[i] = 0;
        newReaders[i] = newReader;

     label10:
        success = 1;
        goto label25;

     label11:
        goto label15;

     label12:
        $r10 := @caughtexception;

     label13:
        l15 = $r10;
        goto label33;

     label14:
        throw l15;

     label15:
        i = i + -1;
        goto label2;

     label16:
        specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: void initialize(org.apache.lucene.index.SegmentReader[])>(newReaders);
        if oldNormsCache == null goto label24;

        $r12 = interfaceinvoke oldNormsCache.<java.util.Map: java.util.Set entrySet()>();
        it = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label17:
        $z0 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label24;

        $r5 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>();
        entry = (java.util.Map$Entry) $r5;
        $r5 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getKey()>();
        field = (java.lang.String) $r5;
        $z0 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: boolean hasNorms(java.lang.String)>(field);
        if $z0 != 0 goto label18;

        goto label17;

     label18:
        $r5 = interfaceinvoke entry.<java.util.Map$Entry: java.lang.Object getValue()>();
        $r13 = (byte[]) $r5;
        oldBytes = (byte[]) $r13;
        $i1 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc()>();
        bytes = newarray (byte)[$i1];
        i = 0;

     label19:
        $r14 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r14;
        if i >= $i0 goto label23;

        $r14 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r14[i];
        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: java.lang.String getSegmentName()>();
        $r5 = interfaceinvoke segmentReaders.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);
        oldReaderIndex = (java.lang.Integer) $r5;
        if oldReaderIndex == null goto label21;

        $i0 = virtualinvoke oldReaderIndex.<java.lang.Integer: int intValue()>();
        $r8 = oldReaders[$i0];
        $r14 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r14[i];
        if $r8 == $r2 goto label20;

        $i0 = virtualinvoke oldReaderIndex.<java.lang.Integer: int intValue()>();
        $r8 = oldReaders[$i0];
        $r15 = $r8.<org.apache.lucene.index.SegmentReader: java.util.Map norms>;
        $r5 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(field);
        $r14 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r14[i];
        $r16 = $r2.<org.apache.lucene.index.SegmentReader: java.util.Map norms>;
        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(field);
        if $r5 != $r17 goto label21;

     label20:
        $i3 = virtualinvoke oldReaderIndex.<java.lang.Integer: int intValue()>();
        $i0 = oldStarts[$i3];
        $r18 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $i2 = $r18[i];
        $r19 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $i4 = i + 1;
        $i5 = $r19[$i4];
        $r20 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $i4 = $r20[i];
        $i5 = $i5 - $i4;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(oldBytes, $i0, bytes, $i2, $i5);
        goto label22;

     label21:
        $r21 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r8 = $r21[i];
        $r18 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $i2 = $r18[i];
        virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: void norms(java.lang.String,byte[],int)>(field, bytes, $i2);

     label22:
        i = i + 1;
        goto label19;

     label23:
        $r15 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(field, bytes);
        goto label17;

     label24:
        return;

     label25:
        if success != 0 goto label32;

        i = i + 1;

     label26:
        $i0 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: int size()>();
        if i >= $i0 goto label32;

        $r8 = newReaders[i];
        if $r8 == null goto label31;

     label27:
        $z0 = readerShared[i];
        if $z0 != 0 goto label28;

        $r8 = newReaders[i];
        virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: void close()>();
        goto label29;

     label28:
        $r8 = newReaders[i];
        virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label29:
        goto label31;

     label30:
        $r22 := @caughtexception;
        ignore = $r22;

     label31:
        i = i + 1;
        goto label26;

     label32:
        goto label11;

     label33:
        if success != 0 goto label40;

        i = i + 1;

     label34:
        $i0 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: int size()>();
        if i >= $i0 goto label40;

        $r8 = newReaders[i];
        if $r8 == null goto label39;

     label35:
        $z0 = readerShared[i];
        if $z0 != 0 goto label36;

        $r8 = newReaders[i];
        virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: void close()>();
        goto label37;

     label36:
        $r8 = newReaders[i];
        virtualinvoke $r8.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label37:
        goto label39;

     label38:
        $r23 := @caughtexception;
        ignore = $r23;

     label39:
        i = i + 1;
        goto label34;

     label40:
        goto label14;

        catch java.lang.Throwable from label5 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
        catch java.lang.Throwable from label27 to label29 with label30;
        catch java.lang.Throwable from label35 to label37 with label38;
    }

    private void initialize(org.apache.lucene.index.SegmentReader[])
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.SegmentReader[] subReaders;
        int i, $i0, $i1;
        int[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r3, $r4;
        boolean $z0;
        long tid_initialize;
        java.lang.Thread thread_initialize;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        subReaders := @parameter0: org.apache.lucene.index.SegmentReader[];
        thread_initialize = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_initialize = virtualinvoke thread_initialize.<java.lang.Thread: long getId()>();
        this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders> = subReaders;
        $i0 = lengthof subReaders;
        $i0 = $i0 + 1;
        $r0 = newarray (int)[$i0];
        this.<org.apache.lucene.index.MultiSegmentReader: int[] starts> = $r0;
        i = 0;

     label0:
        $i0 = lengthof subReaders;
        if i >= $i0 goto label2;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $i1 = this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 22, tid_initialize, "org.apache.lucene.index.MultiSegmentReader", 188, i, $i1);
        $r1[i] = $i1;
        $i0 = this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc>;
        $r3 = subReaders[i];
        $i1 = virtualinvoke $r3.<org.apache.lucene.index.SegmentReader: int maxDoc()>();
        $i0 = $i0 + $i1;
        this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc> = $i0;
        $r4 = subReaders[i];
        $z0 = virtualinvoke $r4.<org.apache.lucene.index.SegmentReader: boolean hasDeletions()>();
        if $z0 == 0 goto label1;

        this.<org.apache.lucene.index.MultiSegmentReader: boolean hasDeletions> = 1;

     label1:
        i = i + 1;
        goto label0;

     label2:
        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $i0 = lengthof subReaders;
        $i1 = this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 22, tid_initialize, "org.apache.lucene.index.MultiSegmentReader", 194, $i0, $i1);
        $r1[$i0] = $i1;
        return;
    }

    protected org.apache.lucene.index.DirectoryIndexReader doReopen(org.apache.lucene.index.SegmentInfos) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this, $r7;
        org.apache.lucene.index.SegmentInfos infos;
        int $i0;
        boolean $z0, $z1;
        org.apache.lucene.index.SegmentInfo $r0;
        org.apache.lucene.index.SegmentReader $r1;
        org.apache.lucene.index.ReadOnlyMultiSegmentReader $r2;
        org.apache.lucene.store.Directory $r3;
        org.apache.lucene.index.SegmentReader[] $r4;
        int[] $r5;
        java.util.Map $r6;
        java.lang.Object localthislockdoReopen;
        java.lang.Throwable throwableLocal42;
        long tid_doReopen;
        java.lang.Thread thread_doReopen;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        infos := @parameter0: org.apache.lucene.index.SegmentInfos;
        thread_doReopen = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_doReopen = virtualinvoke thread_doReopen.<java.lang.Thread: long getId()>();
        localthislockdoReopen = this;

     label0:
        entermonitor localthislockdoReopen;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockdoReopen, 0, tid_doReopen);
        $i0 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: int size()>();
        if $i0 != 1 goto label2;

        $z0 = this.<org.apache.lucene.index.MultiSegmentReader: boolean readOnly>;
        $r0 = virtualinvoke infos.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfo info(int)>(0);
        $r1 = staticinvoke <org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentReader get(boolean,org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfo,boolean)>($z0, infos, $r0, 0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdoReopen, 0, tid_doReopen);
        exitmonitor localthislockdoReopen;
        goto label1;

     label1:
        return $r1;

     label2:
        $z0 = this.<org.apache.lucene.index.MultiSegmentReader: boolean readOnly>;
        if $z0 == 0 goto label4;

        $r2 = new org.apache.lucene.index.ReadOnlyMultiSegmentReader;
        $r3 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.store.Directory directory>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 3, tid_doReopen, "org.apache.lucene.index.MultiSegmentReader", 203, $z1);
        $z1 = this.<org.apache.lucene.index.MultiSegmentReader: boolean closeDirectory>;
        $r4 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r5 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $r6 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        specialinvoke $r2.<org.apache.lucene.index.ReadOnlyMultiSegmentReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfos,boolean,org.apache.lucene.index.SegmentReader[],int[],java.util.Map)>($r3, infos, $z1, $r4, $r5, $r6);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdoReopen, 0, tid_doReopen);
        exitmonitor localthislockdoReopen;
        goto label3;

     label3:
        return $r2;

     label4:
        $r7 = new org.apache.lucene.index.MultiSegmentReader;
        $r3 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.store.Directory directory>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 3, tid_doReopen, "org.apache.lucene.index.MultiSegmentReader", 205, $z1);
        $z1 = this.<org.apache.lucene.index.MultiSegmentReader: boolean closeDirectory>;
        $r4 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r5 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $r6 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        specialinvoke $r7.<org.apache.lucene.index.MultiSegmentReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfos,boolean,org.apache.lucene.index.SegmentReader[],int[],java.util.Map,boolean)>($r3, infos, $z1, $r4, $r5, $r6, 0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdoReopen, 0, tid_doReopen);
        exitmonitor localthislockdoReopen;
        goto label5;

     label5:
        return $r7;

     label6:
        throwableLocal42 := @caughtexception;

     label7:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdoReopen, 0, tid_doReopen);
        exitmonitor localthislockdoReopen;

     label8:
        throw throwableLocal42;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        org.apache.lucene.index.TermFreqVector[] $r3;
        long tid_getTermFreqVectors;
        java.lang.Thread thread_getTermFreqVectors;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        thread_getTermFreqVectors = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getTermFreqVectors = virtualinvoke thread_getTermFreqVectors.<java.lang.Thread: long getId()>();
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(n);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_getTermFreqVectors, "org.apache.lucene.index.MultiSegmentReader", 212, i, $i0);
        $i0 = $r2[i];
        $i1 = n - $i0;
        $r3 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermFreqVector[] getTermFreqVectors(int)>($i1);
        return $r3;
    }

    public org.apache.lucene.index.TermFreqVector getTermFreqVector(int, java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        java.lang.String field;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        org.apache.lucene.index.TermFreqVector $r3;
        long tid_getTermFreqVector;
        java.lang.Thread thread_getTermFreqVector;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        field := @parameter1: java.lang.String;
        thread_getTermFreqVector = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getTermFreqVector = virtualinvoke thread_getTermFreqVector.<java.lang.Thread: long getId()>();
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(n);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_getTermFreqVector, "org.apache.lucene.index.MultiSegmentReader", 219, i, $i0);
        $i0 = $r2[i];
        $i1 = n - $i0;
        $r3 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.TermFreqVector getTermFreqVector(int,java.lang.String)>($i1, field);
        return $r3;
    }

    public void getTermFreqVector(int, java.lang.String, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int docNumber, i, $i0, $i1;
        java.lang.String field;
        org.apache.lucene.index.TermVectorMapper mapper;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        long tid_getTermFreqVector;
        java.lang.Thread thread_getTermFreqVector;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        docNumber := @parameter0: int;
        field := @parameter1: java.lang.String;
        mapper := @parameter2: org.apache.lucene.index.TermVectorMapper;
        thread_getTermFreqVector = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getTermFreqVector = virtualinvoke thread_getTermFreqVector.<java.lang.Thread: long getId()>();
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(docNumber);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_getTermFreqVector, "org.apache.lucene.index.MultiSegmentReader", 226, i, $i0);
        $i0 = $r2[i];
        $i1 = docNumber - $i0;
        virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: void getTermFreqVector(int,java.lang.String,org.apache.lucene.index.TermVectorMapper)>($i1, field, mapper);
        return;
    }

    public void getTermFreqVector(int, org.apache.lucene.index.TermVectorMapper) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int docNumber, i, $i0, $i1;
        org.apache.lucene.index.TermVectorMapper mapper;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        long tid_getTermFreqVector;
        java.lang.Thread thread_getTermFreqVector;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        docNumber := @parameter0: int;
        mapper := @parameter1: org.apache.lucene.index.TermVectorMapper;
        thread_getTermFreqVector = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getTermFreqVector = virtualinvoke thread_getTermFreqVector.<java.lang.Thread: long getId()>();
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(docNumber);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_getTermFreqVector, "org.apache.lucene.index.MultiSegmentReader", 232, i, $i0);
        $i0 = $r2[i];
        $i1 = docNumber - $i0;
        virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: void getTermFreqVector(int,org.apache.lucene.index.TermVectorMapper)>($i1, mapper);
        return;
    }

    public boolean isOptimized()
    {
        org.apache.lucene.index.MultiSegmentReader this;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        return 0;
    }

    public int numDocs()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        java.lang.Object localthislocknumDocs;
        java.lang.Throwable throwableLocal43;
        long tid_numDocs;
        java.lang.Thread thread_numDocs;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        thread_numDocs = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_numDocs = virtualinvoke thread_numDocs.<java.lang.Thread: long getId()>();
        localthislocknumDocs = this;

     label0:
        entermonitor localthislocknumDocs;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislocknumDocs, 0, tid_numDocs);
        $i0 = this.<org.apache.lucene.index.MultiSegmentReader: int numDocs>;
        if $i0 != -1 goto label3;

        n = 0;
        i = 0;

     label1:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i1 = lengthof $r0;
        if i >= $i1 goto label2;

        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $i1 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: int numDocs()>();
        n = n + $i1;
        i = i + 1;
        goto label1;

     label2:
        this.<org.apache.lucene.index.MultiSegmentReader: int numDocs> = n;

     label3:
        $i0 = this.<org.apache.lucene.index.MultiSegmentReader: int numDocs>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknumDocs, 0, tid_numDocs);
        exitmonitor localthislocknumDocs;
        goto label4;

     label4:
        return $i0;

     label5:
        throwableLocal43 := @caughtexception;

     label6:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknumDocs, 0, tid_numDocs);
        exitmonitor localthislocknumDocs;

     label7:
        throw throwableLocal43;

        catch java.lang.Throwable from label0 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public int maxDoc()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int $i0;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        $i0 = this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc>;
        return $i0;
    }

    public org.apache.lucene.document.Document document(int, org.apache.lucene.document.FieldSelector) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        org.apache.lucene.document.FieldSelector fieldSelector;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        org.apache.lucene.document.Document $r3;
        long tid_document;
        java.lang.Thread thread_document;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        fieldSelector := @parameter1: org.apache.lucene.document.FieldSelector;
        thread_document = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_document = virtualinvoke thread_document.<java.lang.Thread: long getId()>();
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(n);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_document, "org.apache.lucene.index.MultiSegmentReader", 259, i, $i0);
        $i0 = $r2[i];
        $i1 = n - $i0;
        $r3 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: org.apache.lucene.document.Document document(int,org.apache.lucene.document.FieldSelector)>($i1, fieldSelector);
        return $r3;
    }

    public boolean isDeleted(int)
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        boolean $z0;
        long tid_isDeleted;
        java.lang.Thread thread_isDeleted;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        thread_isDeleted = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_isDeleted = virtualinvoke thread_isDeleted.<java.lang.Thread: long getId()>();
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(n);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_isDeleted, "org.apache.lucene.index.MultiSegmentReader", 265, i, $i0);
        $i0 = $r2[i];
        $i1 = n - $i0;
        $z0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: boolean isDeleted(int)>($i1);
        return $z0;
    }

    public boolean hasDeletions()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        boolean $z0;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        $z0 = this.<org.apache.lucene.index.MultiSegmentReader: boolean hasDeletions>;
        return $z0;
    }

    protected void doDelete(int) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;
        int[] $r2;
        long tid_doDelete;
        java.lang.Thread thread_doDelete;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        thread_doDelete = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_doDelete = virtualinvoke thread_doDelete.<java.lang.Thread: long getId()>();
        this.<org.apache.lucene.index.MultiSegmentReader: int numDocs> = -1;
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(n);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 22, tid_doDelete, "org.apache.lucene.index.MultiSegmentReader", 276, i, $i0);
        $i0 = $r2[i];
        $i1 = n - $i0;
        virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: void deleteDocument(int)>($i1);
        this.<org.apache.lucene.index.MultiSegmentReader: boolean hasDeletions> = 1;
        return;
    }

    protected void doUndeleteAll() throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void undeleteAll()>();
        i = i + 1;
        goto label0;

     label1:
        this.<org.apache.lucene.index.MultiSegmentReader: boolean hasDeletions> = 0;
        this.<org.apache.lucene.index.MultiSegmentReader: int numDocs> = -1;
        return;
    }

    private int readerIndex(int)
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, $i0, $i1;
        int[] $r0;
        org.apache.lucene.index.SegmentReader[] $r1;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r1;
        $i1 = staticinvoke <org.apache.lucene.index.MultiSegmentReader: int readerIndex(int,int[],int)>(n, $r0, $i0);
        return $i1;
    }

    static final int readerIndex(int, int[], int)
    {
        int n, numSubReaders, lo, hi, mid, midValue, $i0, $i1;
        int[] starts;
        long tid_readerIndex;
        java.lang.Thread thread_readerIndex;

        n := @parameter0: int;
        starts := @parameter1: int[];
        numSubReaders := @parameter2: int;
        thread_readerIndex = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_readerIndex = virtualinvoke thread_readerIndex.<java.lang.Thread: long getId()>();
        lo = 0;
        hi = numSubReaders - 1;

     label0:
        if hi < lo goto label5;

        $i0 = lo + hi;
        mid = $i0 >>> 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(starts, 22, tid_readerIndex, "org.apache.lucene.index.MultiSegmentReader", 298, mid, midValue);
        midValue = starts[mid];
        if n >= midValue goto label1;

        hi = mid - 1;
        goto label4;

     label1:
        if n <= midValue goto label2;

        lo = mid + 1;
        goto label4;

     label2:
        $i0 = mid + 1;
        if $i0 >= numSubReaders goto label3;

        $i1 = mid + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(starts, 22, tid_readerIndex, "org.apache.lucene.index.MultiSegmentReader", 304, $i1, $i0);
        $i0 = starts[$i1];
        if $i0 != midValue goto label3;

        mid = mid + 1;
        goto label2;

     label3:
        return mid;

     label4:
        goto label0;

     label5:
        return hi;
    }

    public boolean hasNorms(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        java.lang.String field;
        int i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;
        boolean $z0;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        field := @parameter0: java.lang.String;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label2;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        $z0 = virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: boolean hasNorms(java.lang.String)>(field);
        if $z0 == 0 goto label1;

        return 1;

     label1:
        i = i + 1;
        goto label0;

     label2:
        return 0;
    }

    private byte[] fakeNorms()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        byte[] $r0, $r1;
        int $i0;
        long tid_fakeNorms;
        java.lang.Thread thread_fakeNorms;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        thread_fakeNorms = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_fakeNorms = virtualinvoke thread_fakeNorms.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 39, tid_fakeNorms, "org.apache.lucene.index.MultiSegmentReader", 323, $r0);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: byte[] ones>;
        if $r0 != null goto label0;

        $i0 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc()>();
        $r1 = staticinvoke <org.apache.lucene.index.SegmentReader: byte[] createFakeNorms(int)>($i0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 39, tid_fakeNorms, "org.apache.lucene.index.MultiSegmentReader", 323, $r1);
        this.<org.apache.lucene.index.MultiSegmentReader: byte[] ones> = $r1;

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 39, tid_fakeNorms, "org.apache.lucene.index.MultiSegmentReader", 324, $r0);
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: byte[] ones>;
        return $r0;
    }

    public byte[] norms(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        java.lang.String field;
        byte[] bytes, $r2;
        int i, $i0, $i1, $i2;
        java.util.Map $r0;
        java.lang.Object $r1, localthislocknorms;
        boolean $z0;
        org.apache.lucene.index.SegmentReader[] $r3, $r4;
        org.apache.lucene.index.SegmentReader $r5;
        int[] $r6;
        java.lang.Throwable throwableLocal44;
        long tid_norms;
        java.lang.Thread thread_norms;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        field := @parameter0: java.lang.String;
        thread_norms = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_norms = virtualinvoke thread_norms.<java.lang.Thread: long getId()>();
        localthislocknorms = this;

     label0:
        entermonitor localthislocknorms;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(field);
        $r2 = (byte[]) $r1;
        bytes = (byte[]) $r2;
        if bytes == null goto label2;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        exitmonitor localthislocknorms;
        goto label1;

     label1:
        return bytes;

     label2:
        $z0 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: boolean hasNorms(java.lang.String)>(field);
        if $z0 != 0 goto label4;

        $r2 = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: byte[] fakeNorms()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        exitmonitor localthislocknorms;
        goto label3;

     label3:
        return $r2;

     label4:
        $i0 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc()>();
        bytes = newarray (byte)[$i0];
        i = 0;

     label5:
        $r3 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i1 = lengthof $r3;
        if i >= $i1 goto label6;

        $r4 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r5 = $r4[i];
        $r6 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 22, tid_norms, "org.apache.lucene.index.MultiSegmentReader", 337, i, $i2);
        $i2 = $r6[i];
        virtualinvoke $r5.<org.apache.lucene.index.SegmentReader: void norms(java.lang.String,byte[],int)>(field, bytes, $i2);
        i = i + 1;
        goto label5;

     label6:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(field, bytes);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        exitmonitor localthislocknorms;
        goto label7;

     label7:
        return bytes;

     label8:
        throwableLocal44 := @caughtexception;

     label9:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        exitmonitor localthislocknorms;

     label10:
        throw throwableLocal44;

        catch java.lang.Throwable from label0 to label7 with label8;
        catch java.lang.Throwable from label9 to label10 with label8;
    }

    public void norms(java.lang.String, byte[], int) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        java.lang.String field;
        byte[] result, bytes, $r2;
        int offset, i, $i0, $i1, $i2;
        java.util.Map $r0;
        java.lang.Object $r1, localthislocknorms;
        boolean $z0;
        org.apache.lucene.index.SegmentReader[] $r3, $r4;
        org.apache.lucene.index.SegmentReader $r5;
        int[] $r6;
        java.lang.Throwable throwableLocal45;
        long tid_norms;
        java.lang.Thread thread_norms;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        field := @parameter0: java.lang.String;
        result := @parameter1: byte[];
        offset := @parameter2: int;
        thread_norms = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_norms = virtualinvoke thread_norms.<java.lang.Thread: long getId()>();
        localthislocknorms = this;

     label0:
        entermonitor localthislocknorms;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(field);
        $r2 = (byte[]) $r1;
        bytes = (byte[]) $r2;
        if bytes != null goto label1;

        $z0 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: boolean hasNorms(java.lang.String)>(field);
        if $z0 != 0 goto label1;

        bytes = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: byte[] fakeNorms()>();

     label1:
        if bytes == null goto label2;

        $i0 = virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: int maxDoc()>();
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(bytes, 0, result, offset, $i0);

     label2:
        i = 0;

     label3:
        $r3 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i1 = lengthof $r3;
        if i >= $i1 goto label4;

        $r4 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r5 = $r4[i];
        $r6 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 22, tid_norms, "org.apache.lucene.index.MultiSegmentReader", 351, i, $i0);
        $i0 = $r6[i];
        $i2 = offset + $i0;
        virtualinvoke $r5.<org.apache.lucene.index.SegmentReader: void norms(java.lang.String,byte[],int)>(field, result, $i2);
        i = i + 1;
        goto label3;

     label4:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        exitmonitor localthislocknorms;
        goto label5;

     label5:
        return;

     label6:
        throwableLocal45 := @caughtexception;

     label7:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislocknorms, 0, tid_norms);
        exitmonitor localthislocknorms;

     label8:
        throw throwableLocal45;

        catch java.lang.Throwable from label0 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected void doSetNorm(int, java.lang.String, byte) throws org.apache.lucene.index.CorruptIndexException, java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int n, i, $i0, $i1;
        java.lang.String field;
        byte value;
        java.util.Map l4, $r0;
        java.lang.Throwable l5, $r2;
        org.apache.lucene.index.SegmentReader[] $r3;
        org.apache.lucene.index.SegmentReader $r4;
        int[] $r5;
        long tid_doSetNorm;
        java.lang.Thread thread_doSetNorm;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        n := @parameter0: int;
        field := @parameter1: java.lang.String;
        value := @parameter2: byte;
        thread_doSetNorm = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_doSetNorm = virtualinvoke thread_doSetNorm.<java.lang.Thread: long getId()>();
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        l4 = $r0;
        entermonitor $r0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>($r0, 2, tid_doSetNorm);

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: java.util.Map normsCache>;
        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(field);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(l4, 2, tid_doSetNorm);
        exitmonitor l4;

     label1:
        goto label5;

     label2:
        $r2 := @caughtexception;

     label3:
        l5 = $r2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(l4, 2, tid_doSetNorm);
        exitmonitor l4;

     label4:
        throw l5;

     label5:
        i = specialinvoke this.<org.apache.lucene.index.MultiSegmentReader: int readerIndex(int)>(n);
        $r3 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r4 = $r3[i];
        $r5 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 22, tid_doSetNorm, "org.apache.lucene.index.MultiSegmentReader", 360, i, $i0);
        $i0 = $r5[i];
        $i1 = n - $i0;
        virtualinvoke $r4.<org.apache.lucene.index.SegmentReader: void setNorm(int,java.lang.String,byte)>($i1, field, value);
        return;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public org.apache.lucene.index.TermEnum terms() throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.SegmentReader[] $r1;
        int[] $r2;
        org.apache.lucene.index.MultiSegmentReader$MultiTermEnum tmp$539799706;
        org.apache.lucene.index.TermEnum tmp;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        tmp$539799706 = new org.apache.lucene.index.MultiSegmentReader$MultiTermEnum;
        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        specialinvoke tmp$539799706.<org.apache.lucene.index.MultiSegmentReader$MultiTermEnum: void <init>(org.apache.lucene.index.IndexReader[],int[],org.apache.lucene.index.Term)>($r1, $r2, null);
        tmp = (org.apache.lucene.index.TermEnum) tmp$539799706;
        return tmp;
    }

    public org.apache.lucene.index.TermEnum terms(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.Term term;
        org.apache.lucene.index.SegmentReader[] $r1;
        int[] $r2;
        org.apache.lucene.index.MultiSegmentReader$MultiTermEnum tmp$539960146;
        org.apache.lucene.index.TermEnum tmp;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        term := @parameter0: org.apache.lucene.index.Term;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        tmp$539960146 = new org.apache.lucene.index.MultiSegmentReader$MultiTermEnum;
        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        specialinvoke tmp$539960146.<org.apache.lucene.index.MultiSegmentReader$MultiTermEnum: void <init>(org.apache.lucene.index.IndexReader[],int[],org.apache.lucene.index.Term)>($r1, $r2, term);
        tmp = (org.apache.lucene.index.TermEnum) tmp$539960146;
        return tmp;
    }

    public int docFreq(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.Term t;
        int total, i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0;
        org.apache.lucene.index.SegmentReader $r1;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        t := @parameter0: org.apache.lucene.index.Term;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        total = 0;
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[i];
        $i0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: int docFreq(org.apache.lucene.index.Term)>(t);
        total = total + $i0;
        i = i + 1;
        goto label0;

     label1:
        return total;
    }

    public org.apache.lucene.index.TermDocs termDocs() throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.SegmentReader[] $r1;
        int[] $r2;
        org.apache.lucene.index.MultiSegmentReader$MultiTermDocs tmp$541843457;
        org.apache.lucene.index.TermDocs tmp;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        tmp$541843457 = new org.apache.lucene.index.MultiSegmentReader$MultiTermDocs;
        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        specialinvoke tmp$541843457.<org.apache.lucene.index.MultiSegmentReader$MultiTermDocs: void <init>(org.apache.lucene.index.IndexReader[],int[])>($r1, $r2);
        tmp = (org.apache.lucene.index.TermDocs) tmp$541843457;
        return tmp;
    }

    public org.apache.lucene.index.TermPositions termPositions() throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.SegmentReader[] $r1;
        int[] $r2;
        org.apache.lucene.index.MultiSegmentReader$MultiTermPositions tmp$541879581;
        org.apache.lucene.index.TermPositions tmp;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        tmp$541879581 = new org.apache.lucene.index.MultiSegmentReader$MultiTermPositions;
        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = this.<org.apache.lucene.index.MultiSegmentReader: int[] starts>;
        specialinvoke tmp$541879581.<org.apache.lucene.index.MultiSegmentReader$MultiTermPositions: void <init>(org.apache.lucene.index.IndexReader[],int[])>($r1, $r2);
        tmp = (org.apache.lucene.index.TermPositions) tmp$541879581;
        return tmp;
    }

    protected void commitChanges() throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void commit()>();
        i = i + 1;
        goto label0;

     label1:
        return;
    }

    void startCommit()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        specialinvoke this.<org.apache.lucene.index.DirectoryIndexReader: void startCommit()>();
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void startCommit()>();
        i = i + 1;
        goto label0;

     label1:
        return;
    }

    void rollbackCommit()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        specialinvoke this.<org.apache.lucene.index.DirectoryIndexReader: void rollbackCommit()>();
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void rollbackCommit()>();
        i = i + 1;
        goto label0;

     label1:
        return;
    }

    protected void doClose() throws java.io.IOException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;
        java.lang.Object localthislockdoClose;
        java.lang.Throwable throwableLocal46;
        long tid_doClose;
        java.lang.Thread thread_doClose;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        thread_doClose = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_doClose = virtualinvoke thread_doClose.<java.lang.Thread: long getId()>();
        localthislockdoClose = this;

     label0:
        entermonitor localthislockdoClose;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockdoClose, 0, tid_doClose);
        i = 0;

     label1:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label2;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void decRef()>();
        i = i + 1;
        goto label1;

     label2:
        specialinvoke this.<org.apache.lucene.index.DirectoryIndexReader: void doClose()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdoClose, 0, tid_doClose);
        exitmonitor localthislockdoClose;
        goto label3;

     label3:
        return;

     label4:
        throwableLocal46 := @caughtexception;

     label5:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdoClose, 0, tid_doClose);
        exitmonitor localthislockdoClose;

     label6:
        throw throwableLocal46;

        catch java.lang.Throwable from label0 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.IndexReader$FieldOption fieldNames;
        org.apache.lucene.index.SegmentReader[] $r0;
        java.util.Collection $r1;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        fieldNames := @parameter0: org.apache.lucene.index.IndexReader$FieldOption;
        virtualinvoke this.<org.apache.lucene.index.MultiSegmentReader: void ensureOpen()>();
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = staticinvoke <org.apache.lucene.index.MultiSegmentReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption,org.apache.lucene.index.IndexReader[])>(fieldNames, $r0);
        return $r1;
    }

    static java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption, org.apache.lucene.index.IndexReader[])
    {
        org.apache.lucene.index.IndexReader$FieldOption fieldNames;
        org.apache.lucene.index.IndexReader[] subReaders;
        java.util.HashSet $r0, fieldSet;
        int i, $i0;
        org.apache.lucene.index.IndexReader reader;
        java.util.Collection names;

        fieldNames := @parameter0: org.apache.lucene.index.IndexReader$FieldOption;
        subReaders := @parameter1: org.apache.lucene.index.IndexReader[];
        $r0 = new java.util.HashSet;
        specialinvoke $r0.<java.util.HashSet: void <init>()>();
        fieldSet = $r0;
        i = 0;

     label0:
        $i0 = lengthof subReaders;
        if i >= $i0 goto label1;

        reader = subReaders[i];
        names = virtualinvoke reader.<org.apache.lucene.index.IndexReader: java.util.Collection getFieldNames(org.apache.lucene.index.IndexReader$FieldOption)>(fieldNames);
        interfaceinvoke fieldSet.<java.util.Set: boolean addAll(java.util.Collection)>(names);
        i = i + 1;
        goto label0;

     label1:
        return fieldSet;
    }

    org.apache.lucene.index.SegmentReader[] getSubReaders()
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.SegmentReader[] $r0;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        return $r0;
    }

    public void setTermInfosIndexDivisor(int) throws java.lang.IllegalStateException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        int indexDivisor, i, $i0;
        org.apache.lucene.index.SegmentReader[] $r0, $r1;
        org.apache.lucene.index.SegmentReader $r2;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        indexDivisor := @parameter0: int;
        i = 0;

     label0:
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if i >= $i0 goto label1;

        $r1 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r2 = $r1[i];
        virtualinvoke $r2.<org.apache.lucene.index.SegmentReader: void setTermInfosIndexDivisor(int)>(indexDivisor);
        i = i + 1;
        goto label0;

     label1:
        return;
    }

    public int getTermInfosIndexDivisor() throws java.lang.IllegalStateException
    {
        org.apache.lucene.index.MultiSegmentReader this;
        org.apache.lucene.index.SegmentReader[] $r0;
        int $i0;
        org.apache.lucene.index.SegmentReader $r1;
        java.lang.IllegalStateException $r2;

        this := @this: org.apache.lucene.index.MultiSegmentReader;
        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $i0 = lengthof $r0;
        if $i0 <= 0 goto label0;

        $r0 = this.<org.apache.lucene.index.MultiSegmentReader: org.apache.lucene.index.SegmentReader[] subReaders>;
        $r1 = $r0[0];
        $i0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentReader: int getTermInfosIndexDivisor()>();
        return $i0;

     label0:
        $r2 = new java.lang.IllegalStateException;
        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no readers");
        throw $r2;
    }
}
