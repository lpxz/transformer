public class org.apache.lucene.analysis.CharArraySet extends java.util.AbstractSet
{
    private static final int INIT_SIZE;
    private char[][] entries;
    private int count;
    private final boolean ignoreCase;

    public void <init>(int, boolean)
    {
        org.apache.lucene.analysis.CharArraySet this;
        int startSize, size, $i0, $i1;
        boolean ignoreCase;
        char[][] $r0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        startSize := @parameter0: int;
        ignoreCase := @parameter1: boolean;
        specialinvoke this.<java.util.AbstractSet: void <init>()>();
        this.<org.apache.lucene.analysis.CharArraySet: boolean ignoreCase> = ignoreCase;
        size = 8;

     label0:
        $i0 = startSize >> 2;
        $i1 = startSize + $i0;
        if $i1 <= size goto label1;

        size = size << 1;
        goto label0;

     label1:
        $r0 = newarray (char[])[size];
        this.<org.apache.lucene.analysis.CharArraySet: char[][] entries> = $r0;
        return;
    }

    public void <init>(java.util.Collection, boolean)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.util.Collection c;
        boolean ignoreCase;
        int $i0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        c := @parameter0: java.util.Collection;
        ignoreCase := @parameter1: boolean;
        $i0 = interfaceinvoke c.<java.util.Collection: int size()>();
        specialinvoke this.<org.apache.lucene.analysis.CharArraySet: void <init>(int,boolean)>($i0, ignoreCase);
        virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean addAll(java.util.Collection)>(c);
        return;
    }

    public boolean contains(char[], int, int)
    {
        org.apache.lucene.analysis.CharArraySet this;
        char[] text, $r1;
        int off, len, $i0;
        char[][] $r0;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: char[];
        off := @parameter1: int;
        len := @parameter2: int;
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: int getSlot(char[],int,int)>(text, off, len);
        $r1 = $r0[$i0];
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean contains(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.CharSequence cs;
        char[][] $r0;
        int $i0;
        char[] $r1;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        cs := @parameter0: java.lang.CharSequence;
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: int getSlot(java.lang.CharSequence)>(cs);
        $r1 = $r0[$i0];
        if $r1 == null goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    private int getSlot(char[], int, int)
    {
        org.apache.lucene.analysis.CharArraySet this;
        char[] text, text2;
        int off, len, code, pos, inc, $i0, $i1;
        char[][] $r0, $r1;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: char[];
        off := @parameter1: int;
        len := @parameter2: int;
        code = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: int getHashCode(char[],int,int)>(text, off, len);
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = lengthof $r0;
        $i0 = $i0 - 1;
        pos = code & $i0;
        $r1 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        text2 = $r1[pos];
        if text2 == null goto label1;

        $z0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean equals(char[],int,int,char[])>(text, off, len, text2);
        if $z0 != 0 goto label1;

        $i1 = code >> 8;
        $i1 = $i1 + code;
        inc = $i1 | 1;

     label0:
        code = code + inc;
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = lengthof $r0;
        $i0 = $i0 - 1;
        pos = code & $i0;
        $r1 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        text2 = $r1[pos];
        if text2 == null goto label1;

        $z0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean equals(char[],int,int,char[])>(text, off, len, text2);
        if $z0 == 0 goto label0;

     label1:
        return pos;
    }

    private int getSlot(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.CharSequence text;
        int code, pos, inc, $i0, $i1;
        char[] text2;
        char[][] $r0, $r1;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: java.lang.CharSequence;
        code = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: int getHashCode(java.lang.CharSequence)>(text);
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = lengthof $r0;
        $i0 = $i0 - 1;
        pos = code & $i0;
        $r1 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        text2 = $r1[pos];
        if text2 == null goto label1;

        $z0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean equals(java.lang.CharSequence,char[])>(text, text2);
        if $z0 != 0 goto label1;

        $i1 = code >> 8;
        $i1 = $i1 + code;
        inc = $i1 | 1;

     label0:
        code = code + inc;
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = lengthof $r0;
        $i0 = $i0 - 1;
        pos = code & $i0;
        $r1 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        text2 = $r1[pos];
        if text2 == null goto label1;

        $z0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean equals(java.lang.CharSequence,char[])>(text, text2);
        if $z0 == 0 goto label0;

     label1:
        return pos;
    }

    public boolean add(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.CharSequence text;
        java.lang.String $r0;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: java.lang.CharSequence;
        $r0 = virtualinvoke text.<java.lang.Object: java.lang.String toString()>();
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean add(java.lang.String)>($r0);
        return $z0;
    }

    public boolean add(java.lang.String)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.String text;
        char[] $r0;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: java.lang.String;
        $r0 = virtualinvoke text.<java.lang.String: char[] toCharArray()>();
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean add(char[])>($r0);
        return $z0;
    }

    public boolean add(char[])
    {
        org.apache.lucene.analysis.CharArraySet this;
        char[] text, $r1;
        int i, slot, $i0, $i2, $i3;
        boolean $z0;
        char $c1;
        char[][] $r0, $r3;
        long tid_add;
        java.lang.Thread thread_add;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: char[];
        thread_add = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_add = virtualinvoke thread_add.<java.lang.Thread: long getId()>();
        $z0 = this.<org.apache.lucene.analysis.CharArraySet: boolean ignoreCase>;
        if $z0 == 0 goto label1;

        i = 0;

     label0:
        $i0 = lengthof text;
        if i >= $i0 goto label1;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text, 25, tid_add, "org.apache.lucene.analysis.CharArraySet", 116, i, $c1);
        $c1 = text[i];
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text, 25, tid_add, "org.apache.lucene.analysis.CharArraySet", 116, i, $c1);
        text[i] = $c1;
        i = i + 1;
        goto label0;

     label1:
        $i2 = lengthof text;
        slot = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: int getSlot(char[],int,int)>(text, 0, $i2);
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $r1 = $r0[slot];
        if $r1 == null goto label2;

        return 0;

     label2:
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $r0[slot] = text;
        $i0 = this.<org.apache.lucene.analysis.CharArraySet: int count>;
        $i0 = $i0 + 1;
        this.<org.apache.lucene.analysis.CharArraySet: int count> = $i0;
        $i3 = this.<org.apache.lucene.analysis.CharArraySet: int count>;
        $i0 = this.<org.apache.lucene.analysis.CharArraySet: int count>;
        $i0 = $i0 >> 2;
        $i3 = $i3 + $i0;
        $r3 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = lengthof $r3;
        if $i3 <= $i0 goto label3;

        specialinvoke this.<org.apache.lucene.analysis.CharArraySet: void rehash()>();

     label3:
        return 1;
    }

    private boolean equals(char[], int, int, char[])
    {
        org.apache.lucene.analysis.CharArraySet this;
        char[] text1, text2;
        int off, len, i, $i0;
        boolean $z0;
        char $c1, $c2;
        long tid_equals;
        java.lang.Thread thread_equals;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text1 := @parameter0: char[];
        off := @parameter1: int;
        len := @parameter2: int;
        text2 := @parameter3: char[];
        thread_equals = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_equals = virtualinvoke thread_equals.<java.lang.Thread: long getId()>();
        $i0 = lengthof text2;
        if len == $i0 goto label0;

        return 0;

     label0:
        $z0 = this.<org.apache.lucene.analysis.CharArraySet: boolean ignoreCase>;
        if $z0 == 0 goto label4;

        i = 0;

     label1:
        if i >= len goto label3;

        $i0 = off + i;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text1, 25, tid_equals, "org.apache.lucene.analysis.CharArraySet", 134, $i0, $c1);
        $c1 = text1[$i0];
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text2, 25, tid_equals, "org.apache.lucene.analysis.CharArraySet", 134, i, $c2);
        $c2 = text2[i];
        if $c1 == $c2 goto label2;

        return 0;

     label2:
        i = i + 1;
        goto label1;

     label3:
        goto label7;

     label4:
        i = 0;

     label5:
        if i >= len goto label7;

        $i0 = off + i;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text1, 25, tid_equals, "org.apache.lucene.analysis.CharArraySet", 139, $i0, $c1);
        $c1 = text1[$i0];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text2, 25, tid_equals, "org.apache.lucene.analysis.CharArraySet", 139, i, $c2);
        $c2 = text2[i];
        if $c1 == $c2 goto label6;

        return 0;

     label6:
        i = i + 1;
        goto label5;

     label7:
        return 1;
    }

    private boolean equals(java.lang.CharSequence, char[])
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.CharSequence text1;
        char[] text2;
        int len, i, $i0;
        boolean $z0;
        char $c1, $c2;
        long tid_equals;
        java.lang.Thread thread_equals;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text1 := @parameter0: java.lang.CharSequence;
        text2 := @parameter1: char[];
        thread_equals = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_equals = virtualinvoke thread_equals.<java.lang.Thread: long getId()>();
        len = interfaceinvoke text1.<java.lang.CharSequence: int length()>();
        $i0 = lengthof text2;
        if len == $i0 goto label0;

        return 0;

     label0:
        $z0 = this.<org.apache.lucene.analysis.CharArraySet: boolean ignoreCase>;
        if $z0 == 0 goto label4;

        i = 0;

     label1:
        if i >= len goto label3;

        $c1 = interfaceinvoke text1.<java.lang.CharSequence: char charAt(int)>(i);
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text2, 25, tid_equals, "org.apache.lucene.analysis.CharArraySet", 152, i, $c2);
        $c2 = text2[i];
        if $c1 == $c2 goto label2;

        return 0;

     label2:
        i = i + 1;
        goto label1;

     label3:
        goto label7;

     label4:
        i = 0;

     label5:
        if i >= len goto label7;

        $c1 = interfaceinvoke text1.<java.lang.CharSequence: char charAt(int)>(i);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text2, 25, tid_equals, "org.apache.lucene.analysis.CharArraySet", 157, i, $c2);
        $c2 = text2[i];
        if $c1 == $c2 goto label6;

        return 0;

     label6:
        i = i + 1;
        goto label5;

     label7:
        return 1;
    }

    private void rehash()
    {
        org.apache.lucene.analysis.CharArraySet this;
        int newSize, i, $i0, $i1;
        char[][] oldEntries, $r0, $r1;
        char[] text;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        $r0 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i0 = lengthof $r0;
        newSize = 2 * $i0;
        oldEntries = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $r0 = newarray (char[])[newSize];
        this.<org.apache.lucene.analysis.CharArraySet: char[][] entries> = $r0;
        i = 0;

     label0:
        $i0 = lengthof oldEntries;
        if i >= $i0 goto label2;

        text = oldEntries[i];
        if text == null goto label1;

        $r1 = this.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        $i1 = lengthof text;
        $i0 = specialinvoke this.<org.apache.lucene.analysis.CharArraySet: int getSlot(char[],int,int)>(text, 0, $i1);
        $r1[$i0] = text;

     label1:
        i = i + 1;
        goto label0;

     label2:
        return;
    }

    private int getHashCode(char[], int, int)
    {
        org.apache.lucene.analysis.CharArraySet this;
        char[] text;
        int offset, len, code, stop, i, $i0;
        boolean $z0;
        char $c1;
        long tid_getHashCode;
        java.lang.Thread thread_getHashCode;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: char[];
        offset := @parameter1: int;
        len := @parameter2: int;
        thread_getHashCode = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getHashCode = virtualinvoke thread_getHashCode.<java.lang.Thread: long getId()>();
        code = 0;
        stop = offset + len;
        $z0 = this.<org.apache.lucene.analysis.CharArraySet: boolean ignoreCase>;
        if $z0 == 0 goto label2;

        i = offset;

     label0:
        if i >= stop goto label1;

        $i0 = code * 31;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text, 25, tid_getHashCode, "org.apache.lucene.analysis.CharArraySet", 183, i, $c1);
        $c1 = text[i];
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);
        code = $i0 + $c1;
        i = i + 1;
        goto label0;

     label1:
        goto label4;

     label2:
        i = offset;

     label3:
        if i >= stop goto label4;

        $i0 = code * 31;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(text, 25, tid_getHashCode, "org.apache.lucene.analysis.CharArraySet", 187, i, $c1);
        $c1 = text[i];
        code = $i0 + $c1;
        i = i + 1;
        goto label3;

     label4:
        return code;
    }

    private int getHashCode(java.lang.CharSequence)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.CharSequence text;
        int code, len, i, $i0;
        boolean $z0;
        char $c1;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        text := @parameter0: java.lang.CharSequence;
        $z0 = this.<org.apache.lucene.analysis.CharArraySet: boolean ignoreCase>;
        if $z0 == 0 goto label2;

        code = 0;
        len = interfaceinvoke text.<java.lang.CharSequence: int length()>();
        i = 0;

     label0:
        if i >= len goto label1;

        $i0 = code * 31;
        $c1 = interfaceinvoke text.<java.lang.CharSequence: char charAt(int)>(i);
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c1);
        code = $i0 + $c1;
        i = i + 1;
        goto label0;

     label1:
        goto label4;

     label2:
        code = 0;
        len = interfaceinvoke text.<java.lang.CharSequence: int length()>();
        i = 0;

     label3:
        if i >= len goto label4;

        $i0 = code * 31;
        $c1 = interfaceinvoke text.<java.lang.CharSequence: char charAt(int)>(i);
        code = $i0 + $c1;
        i = i + 1;
        goto label3;

     label4:
        return code;
    }

    public int size()
    {
        org.apache.lucene.analysis.CharArraySet this;
        int $i0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        $i0 = this.<org.apache.lucene.analysis.CharArraySet: int count>;
        return $i0;
    }

    public boolean isEmpty()
    {
        org.apache.lucene.analysis.CharArraySet this;
        int $i0;
        boolean $z0;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        $i0 = this.<org.apache.lucene.analysis.CharArraySet: int count>;
        if $i0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        return $z0;
    }

    public boolean contains(java.lang.Object)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.Object o;
        char[] text, $r0;
        boolean $z0;
        int $i0;
        java.lang.CharSequence $r1;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        o := @parameter0: java.lang.Object;
        $z0 = o instanceof char[];
        if $z0 == 0 goto label0;

        $r0 = (char[]) o;
        text = (char[]) $r0;
        $i0 = lengthof text;
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean contains(char[],int,int)>(text, 0, $i0);
        return $z0;

     label0:
        $z0 = o instanceof java.lang.CharSequence;
        if $z0 == 0 goto label1;

        $r1 = (java.lang.CharSequence) o;
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean contains(java.lang.CharSequence)>($r1);
        return $z0;

     label1:
        return 0;
    }

    public boolean add(java.lang.Object)
    {
        org.apache.lucene.analysis.CharArraySet this;
        java.lang.Object o;
        boolean $z0;
        char[] $r0;
        java.lang.String $r1;
        java.lang.CharSequence $r2;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        o := @parameter0: java.lang.Object;
        $z0 = o instanceof char[];
        if $z0 == 0 goto label0;

        $r0 = (char[]) o;
        $r0 = (char[]) $r0;
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean add(char[])>($r0);
        return $z0;

     label0:
        $z0 = o instanceof java.lang.String;
        if $z0 == 0 goto label1;

        $r1 = (java.lang.String) o;
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean add(java.lang.String)>($r1);
        return $z0;

     label1:
        $z0 = o instanceof java.lang.CharSequence;
        if $z0 == 0 goto label2;

        $r2 = (java.lang.CharSequence) o;
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean add(java.lang.CharSequence)>($r2);
        return $z0;

     label2:
        $r1 = virtualinvoke o.<java.lang.Object: java.lang.String toString()>();
        $z0 = virtualinvoke this.<org.apache.lucene.analysis.CharArraySet: boolean add(java.lang.String)>($r1);
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.lucene.analysis.CharArraySet this;
        org.apache.lucene.analysis.CharArraySet$CharArraySetIterator tmp$541945984;
        java.util.Iterator tmp;

        this := @this: org.apache.lucene.analysis.CharArraySet;
        tmp$541945984 = new org.apache.lucene.analysis.CharArraySet$CharArraySetIterator;
        specialinvoke tmp$541945984.<org.apache.lucene.analysis.CharArraySet$CharArraySetIterator: void <init>(org.apache.lucene.analysis.CharArraySet)>(this);
        tmp = (java.util.Iterator) tmp$541945984;
        return tmp;
    }

    static char[][] access$000(org.apache.lucene.analysis.CharArraySet)
    {
        org.apache.lucene.analysis.CharArraySet x0;
        char[][] $r0;

        x0 := @parameter0: org.apache.lucene.analysis.CharArraySet;
        $r0 = x0.<org.apache.lucene.analysis.CharArraySet: char[][] entries>;
        return $r0;
    }
}
