public abstract class spec.jbb.Transaction extends java.lang.Object
{
    static final java.lang.String COPYRIGHT;
    protected static final byte new_order;
    protected static final byte payment;
    protected static final byte order_status;
    protected static final byte delivery;
    protected static final byte stock_level;
    protected static final byte cust_report;
    public static int aveOrderlines;
    public static int minOrderlines;
    public static int maxOrderlines;
    static boolean enableLogWrite;
    static boolean steadyStateMem;
    static boolean validationFlag;
    private static boolean validRun;
    static java.lang.String[] transactionNames;
    protected static final byte maxTxnTypes;
    static java.lang.Class[] transactionConstructorSignature;

    static void <clinit>()
    {
        int $i0;
        java.lang.String[] $r0;
        byte $b1;
        java.lang.Class[] $r1;
        java.lang.Class $r2;

        <spec.jbb.Transaction: int aveOrderlines> = 10;
        $i0 = <spec.jbb.Transaction: int aveOrderlines>;
        $i0 = $i0 - 5;
        <spec.jbb.Transaction: int minOrderlines> = $i0;
        $i0 = <spec.jbb.Transaction: int aveOrderlines>;
        $i0 = $i0 + 5;
        <spec.jbb.Transaction: int maxOrderlines> = $i0;
        <spec.jbb.Transaction: boolean enableLogWrite> = 0;
        <spec.jbb.Transaction: boolean steadyStateMem> = 1;
        <spec.jbb.Transaction: boolean validationFlag> = 0;
        <spec.jbb.Transaction: boolean validRun> = 1;
        $r0 = newarray (java.lang.String)[6];
        $r0[0] = "NewOrder";
        $r0[1] = "Payment";
        $r0[2] = "OrderStatus";
        $r0[3] = "Delivery";
        $r0[4] = "StockLevel";
        $r0[5] = "CustomerReport";
        <spec.jbb.Transaction: java.lang.String[] transactionNames> = $r0;
        $r0 = <spec.jbb.Transaction: java.lang.String[] transactionNames>;
        $i0 = lengthof $r0;
        $b1 = (byte) $i0;
        <spec.jbb.Transaction: byte maxTxnTypes> = $b1;
        $r1 = newarray (java.lang.Class)[2];
        $r1[0] = class "spec/jbb/Company";
        $r2 = <java.lang.Short: java.lang.Class TYPE>;
        $r1[1] = $r2;
        <spec.jbb.Transaction: java.lang.Class[] transactionConstructorSignature> = $r1;
        return;
    }

    public void <init>()
    {
        spec.jbb.Transaction this;

        this := @this: spec.jbb.Transaction;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public abstract java.lang.String getMenuName();

    public abstract void init();

    public abstract boolean process();

    public abstract void initializeTransactionLog();

    public abstract void processTransactionLog();

    public static void invalidateRun()
    {
        long tid_invalidateRun;
        java.lang.Thread thread_invalidateRun;

        thread_invalidateRun = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_invalidateRun = virtualinvoke thread_invalidateRun.<java.lang.Thread: long getId()>();
        nop;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,int)>(75, tid_invalidateRun, "spec.jbbspec.jbb.Transaction", 82, 0);
        <spec.jbb.Transaction: boolean validRun> = 0;
        return;
    }

    public static void validateRun()
    {
        long tid_validateRun;
        java.lang.Thread thread_validateRun;

        thread_validateRun = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_validateRun = virtualinvoke thread_validateRun.<java.lang.Thread: long getId()>();
        nop;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,int)>(75, tid_validateRun, "spec.jbbspec.jbb.Transaction", 86, 1);
        <spec.jbb.Transaction: boolean validRun> = 1;
        return;
    }

    public static boolean isRunValid()
    {
        boolean $z0;
        long tid_isRunValid;
        java.lang.Thread thread_isRunValid;

        thread_isRunValid = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_isRunValid = virtualinvoke thread_isRunValid.<java.lang.Thread: long getId()>();
        nop;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeStatic(int,long,java.lang.String,int,boolean)>(75, tid_isRunValid, "spec.jbbspec.jbb.Transaction", 90, $z0);
        $z0 = <spec.jbb.Transaction: boolean validRun>;
        return $z0;
    }

    public static void setOrderLineCount(int)
    {
        int count, $i0;
        long tid_setOrderLineCount;
        java.lang.Thread thread_setOrderLineCount;

        count := @parameter0: int;
        thread_setOrderLineCount = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setOrderLineCount = virtualinvoke thread_setOrderLineCount.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,int)>(76, tid_setOrderLineCount, "spec.jbbspec.jbb.Transaction", 94, count);
        <spec.jbb.Transaction: int aveOrderlines> = count;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeStatic(int,long,java.lang.String,int,int)>(76, tid_setOrderLineCount, "spec.jbbspec.jbb.Transaction", 95, $i0);
        $i0 = <spec.jbb.Transaction: int aveOrderlines>;
        $i0 = $i0 - 5;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,int)>(77, tid_setOrderLineCount, "spec.jbbspec.jbb.Transaction", 95, $i0);
        <spec.jbb.Transaction: int minOrderlines> = $i0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeStatic(int,long,java.lang.String,int,int)>(76, tid_setOrderLineCount, "spec.jbbspec.jbb.Transaction", 96, $i0);
        $i0 = <spec.jbb.Transaction: int aveOrderlines>;
        $i0 = $i0 + 5;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,int)>(78, tid_setOrderLineCount, "spec.jbbspec.jbb.Transaction", 96, $i0);
        <spec.jbb.Transaction: int maxOrderlines> = $i0;
        return;
    }

    public static void setSteadyState(boolean)
    {
        boolean onoff;
        long tid_setSteadyState;
        java.lang.Thread thread_setSteadyState;

        onoff := @parameter0: boolean;
        thread_setSteadyState = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setSteadyState = virtualinvoke thread_setSteadyState.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,boolean)>(56, tid_setSteadyState, "spec.jbbspec.jbb.Transaction", 100, onoff);
        <spec.jbb.Transaction: boolean steadyStateMem> = onoff;
        return;
    }

    public static void setLogWrite(boolean)
    {
        boolean onoff;
        long tid_setLogWrite;
        java.lang.Thread thread_setLogWrite;

        onoff := @parameter0: boolean;
        thread_setLogWrite = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setLogWrite = virtualinvoke thread_setLogWrite.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,boolean)>(79, tid_setLogWrite, "spec.jbbspec.jbb.Transaction", 104, onoff);
        <spec.jbb.Transaction: boolean enableLogWrite> = onoff;
        return;
    }

    public static void setValidation(boolean)
    {
        boolean onoff;
        long tid_setValidation;
        java.lang.Thread thread_setValidation;

        onoff := @parameter0: boolean;
        thread_setValidation = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setValidation = virtualinvoke thread_setValidation.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeStatic(int,long,java.lang.String,int,boolean)>(80, tid_setValidation, "spec.jbbspec.jbb.Transaction", 108, onoff);
        <spec.jbb.Transaction: boolean validationFlag> = onoff;
        return;
    }
}
