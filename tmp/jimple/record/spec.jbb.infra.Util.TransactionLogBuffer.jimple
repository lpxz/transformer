public class spec.jbb.infra.Util.TransactionLogBuffer extends java.lang.Object
{
    static final java.lang.String COPYRIGHT;
    public static final short alignLeft;
    public static final short alignCenter;
    public static final short alignRight;
    static java.io.FileOutputStream fout;
    static final float[] fround;
    static final double[] dround;
    static final float[] f10_nth;
    static final double[] d10_nth;
    static final java.lang.String fractionPad;
    char[][] screenBuf;
    byte[] buf;
    int[] lineEnd;
    java.util.GregorianCalendar calendar;
    int rows;
    int cols;

    static void <clinit>()
    {
        java.io.FileOutputStream $r0;
        java.io.FileDescriptor $r1;
        float[] $r2;
        double[] $r3;

        $r0 = new java.io.FileOutputStream;
        $r1 = <java.io.FileDescriptor: java.io.FileDescriptor out>;
        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r1);
        <spec.jbb.infra.Util.TransactionLogBuffer: java.io.FileOutputStream fout> = $r0;
        $r2 = newarray (float)[10];
        $r2[0] = 0.49F;
        $r2[1] = 0.049F;
        $r2[2] = 0.0049F;
        $r2[3] = 4.9E-4F;
        $r2[4] = 4.9E-5F;
        $r2[5] = 4.9E-6F;
        $r2[6] = 4.9E-7F;
        $r2[7] = 4.9E-8F;
        $r2[8] = 4.9E-9F;
        $r2[9] = 4.9E-10F;
        <spec.jbb.infra.Util.TransactionLogBuffer: float[] fround> = $r2;
        $r3 = newarray (double)[15];
        $r3[0] = 0.49;
        $r3[1] = 0.049;
        $r3[2] = 0.0049;
        $r3[3] = 4.9E-4;
        $r3[4] = 4.9E-5;
        $r3[5] = 4.9E-6;
        $r3[6] = 4.9E-7;
        $r3[7] = 4.9E-8;
        $r3[8] = 4.9E-9;
        $r3[9] = 4.9E-10;
        $r3[10] = 4.9E-11;
        $r3[11] = 4.9E-12;
        $r3[12] = 4.9E-13;
        $r3[13] = 4.9E-14;
        $r3[14] = 4.9E-15;
        <spec.jbb.infra.Util.TransactionLogBuffer: double[] dround> = $r3;
        $r2 = newarray (float)[10];
        $r2[0] = 1.0F;
        $r2[1] = 10.0F;
        $r2[2] = 100.0F;
        $r2[3] = 1000.0F;
        $r2[4] = 10000.0F;
        $r2[5] = 100000.0F;
        $r2[6] = 1000000.0F;
        $r2[7] = 1.0E7F;
        $r2[8] = 1.0E8F;
        $r2[9] = 1.0E9F;
        <spec.jbb.infra.Util.TransactionLogBuffer: float[] f10_nth> = $r2;
        $r3 = newarray (double)[20];
        $r3[0] = 1.0;
        $r3[1] = 10.0;
        $r3[2] = 100.0;
        $r3[3] = 1000.0;
        $r3[4] = 10000.0;
        $r3[5] = 100000.0;
        $r3[6] = 1000000.0;
        $r3[7] = 1.0E7;
        $r3[8] = 1.0E8;
        $r3[9] = 1.0E9;
        $r3[10] = 1.0E10;
        $r3[11] = 1.0E11;
        $r3[12] = 1.0E12;
        $r3[13] = 1.0E13;
        $r3[14] = 1.0E14;
        $r3[15] = 1.0E15;
        $r3[16] = 1.0E16;
        $r3[17] = 1.0E17;
        $r3[18] = 1.0E18;
        $r3[19] = 1.0E19;
        <spec.jbb.infra.Util.TransactionLogBuffer: double[] d10_nth> = $r3;
        return;
    }

    public void <init>()
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int y, x, $i0, $i1;
        java.util.GregorianCalendar $r0;
        byte[] $r1;
        char[][] $r2, $r4;
        int[] $r3, $r7;
        char[] $r5, $r6;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows> = 24;
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols> = 80;
        $r0 = new java.util.GregorianCalendar;
        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();
        this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar> = $r0;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        $i0 = $i0 + 1;
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $i0 = $i0 * $i1;
        $r1 = newarray (byte)[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: byte[] buf> = $r1;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $r2 = newarray (char[])[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf> = $r2;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $r3 = newarray (int)[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd> = $r3;
        y = 0;
        goto label3;

     label0:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        $r5 = newarray (char)[$i1];
        $r4[y] = $r5;
        x = 0;
        goto label2;

     label1:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r6 = $r4[y];
        $r6[x] = 32;
        x = x + 1;

     label2:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label1;

        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $r7[y] = -1;
        y = y + 1;

     label3:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label0;

        return;
    }

    public void <init>(int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int row, col, y, x, $i0, $i1;
        java.util.GregorianCalendar $r0;
        byte[] $r1;
        char[][] $r2, $r4;
        int[] $r3, $r7;
        char[] $r5, $r6;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        row := @parameter0: int;
        col := @parameter1: int;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows> = row;
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols> = col;
        $r0 = new java.util.GregorianCalendar;
        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();
        this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar> = $r0;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        $i0 = $i0 + 1;
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $i0 = $i0 * $i1;
        $r1 = newarray (byte)[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: byte[] buf> = $r1;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $r2 = newarray (char[])[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf> = $r2;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $r3 = newarray (int)[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd> = $r3;
        y = 0;
        goto label3;

     label0:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        $r5 = newarray (char)[$i1];
        $r4[y] = $r5;
        x = 0;
        goto label2;

     label1:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r6 = $r4[y];
        $r6[x] = 32;
        x = x + 1;

     label2:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label1;

        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $r7[y] = -1;
        y = y + 1;

     label3:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label0;

        return;
    }

    public void <init>(spec.jbb.infra.Util.TransactionLogBuffer)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this, master;
        int y, $i0, $i1, $i2;
        java.util.GregorianCalendar $r0;
        byte[] $r1;
        char[][] $r2, $r4, $r7;
        int[] $r3, $r8, $r9;
        char[] $r5, $r6;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        master := @parameter0: spec.jbb.infra.Util.TransactionLogBuffer;
        specialinvoke this.<java.lang.Object: void <init>()>();
        $i0 = master.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows> = $i0;
        $i0 = master.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols> = $i0;
        $r0 = new java.util.GregorianCalendar;
        specialinvoke $r0.<java.util.GregorianCalendar: void <init>()>();
        this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar> = $r0;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        $i0 = $i0 + 1;
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $i0 = $i0 * $i1;
        $r1 = newarray (byte)[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: byte[] buf> = $r1;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $r2 = newarray (char[])[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf> = $r2;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        $r3 = newarray (int)[$i0];
        this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd> = $r3;
        y = 0;
        goto label1;

     label0:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        $r5 = newarray (char)[$i1];
        $r4[y] = $r5;
        $r4 = master.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r6 = $r4[y];
        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r5 = $r7[y];
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, $r5, 0, $i2);
        $r8 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $r9 = master.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i1 = $r9[y];
        $r8[y] = $i1;
        y = y + 1;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label0;

        return;
    }

    public void clearBuffer()
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int y, x, $i0;
        char[][] $r0;
        char[] $r1;
        int[] $r2;
        long tid_clearBuffer;
        java.lang.Thread thread_clearBuffer;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        thread_clearBuffer = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_clearBuffer = virtualinvoke thread_clearBuffer.<java.lang.Thread: long getId()>();
        y = 0;
        goto label3;

     label0:
        x = 0;
        goto label2;

     label1:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 84, tid_clearBuffer, "spec.jbb.infra.Util.TransactionLogBuffer", 166, x, 32);
        $r1[x] = 32;
        x = x + 1;

     label2:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label1;

        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 18, tid_clearBuffer, "spec.jbb.infra.Util.TransactionLogBuffer", 169, y, -1);
        $r2[y] = -1;
        y = y + 1;

     label3:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label0;

        return;
    }

    private final void privSubstring(java.lang.String, int, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String s;
        int x, y, off, len, slen, i, $i0, $i1, $i2;
        char[][] $r0, $r2;
        char[] $r1, $r3;
        long tid_privSubstring;
        java.lang.Thread thread_privSubstring;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        s := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        off := @parameter3: int;
        len := @parameter4: int;
        thread_privSubstring = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privSubstring = virtualinvoke thread_privSubstring.<java.lang.Thread: long getId()>();
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        $i0 = $i0 - off;
        if len <= $i0 goto label0;

        $i1 = virtualinvoke s.<java.lang.String: int length()>();
        slen = $i1 - off;
        goto label1;

     label0:
        slen = len;

     label1:
        $i2 = off + slen;
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>(off, $i2, $r1, x);
        if slen >= len goto label4;

        i = x + slen;
        goto label3;

     label2:
        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r3 = $r2[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r3, 84, tid_privSubstring, "spec.jbb.infra.Util.TransactionLogBuffer", 187, i, 32);
        $r3[i] = 32;
        i = i + 1;

     label3:
        $i0 = x + len;
        if i < $i0 goto label2;

     label4:
        return;
    }

    public void putSubstring(java.lang.String, int, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String s, $r2, $r3;
        int x, y, off, len, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        int[] $r4, $r5;
        long tid_putSubstring;
        java.lang.Thread thread_putSubstring;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        s := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        off := @parameter3: int;
        len := @parameter4: int;
        thread_putSubstring = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putSubstring = virtualinvoke thread_putSubstring.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privSubstring(java.lang.String,int,int,int,int)>(s, x, y, off, len);
        $i1 = x + len;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r4, 18, tid_putSubstring, "spec.jbb.infra.Util.TransactionLogBuffer", 214, y, $i2);
        $i2 = $r4[y];
        if $i1 <= $i2 goto label11;

        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 18, tid_putSubstring, "spec.jbb.infra.Util.TransactionLogBuffer", 215, y, $i0);
        $r5[y] = $i0;

     label11:
        return;
    }

    private final void privText(java.lang.String, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String s;
        int x, y, len, slen, i, $i0;
        char[][] $r0, $r2;
        char[] $r1, $r3;
        long tid_privText;
        java.lang.Thread thread_privText;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        s := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_privText = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privText = virtualinvoke thread_privText.<java.lang.Thread: long getId()>();
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        if len <= $i0 goto label0;

        slen = virtualinvoke s.<java.lang.String: int length()>();
        goto label1;

     label0:
        slen = len;

     label1:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>(0, slen, $r1, x);
        if slen >= len goto label4;

        i = x + slen;
        goto label3;

     label2:
        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r3 = $r2[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r3, 84, tid_privText, "spec.jbb.infra.Util.TransactionLogBuffer", 237, i, 32);
        $r3[i] = 32;
        i = i + 1;

     label3:
        $i0 = x + len;
        if i < $i0 goto label2;

     label4:
        return;
    }

    public void putText(java.lang.String, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String s, $r2, $r3;
        int x, y, len, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        int[] $r4, $r5;
        long tid_putText;
        java.lang.Thread thread_putText;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        s := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putText = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putText = virtualinvoke thread_putText.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privText(java.lang.String,int,int,int)>(s, x, y, len);
        $i1 = x + len;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r4, 18, tid_putText, "spec.jbb.infra.Util.TransactionLogBuffer", 264, y, $i2);
        $i2 = $r4[y];
        if $i1 <= $i2 goto label11;

        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 18, tid_putText, "spec.jbb.infra.Util.TransactionLogBuffer", 265, y, $i0);
        $r5[y] = $i0;

     label11:
        return;
    }

    private final void privText(java.lang.String, int, int, int, short)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String s;
        int x, y, len, slen, first, i, $i0;
        short align;
        char[][] $r0, $r2;
        char[] $r1, $r3;
        long tid_privText;
        java.lang.Thread thread_privText;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        s := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        align := @parameter4: short;
        thread_privText = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privText = virtualinvoke thread_privText.<java.lang.Thread: long getId()>();
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        if len <= $i0 goto label2;

        slen = virtualinvoke s.<java.lang.String: int length()>();
        if align != 2 goto label0;

        $i0 = len - slen;
        first = x + $i0;
        goto label3;

     label0:
        if align != 1 goto label1;

        $i0 = len - slen;
        $i0 = $i0 / 2;
        first = x + $i0;
        goto label3;

     label1:
        first = x;
        goto label3;

     label2:
        slen = len;
        first = x;

     label3:
        if first <= x goto label6;

        i = x;
        goto label5;

     label4:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 84, tid_privText, "spec.jbb.infra.Util.TransactionLogBuffer", 300, i, 32);
        $r1[i] = 32;
        i = i + 1;

     label5:
        if i < first goto label4;

     label6:
        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r3 = $r2[y];
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>(0, slen, $r3, first);
        if slen >= len goto label9;

        i = first + slen;
        goto label8;

     label7:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 84, tid_privText, "spec.jbb.infra.Util.TransactionLogBuffer", 308, i, 32);
        $r1[i] = 32;
        i = i + 1;

     label8:
        $i0 = x + len;
        if i < $i0 goto label7;

     label9:
        return;
    }

    public void putText(java.lang.String, int, int, int, short)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String s, $r2, $r3;
        int x, y, len, $i0, $i1, $i2;
        short align;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        int[] $r4, $r5;
        long tid_putText;
        java.lang.Thread thread_putText;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        s := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        align := @parameter4: short;
        thread_putText = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putText = virtualinvoke thread_putText.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privText(java.lang.String,int,int,int,short)>(s, x, y, len, align);
        $i1 = x + len;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r4, 18, tid_putText, "spec.jbb.infra.Util.TransactionLogBuffer", 335, y, $i2);
        $i2 = $r4[y];
        if $i1 <= $i2 goto label11;

        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 18, tid_putText, "spec.jbb.infra.Util.TransactionLogBuffer", 336, y, $i0);
        $r5[y] = $i0;

     label11:
        return;
    }

    private final void privCharFill(char, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        char c;
        int x, y, len, i, $i0;
        char[][] $r0;
        char[] $r1;
        long tid_privCharFill;
        java.lang.Thread thread_privCharFill;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        c := @parameter0: char;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_privCharFill = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privCharFill = virtualinvoke thread_privCharFill.<java.lang.Thread: long getId()>();
        i = x;
        goto label1;

     label0:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>($r1, 84, tid_privCharFill, "spec.jbb.infra.Util.TransactionLogBuffer", 348, i, c);
        $r1[i] = c;
        i = i + 1;

     label1:
        $i0 = x + len;
        if i < $i0 goto label0;

        return;
    }

    public void putCharFill(char, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        char c;
        int x, y, len, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        int[] $r4, $r5;
        long tid_putCharFill;
        java.lang.Thread thread_putCharFill;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        c := @parameter0: char;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putCharFill = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putCharFill = virtualinvoke thread_putCharFill.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(c, x, y, len);
        $i1 = x + len;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r4, 18, tid_putCharFill, "spec.jbb.infra.Util.TransactionLogBuffer", 374, y, $i2);
        $i2 = $r4[y];
        if $i1 <= $i2 goto label11;

        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 18, tid_putCharFill, "spec.jbb.infra.Util.TransactionLogBuffer", 375, y, $i0);
        $r5[y] = $i0;

     label11:
        return;
    }

    private final void privChar(char, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        char c;
        int x, y;
        char[][] $r0;
        char[] $r1;
        long tid_privChar;
        java.lang.Thread thread_privChar;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        c := @parameter0: char;
        x := @parameter1: int;
        y := @parameter2: int;
        thread_privChar = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privChar = virtualinvoke thread_privChar.<java.lang.Thread: long getId()>();
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>($r1, 84, tid_privChar, "spec.jbb.infra.Util.TransactionLogBuffer", 385, x, c);
        $r1[x] = c;
        return;
    }

    public void putChar(char, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        char c;
        int x, y, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        char[][] $r4;
        char[] $r5;
        int[] $r6, $r7;
        long tid_putChar;
        java.lang.Thread thread_putChar;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        c := @parameter0: char;
        x := @parameter1: int;
        y := @parameter2: int;
        thread_putChar = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putChar = virtualinvoke thread_putChar.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r5 = $r4[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>($r5, 84, tid_putChar, "spec.jbb.infra.Util.TransactionLogBuffer", 401, x, c);
        $r5[x] = c;
        $i1 = x + 1;
        $r6 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 18, tid_putChar, "spec.jbb.infra.Util.TransactionLogBuffer", 402, y, $i2);
        $i2 = $r6[y];
        if $i1 <= $i2 goto label10;

        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r7, 18, tid_putChar, "spec.jbb.infra.Util.TransactionLogBuffer", 403, y, $i0);
        $r7[y] = $i0;

     label10:
        return;
    }

    private final int privIntLeadingZeros(int, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int iz, x, y, len, i, dividend, remainder, $i0, $i1, $i2;
        char[] screenLine;
        char[][] $r0;
        char $c3;
        long tid_privIntLeadingZeros;
        java.lang.Thread thread_privIntLeadingZeros;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        iz := @parameter0: int;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_privIntLeadingZeros = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privIntLeadingZeros = virtualinvoke thread_privIntLeadingZeros.<java.lang.Thread: long getId()>();
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        screenLine = $r0[y];
        $i0 = x + len;
        i = $i0 - 1;
        goto label1;

     label0:
        dividend = iz / 10;
        $i1 = dividend * 10;
        remainder = iz - $i1;
        iz = dividend;
        $i2 = 48 + remainder;
        $c3 = (char) $i2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privIntLeadingZeros, "spec.jbb.infra.Util.TransactionLogBuffer", 418, i, $c3);
        screenLine[i] = $c3;
        i = i + -1;

     label1:
        if i >= x goto label0;

        return iz;
    }

    private final int privInt(int, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int iz, x, y, len, i, dividend, remainder, $i0, $i1, $i2;
        char sign, $c3;
        char[] screenLine;
        char[][] $r0;
        long tid_privInt;
        java.lang.Thread thread_privInt;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        iz := @parameter0: int;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_privInt = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privInt = virtualinvoke thread_privInt.<java.lang.Thread: long getId()>();
        sign = 32;
        if iz >= 0 goto label0;

        iz = neg iz;
        sign = 45;

     label0:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        screenLine = $r0[y];
        $i0 = x + len;
        i = $i0 - 1;

     label1:
        dividend = iz / 10;
        $i1 = dividend * 10;
        remainder = iz - $i1;
        iz = dividend;
        $i2 = 48 + remainder;
        $c3 = (char) $i2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privInt, "spec.jbb.infra.Util.TransactionLogBuffer", 439, i, $c3);
        screenLine[i] = $c3;
        i = i + -1;
        if i < x goto label2;

        if iz != 0 goto label1;

     label2:
        if i < x goto label3;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privInt, "spec.jbb.infra.Util.TransactionLogBuffer", 444, i, sign);
        screenLine[i] = sign;
        i = i + -1;
        goto label5;

     label3:
        if sign != 45 goto label5;

        iz = -1;
        goto label5;

     label4:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(screenLine, 84, tid_privInt, "spec.jbb.infra.Util.TransactionLogBuffer", 453, i, 32);
        screenLine[i] = 32;
        i = i + -1;

     label5:
        if i >= x goto label4;

        return iz;
    }

    private final long privLong(long, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        long iz, dividend, remainder, $l2, tid_privLong;
        int x, y, len, i, $i1, $i3;
        char sign, $c4;
        char[] screenLine;
        byte $b0;
        char[][] $r0;
        java.lang.Thread thread_privLong;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        iz := @parameter0: long;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_privLong = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privLong = virtualinvoke thread_privLong.<java.lang.Thread: long getId()>();
        sign = 32;
        $b0 = iz cmp 0L;
        if $b0 >= 0 goto label0;

        iz = neg iz;
        sign = 45;

     label0:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        screenLine = $r0[y];
        $i1 = x + len;
        i = $i1 - 1;

     label1:
        dividend = iz / 10L;
        $l2 = dividend * 10L;
        remainder = iz - $l2;
        iz = dividend;
        $l2 = 48L + remainder;
        $i3 = (int) $l2;
        $c4 = (char) $i3;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privLong, "spec.jbb.infra.Util.TransactionLogBuffer", 475, i, $c4);
        screenLine[i] = $c4;
        i = i + -1;
        if i < x goto label2;

        $b0 = iz cmp 0L;
        if $b0 != 0 goto label1;

     label2:
        if i < x goto label3;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privLong, "spec.jbb.infra.Util.TransactionLogBuffer", 480, i, sign);
        screenLine[i] = sign;
        i = i + -1;
        goto label5;

     label3:
        if sign != 45 goto label5;

        iz = -1L;
        goto label5;

     label4:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(screenLine, 84, tid_privLong, "spec.jbb.infra.Util.TransactionLogBuffer", 489, i, 32);
        screenLine[i] = 32;
        i = i + -1;

     label5:
        if i >= x goto label4;

        return iz;
    }

    private final int privInt(int, char, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int iz, x, y, len, i, dividend, remainder, $i0, $i1, $i2;
        char sign, $c3;
        char[] screenLine;
        char[][] $r0;
        long tid_privInt;
        java.lang.Thread thread_privInt;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        iz := @parameter0: int;
        sign := @parameter1: char;
        x := @parameter2: int;
        y := @parameter3: int;
        len := @parameter4: int;
        thread_privInt = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_privInt = virtualinvoke thread_privInt.<java.lang.Thread: long getId()>();
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        screenLine = $r0[y];
        $i0 = x + len;
        i = $i0 - 1;

     label0:
        dividend = iz / 10;
        $i1 = dividend * 10;
        remainder = iz - $i1;
        iz = dividend;
        $i2 = 48 + remainder;
        $c3 = (char) $i2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privInt, "spec.jbb.infra.Util.TransactionLogBuffer", 504, i, $c3);
        screenLine[i] = $c3;
        i = i + -1;
        if i < x goto label1;

        if iz != 0 goto label0;

     label1:
        if i < x goto label2;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(screenLine, 84, tid_privInt, "spec.jbb.infra.Util.TransactionLogBuffer", 509, i, sign);
        screenLine[i] = sign;
        i = i + -1;
        goto label4;

     label2:
        if sign == 32 goto label4;

        iz = -1;
        goto label4;

     label3:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(screenLine, 84, tid_privInt, "spec.jbb.infra.Util.TransactionLogBuffer", 518, i, 32);
        screenLine[i] = 32;
        i = i + -1;

     label4:
        if i >= x goto label3;

        return iz;
    }

    public void putInt(int, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int i, x, y, len, $i0, $i1, $i2, i;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        int[] $r4, $r5;
        long tid_putInt;
        java.lang.Thread thread_putInt;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        i := @parameter0: int;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putInt = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putInt = virtualinvoke thread_putInt.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        if len > 0 goto label11;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length  must be greater than 0 was");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label11:
        i = specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privInt(int,int,int,int)>(i, x, y, len);
        if i == 0 goto label12;

        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(42, x, y, len);

     label12:
        $i1 = x + len;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r4, 18, tid_putInt, "spec.jbb.infra.Util.TransactionLogBuffer", 555, y, $i2);
        $i2 = $r4[y];
        if $i1 <= $i2 goto label13;

        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 18, tid_putInt, "spec.jbb.infra.Util.TransactionLogBuffer", 556, y, $i0);
        $r5[y] = $i0;

     label13:
        return;
    }

    public void putLong(long, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        long l, l, tid_putLong;
        int x, y, len, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        byte $b3;
        int[] $r4, $r5;
        java.lang.Thread thread_putLong;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        l := @parameter0: long;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putLong = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putLong = virtualinvoke thread_putLong.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        if len > 0 goto label11;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length  must be greater than 0 was");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label11:
        l = specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: long privLong(long,int,int,int)>(l, x, y, len);
        $b3 = l cmp 0L;
        if $b3 == 0 goto label12;

        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(42, x, y, len);

     label12:
        $i1 = x + len;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r4, 18, tid_putLong, "spec.jbb.infra.Util.TransactionLogBuffer", 598, y, $i2);
        $i2 = $r4[y];
        if $i1 <= $i2 goto label13;

        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r5, 18, tid_putLong, "spec.jbb.infra.Util.TransactionLogBuffer", 599, y, $i0);
        $r5[y] = $i0;

     label13:
        return;
    }

    public void putDouble(java.lang.String, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String d;
        int x, y, len;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        d := @parameter0: java.lang.String;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        virtualinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void putText(java.lang.String,int,int,int,short)>(d, x, y, len, 2);
        return;
    }

    public void putDouble(double, int, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        double d, absolute, $d0, $d1;
        int x, y, len, frac, int_part, fract_part, i, temp, $i0, $i1, $i2;
        boolean negative, $z0, $z1;
        spec.jbb.infra.Util.ScreenException e, $r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        byte $b3;
        double[] $r4;
        char[][] $r5;
        char[] $r6;
        long $l4, tid_putDouble;
        int[] $r7, $r8;
        java.lang.Thread thread_putDouble;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        d := @parameter0: double;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        frac := @parameter4: int;
        thread_putDouble = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putDouble = virtualinvoke thread_putDouble.<java.lang.Thread: long getId()>();
        negative = 0;
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        if frac >= 0 goto label11;

        frac = 0;
        goto label12;

     label11:
        if frac <= 19 goto label12;

        frac = 19;

     label12:
        $i2 = len - 1;
        if frac < $i2 goto label13;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: factional digits ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(frac);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too large for field length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label13:
        $b3 = d cmpg 0.0;
        if $b3 >= 0 goto label14;

        absolute = neg d;
        goto label15;

     label14:
        absolute = d;

     label15:
        int_part = (int) absolute;
        $d0 = (double) int_part;
        $d1 = absolute - $d0;
        $r4 = <spec.jbb.infra.Util.TransactionLogBuffer: double[] d10_nth>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r4, 71, tid_putDouble, "spec.jbb.infra.Util.TransactionLogBuffer", 672, frac, $d0);
        $d0 = $r4[frac];
        $d1 = $d1 * $d0;
        $d1 = $d1 + 0.5;
        fract_part = (int) $d1;
        $b3 = d cmpg 0.0;
        if $b3 >= 0 goto label16;

        int_part = neg int_part;
        negative = 1;

     label16:
        $i1 = len - frac;
        i = $i1 - 1;
        $i0 = x + i;
        $i0 = $i0 + 1;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>(fract_part, $i0, y, frac);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r6 = $r5[y];
        $i2 = x + i;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 84, tid_putDouble, "spec.jbb.infra.Util.TransactionLogBuffer", 682, $i2, 46);
        $r6[$i2] = 46;
        if i <= 0 goto label17;

        temp = specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privInt(int,int,int,int)>(int_part, x, y, i);
        $l4 = (long) temp;
        $b3 = $l4 cmp 0L;
        if $b3 == 0 goto label18;

        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(42, x, y, len);
        goto label18;

     label17:
        if negative == 0 goto label18;

        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(42, x, y, len);

     label18:
        $i1 = x + len;
        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r7, 18, tid_putDouble, "spec.jbb.infra.Util.TransactionLogBuffer", 698, y, $i2);
        $i2 = $r7[y];
        if $i1 <= $i2 goto label19;

        $r8 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r8, 18, tid_putDouble, "spec.jbb.infra.Util.TransactionLogBuffer", 699, y, $i0);
        $r8[y] = $i0;

     label19:
        return;
    }

    public void putDate(java.util.Date, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.util.Date d;
        int x, y, len, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        java.util.GregorianCalendar $r4, $r5;
        int[] $r6, $r7;
        long tid_putDate;
        java.lang.Thread thread_putDate;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        d := @parameter0: java.util.Date;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putDate = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putDate = virtualinvoke thread_putDate.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        if len >= 10 goto label11;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small for date");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label11:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        virtualinvoke $r4.<java.util.GregorianCalendar: void setTime(java.util.Date)>(d);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        $i2 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(5);
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>($i2, x, y, 2);
        $i0 = x + 2;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privChar(char,int,int)>(45, $i0, y);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        $i2 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(2);
        $i2 = $i2 + 1;
        $i0 = x + 3;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>($i2, $i0, y, 2);
        $i0 = x + 5;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privChar(char,int,int)>(45, $i0, y);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        $i2 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(1);
        $i0 = x + 6;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>($i2, $i0, y, 4);
        $i1 = x + len;
        $r6 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 18, tid_putDate, "spec.jbb.infra.Util.TransactionLogBuffer", 741, y, $i2);
        $i2 = $r6[y];
        if $i1 <= $i2 goto label12;

        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r7, 18, tid_putDate, "spec.jbb.infra.Util.TransactionLogBuffer", 742, y, $i0);
        $r7[y] = $i0;

     label12:
        return;
    }

    public void putTime(java.util.Date, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.util.Date d;
        int x, y, len, $i0, $i1, $i2;
        spec.jbb.infra.Util.ScreenException e, $r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        java.util.GregorianCalendar $r4, $r5;
        int[] $r6, $r7;
        long tid_putTime;
        java.lang.Thread thread_putTime;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        d := @parameter0: java.util.Date;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putTime = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putTime = virtualinvoke thread_putTime.<java.lang.Thread: long getId()>();
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        if len >= 8 goto label11;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too small for time");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label11:
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        virtualinvoke $r4.<java.util.GregorianCalendar: void setTime(java.util.Date)>(d);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        $i2 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(10);
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>($i2, x, y, 2);
        $i0 = x + 2;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privChar(char,int,int)>(58, $i0, y);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        $i2 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(12);
        $i0 = x + 3;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>($i2, $i0, y, 2);
        $i0 = x + 5;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privChar(char,int,int)>(58, $i0, y);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: java.util.GregorianCalendar calendar>;
        $i2 = virtualinvoke $r5.<java.util.GregorianCalendar: int get(int)>(13);
        $i0 = x + 6;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>($i2, $i0, y, 2);
        $i1 = x + len;
        $r6 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 18, tid_putTime, "spec.jbb.infra.Util.TransactionLogBuffer", 784, y, $i2);
        $i2 = $r6[y];
        if $i1 <= $i2 goto label12;

        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r7, 18, tid_putTime, "spec.jbb.infra.Util.TransactionLogBuffer", 785, y, $i0);
        $r7[y] = $i0;

     label12:
        return;
    }

    public void putDollars(java.math.BigDecimal, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.math.BigDecimal d;
        int x, y, len, size, $i0, $i1, $i2;
        java.lang.String dollarValue;
        char[][] $r0;
        char[] $r1;
        int[] $r2, $r3;
        long tid_putDollars;
        java.lang.Thread thread_putDollars;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        d := @parameter0: java.math.BigDecimal;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putDollars = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putDollars = virtualinvoke thread_putDollars.<java.lang.Thread: long getId()>();
        dollarValue = virtualinvoke d.<java.math.BigDecimal: java.lang.String toString()>();
        size = virtualinvoke dollarValue.<java.lang.String: int length()>();
        $i0 = virtualinvoke d.<java.math.BigDecimal: int signum()>();
        if $i0 <= 0 goto label0;

        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r1 = $r0[y];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 84, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 793, x, 36);
        $r1[x] = 36;
        $i1 = x + 1;
        virtualinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void putText(java.lang.String,int,int,int,short)>(dollarValue, $i1, y, size, 2);
        goto label1;

     label0:
        virtualinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void putText(java.lang.String,int,int,int,short)>(dollarValue, x, y, size, 2);

     label1:
        $i0 = x + len;
        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 18, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 799, y, $i2);
        $i2 = $r2[y];
        if $i0 <= $i2 goto label2;

        $r3 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i1 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r3, 18, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 800, y, $i1);
        $r3[y] = $i1;

     label2:
        return;
    }

    public void putDollars(double, int, int, int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        double d, absolute, $d0, $d1;
        int x, y, len, frac, int_part, fract_part, i, temp, $i0, $i1, $i2;
        boolean negative, $z0, $z1;
        spec.jbb.infra.Util.ScreenException e, $r0;
        char sign;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r3;
        byte $b3;
        double[] $r4;
        char[][] $r5;
        char[] $r6;
        long $l4, tid_putDollars;
        int[] $r7, $r8;
        java.lang.Thread thread_putDollars;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        d := @parameter0: double;
        x := @parameter1: int;
        y := @parameter2: int;
        len := @parameter3: int;
        thread_putDollars = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_putDollars = virtualinvoke thread_putDollars.<java.lang.Thread: long getId()>();
        frac = 2;
        negative = 0;
        if y >= 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $z1 = 1;
        goto label3;

     label2:
        $z1 = 0;

     label3:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label4;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: row ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(y);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label4:
        if x >= 0 goto label5;

        $z0 = 1;
        goto label6;

     label5:
        $z0 = 0;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if x < $i0 goto label7;

        $z1 = 1;
        goto label8;

     label7:
        $z1 = 0;

     label8:
        $z0 = $z0 | $z1;
        if $z0 == 0 goto label9;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: column ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(x);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" out of range");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label9:
        $i1 = x + len;
        $i2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int cols>;
        if $i1 <= $i2 goto label10;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds left margin");
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label10:
        $i2 = len - 1;
        if frac < $i2 goto label11;

        $r0 = new spec.jbb.infra.Util.ScreenException;
        $r1 = new java.lang.StringBuilder;
        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Screen: factional digits ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(frac);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" too large for field length ");
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(len);
        $r1 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();
        specialinvoke $r0.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>($r3);
        e = $r0;
        throw e;

     label11:
        $b3 = d cmpg 0.0;
        if $b3 >= 0 goto label12;

        absolute = neg d;
        goto label13;

     label12:
        absolute = d;

     label13:
        int_part = (int) absolute;
        $d0 = (double) int_part;
        $d1 = absolute - $d0;
        $r4 = <spec.jbb.infra.Util.TransactionLogBuffer: double[] d10_nth>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r4, 71, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 852, frac, $d0);
        $d0 = $r4[frac];
        $d1 = $d1 * $d0;
        $d1 = $d1 + 0.5;
        fract_part = (int) $d1;
        if fract_part <= 99 goto label14;

        int_part = int_part + 1;
        fract_part = fract_part + -100;

     label14:
        $b3 = d cmpg 0.0;
        if $b3 >= 0 goto label15;

        int_part = neg int_part;
        negative = 1;

     label15:
        $i1 = len - frac;
        i = $i1 - 1;
        $i0 = x + i;
        $i0 = $i0 + 1;
        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privIntLeadingZeros(int,int,int,int)>(fract_part, $i0, y, frac);
        $r5 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r6 = $r5[y];
        $i2 = x + i;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r6, 84, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 870, $i2, 46);
        $r6[$i2] = 46;
        if i <= 0 goto label17;

        sign = 36;
        if negative == 0 goto label16;

        sign = 45;

     label16:
        temp = specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: int privInt(int,char,int,int,int)>(int_part, sign, x, y, i);
        $l4 = (long) temp;
        $b3 = $l4 cmp 0L;
        if $b3 == 0 goto label18;

        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(42, x, y, len);
        goto label18;

     label17:
        if negative == 0 goto label18;

        specialinvoke this.<spec.jbb.infra.Util.TransactionLogBuffer: void privCharFill(char,int,int,int)>(42, x, y, len);

     label18:
        $i1 = x + len;
        $r7 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r7, 18, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 889, y, $i2);
        $i2 = $r7[y];
        if $i1 <= $i2 goto label19;

        $r8 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        $i0 = x + len;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r8, 18, tid_putDollars, "spec.jbb.infra.Util.TransactionLogBuffer", 890, y, $i0);
        $r8[y] = $i0;

     label19:
        return;
    }

    public java.lang.String getLine(int)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int line;
        java.lang.String $r0;
        char[][] $r1;
        char[] $r2;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        line := @parameter0: int;
        $r0 = new java.lang.String;
        $r1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        $r2 = $r1[line];
        specialinvoke $r0.<java.lang.String: void <init>(char[])>($r2);
        return $r0;
    }

    public int getLineCount()
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int $i0;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        return $i0;
    }

    public void display(java.io.PrintStream)
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.io.PrintStream out, $r4;
        int y, len, $i0;
        char[] line;
        java.lang.String sline, $r2, $r6, $r7;
        java.lang.Exception e, $r3;
        spec.jbb.infra.Util.ScreenException except, $r8;
        int[] $r0;
        char[][] $r1;
        java.lang.StringBuilder $r5;
        long tid_display;
        java.lang.Thread thread_display;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        out := @parameter0: java.io.PrintStream;
        thread_display = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_display = virtualinvoke thread_display.<java.lang.Thread: long getId()>();

     label0:
        y = 0;
        goto label4;

     label1:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r0, 18, tid_display, "spec.jbb.infra.Util.TransactionLogBuffer", 907, y, len);
        len = $r0[y];
        if len <= 0 goto label2;

        $r1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        line = $r1[y];
        $r2 = new java.lang.String;
        specialinvoke $r2.<java.lang.String: void <init>(char[],int,int)>(line, 0, len);
        sline = $r2;
        virtualinvoke out.<java.io.PrintStream: void println(java.lang.String)>(sline);
        goto label3;

     label2:
        virtualinvoke out.<java.io.PrintStream: void println()>();

     label3:
        y = y + 1;

     label4:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label1;

        virtualinvoke out.<java.io.PrintStream: void flush()>();

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;
        e = $r3;
        $r4 = <java.lang.System: java.io.PrintStream out>;
        $r5 = new java.lang.StringBuilder;
        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("IOException:");
        $r6 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();
        $r5 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7);
        virtualinvoke e.<java.lang.Exception: void printStackTrace()>();
        $r8 = new spec.jbb.infra.Util.ScreenException;
        specialinvoke $r8.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>("file write error");
        except = $r8;
        throw except;

     label7:
        return;

        catch java.lang.Exception from label0 to label5 with label6;
    }

    public java.lang.String[] validate()
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        java.lang.String[] sline;
        int y, len, $i0, $i1;
        char[] line;
        java.lang.String $r0;
        int[] $r1;
        char[][] $r2;
        long tid_validate;
        java.lang.Thread thread_validate;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        thread_validate = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_validate = virtualinvoke thread_validate.<java.lang.Thread: long getId()>();
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        sline = newarray (java.lang.String)[$i0];
        y = 0;
        goto label3;

     label0:
        $r1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r1, 18, tid_validate, "spec.jbb.infra.Util.TransactionLogBuffer", 935, y, len);
        len = $r1[y];
        if len <= 0 goto label1;

        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        line = $r2[y];
        $r0 = new java.lang.String;
        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>(line, 0, len);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(sline, 23, tid_validate, "spec.jbb.infra.Util.TransactionLogBuffer", 938, y, $r0);
        sline[y] = $r0;
        goto label2;

     label1:
        $r0 = new java.lang.String;
        specialinvoke $r0.<java.lang.String: void <init>(java.lang.String)>("");
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,java.lang.Object)>(sline, 23, tid_validate, "spec.jbb.infra.Util.TransactionLogBuffer", 941, y, $r0);
        sline[y] = $r0;

     label2:
        y = y + 1;

     label3:
        $i1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i1 goto label0;

        return sline;
    }

    public void display()
    {
        spec.jbb.infra.Util.TransactionLogBuffer this;
        int bIndex, y, len, x, $i0;
        char[] line;
        java.io.IOException e, $r5;
        spec.jbb.infra.Util.ScreenException except, $r10;
        int[] $r0;
        char[][] $r1;
        byte[] $r2, $r4;
        char $c1;
        byte $b2;
        java.io.FileOutputStream $r3;
        java.io.PrintStream $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r8, $r9;
        java.lang.Object localthislockdisplay;
        java.lang.Throwable throwableLocal10;
        long tid_display;
        java.lang.Thread thread_display;

        this := @this: spec.jbb.infra.Util.TransactionLogBuffer;
        thread_display = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_display = virtualinvoke thread_display.<java.lang.Thread: long getId()>();
        localthislockdisplay = this;

     label0:
        entermonitor localthislockdisplay;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockdisplay, 0, tid_display);

     label1:
        bIndex = 0;
        y = 0;
        goto label6;

     label2:
        $r0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int[] lineEnd>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r0, 18, tid_display, "spec.jbb.infra.Util.TransactionLogBuffer", 955, y, len);
        len = $r0[y];
        if len <= 0 goto label5;

        $r1 = this.<spec.jbb.infra.Util.TransactionLogBuffer: char[][] screenBuf>;
        line = $r1[y];
        x = 0;
        goto label4;

     label3:
        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: byte[] buf>;
        $i0 = bIndex;
        bIndex = bIndex + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(line, 84, tid_display, "spec.jbb.infra.Util.TransactionLogBuffer", 959, x, $c1);
        $c1 = line[x];
        $b2 = (byte) $c1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,byte)>($r2, 59, tid_display, "spec.jbb.infra.Util.TransactionLogBuffer", 959, $i0, $b2);
        $r2[$i0] = $b2;
        x = x + 1;

     label4:
        if x < len goto label3;

     label5:
        $r2 = this.<spec.jbb.infra.Util.TransactionLogBuffer: byte[] buf>;
        $i0 = bIndex;
        bIndex = bIndex + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>($r2, 59, tid_display, "spec.jbb.infra.Util.TransactionLogBuffer", 964, $i0, 10);
        $r2[$i0] = 10;
        y = y + 1;

     label6:
        $i0 = this.<spec.jbb.infra.Util.TransactionLogBuffer: int rows>;
        if y < $i0 goto label2;

        $r3 = <spec.jbb.infra.Util.TransactionLogBuffer: java.io.FileOutputStream fout>;
        $r4 = this.<spec.jbb.infra.Util.TransactionLogBuffer: byte[] buf>;
        virtualinvoke $r3.<java.io.FileOutputStream: void write(byte[],int,int)>($r4, 0, bIndex);

     label7:
        goto label9;

     label8:
        $r5 := @caughtexception;
        e = $r5;
        $r6 = <java.lang.System: java.io.PrintStream out>;
        $r7 = new java.lang.StringBuilder;
        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("IOException:");
        $r8 = virtualinvoke e.<java.io.IOException: java.lang.String getMessage()>();
        $r7 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);
        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9);
        virtualinvoke e.<java.io.IOException: void printStackTrace()>();
        $r10 = new spec.jbb.infra.Util.ScreenException;
        specialinvoke $r10.<spec.jbb.infra.Util.ScreenException: void <init>(java.lang.String)>("screen write error");
        except = $r10;
        throw except;

     label9:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdisplay, 0, tid_display);
        exitmonitor localthislockdisplay;
        goto label10;

     label10:
        return;

     label11:
        throwableLocal10 := @caughtexception;

     label12:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockdisplay, 0, tid_display);
        exitmonitor localthislockdisplay;

     label13:
        throw throwableLocal10;

        catch java.lang.Throwable from label0 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.io.IOException from label1 to label7 with label8;
    }
}
