public class spec.reporter.Table extends java.lang.Object
{
    static final java.lang.String COPYRIGHT;
    private static java.lang.String tablePrefix;
    private boolean free;
    private java.lang.String heading;
    private java.util.Vector items;
    private spec.reporter.ReportProps props;
    private spec.reporter.ReportProps titles;

    static void <clinit>()
    {
        <spec.reporter.Table: java.lang.String tablePrefix> = "<TABLE WIDTH=\"100%\" BORDER=1 CELLSPACING=2 CELLPADDING=0><TR><TH COLSPAN=2>\n";
        return;
    }

    void <init>(java.lang.String, java.io.BufferedReader, spec.reporter.ReportProps, spec.reporter.ReportProps, boolean)
    {
        spec.reporter.Table this;
        java.lang.String h, line, $r2;
        java.io.BufferedReader in;
        spec.reporter.ReportProps props, titles;
        boolean free, $z0;
        java.io.IOException l7, $r3;
        java.util.Vector $r0, $r1;

        this := @this: spec.reporter.Table;
        h := @parameter0: java.lang.String;
        in := @parameter1: java.io.BufferedReader;
        props := @parameter2: spec.reporter.ReportProps;
        titles := @parameter3: spec.reporter.ReportProps;
        free := @parameter4: boolean;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<spec.reporter.Table: java.lang.String heading> = h;
        this.<spec.reporter.Table: spec.reporter.ReportProps props> = props;
        this.<spec.reporter.Table: spec.reporter.ReportProps titles> = titles;
        this.<spec.reporter.Table: boolean free> = free;
        $r0 = new java.util.Vector;
        specialinvoke $r0.<java.util.Vector: void <init>()>();
        this.<spec.reporter.Table: java.util.Vector items> = $r0;

     label0:
        goto label3;

     label1:
        $z0 = virtualinvoke line.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label2;

        goto label6;

     label2:
        $r1 = this.<spec.reporter.Table: java.util.Vector items>;
        virtualinvoke $r1.<java.util.Vector: void addElement(java.lang.Object)>(line);

     label3:
        $r2 = virtualinvoke in.<java.io.BufferedReader: java.lang.String readLine()>();
        line = $r2;
        if $r2 != null goto label1;

     label4:
        goto label6;

     label5:
        $r3 := @caughtexception;
        l7 = $r3;

     label6:
        return;

        catch java.io.IOException from label0 to label4 with label5;
    }

    private java.lang.String expandN(java.lang.String)
    {
        spec.reporter.Table this;
        java.lang.String s, $r1;
        java.lang.StringBuffer $r0, sb;
        char[] nb;
        boolean sub;
        int i, $i0, $i1, $i3;
        char $c2, $c4;
        long tid_expandN;
        java.lang.Thread thread_expandN;

        this := @this: spec.reporter.Table;
        s := @parameter0: java.lang.String;
        thread_expandN = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_expandN = virtualinvoke thread_expandN.<java.lang.Thread: long getId()>();
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        sb = $r0;
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        nb = newarray (char)[$i0];
        $i1 = lengthof nb;
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, nb, 0);
        sub = 0;
        i = 0;
        goto label3;

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(nb, 84, tid_expandN, "spec.reporter.Table", 79, i, $c2);
        $c2 = nb[i];
        if $c2 != 92 goto label1;

        $i3 = i + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(nb, 84, tid_expandN, "spec.reporter.Table", 79, $i3, $c2);
        $c2 = nb[$i3];
        if $c2 != 110 goto label1;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);
        i = i + 1;
        sub = 1;
        goto label2;

     label1:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(nb, 84, tid_expandN, "spec.reporter.Table", 85, i, $c4);
        $c4 = nb[i];
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);
        sub = 0;

     label2:
        i = i + 1;

     label3:
        $i3 = lengthof nb;
        $i3 = $i3 - 1;
        if i < $i3 goto label0;

        if sub != 0 goto label4;

        $i1 = lengthof nb;
        $i1 = $i1 - 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(nb, 84, tid_expandN, "spec.reporter.Table", 89, $i1, $c4);
        $c4 = nb[$i1];
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

     label4:
        $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r1;
    }

    private java.lang.String insertBreakAfterColons(java.lang.String)
    {
        spec.reporter.Table this;
        java.lang.String s, $r1;
        java.lang.StringBuffer $r0, sb;
        char[] c;
        int i, $i0, $i1, $i4;
        char $c2, $c3;
        long tid_insertBreakAfterColons;
        java.lang.Thread thread_insertBreakAfterColons;

        this := @this: spec.reporter.Table;
        s := @parameter0: java.lang.String;
        thread_insertBreakAfterColons = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_insertBreakAfterColons = virtualinvoke thread_insertBreakAfterColons.<java.lang.Thread: long getId()>();
        $r0 = new java.lang.StringBuffer;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();
        sb = $r0;
        $i0 = virtualinvoke s.<java.lang.String: int length()>();
        c = newarray (char)[$i0];
        $i1 = lengthof c;
        virtualinvoke s.<java.lang.String: void getChars(int,int,char[],int)>(0, $i1, c, 0);
        i = 0;
        goto label3;

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(c, 84, tid_insertBreakAfterColons, "spec.reporter.Table", 98, i, $c2);
        $c2 = c[i];
        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2);
        if i <= 1 goto label2;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(c, 84, tid_insertBreakAfterColons, "spec.reporter.Table", 99, i, $c3);
        $c3 = c[i];
        if $c3 == 58 goto label1;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(c, 84, tid_insertBreakAfterColons, "spec.reporter.Table", 99, i, $c3);
        $c3 = c[i];
        if $c3 != 59 goto label2;

     label1:
        $i4 = i - 2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(c, 84, tid_insertBreakAfterColons, "spec.reporter.Table", 100, $i4, $c3);
        $c3 = c[$i4];
        if $c3 == 58 goto label2;

        $i4 = i - 2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,char)>(c, 84, tid_insertBreakAfterColons, "spec.reporter.Table", 100, $i4, $c3);
        $c3 = c[$i4];
        if $c3 == 59 goto label2;

        virtualinvoke sb.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<BR>");

     label2:
        i = i + 1;

     label3:
        $i4 = lengthof c;
        if i < $i4 goto label0;

        $r1 = virtualinvoke sb.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r1;
    }

    public java.lang.String toString()
    {
        spec.reporter.Table this;
        java.lang.StringBuffer $r0, buf;
        java.lang.String $r1, name, label, val, $r2, $r8;
        int i, $i0;
        java.util.Vector $r3, $r7;
        java.lang.Object $r4;
        spec.reporter.ReportProps $r5;
        java.lang.StringBuilder $r6;
        boolean $z0;

        this := @this: spec.reporter.Table;
        $r0 = new java.lang.StringBuffer;
        $r1 = <spec.reporter.Table: java.lang.String tablePrefix>;
        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);
        buf = $r0;
        $r2 = this.<spec.reporter.Table: java.lang.String heading>;
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</TH></TR>\n");
        i = 0;
        goto label8;

     label0:
        $r3 = this.<spec.reporter.Table: java.util.Vector items>;
        $r4 = virtualinvoke $r3.<java.util.Vector: java.lang.Object elementAt(int)>(i);
        name = (java.lang.String) $r4;
        $r5 = this.<spec.reporter.Table: spec.reporter.ReportProps titles>;
        label = virtualinvoke $r5.<spec.reporter.ReportProps: java.lang.String get(java.lang.String)>(name);
        if label != null goto label1;

        $r6 = new java.lang.StringBuilder;
        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(name);
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>($r1);
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=null");
        label = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r5 = this.<spec.reporter.Table: spec.reporter.ReportProps props>;
        val = virtualinvoke $r5.<spec.reporter.ReportProps: java.lang.String get(java.lang.String)>(name);
        if val == null goto label2;

        $z0 = virtualinvoke val.<java.lang.String: boolean equals(java.lang.Object)>("");
        if $z0 == 0 goto label3;

     label2:
        val = "&nbsp;";
        goto label5;

     label3:
        $z0 = virtualinvoke name.<java.lang.String: boolean endsWith(java.lang.String)>(".path");
        if $z0 == 0 goto label4;

        val = specialinvoke this.<spec.reporter.Table: java.lang.String insertBreakAfterColons(java.lang.String)>(val);
        goto label5;

     label4:
        $z0 = virtualinvoke val.<java.lang.String: boolean startsWith(java.lang.String)>("http://");
        if $z0 == 0 goto label5;

        $r6 = new java.lang.StringBuilder;
        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("<a href=\"");
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(val);
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\">");
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(val);
        $r6 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("</a>");
        val = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $z0 = this.<spec.reporter.Table: boolean free>;
        if $z0 == 0 goto label6;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<TR><TD>");
        $r2 = specialinvoke this.<spec.reporter.Table: java.lang.String expandN(java.lang.String)>(val);
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);
        goto label7;

     label6:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<TR><TD><B>");
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(label);
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</B></TD>\n<TD>");
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(val);

     label7:
        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</TD></TR>\n");
        i = i + 1;

     label8:
        $r7 = this.<spec.reporter.Table: java.util.Vector items>;
        $i0 = virtualinvoke $r7.<java.util.Vector: int size()>();
        if i < $i0 goto label0;

        virtualinvoke buf.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("</TABLE>\n");
        $r8 = virtualinvoke buf.<java.lang.StringBuffer: java.lang.String toString()>();
        return $r8;
    }
}
