public class avrora.sim.radio.Medium$BasicArbitrator extends java.lang.Object implements avrora.sim.radio.Medium$Arbitrator
{
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        avrora.sim.radio.Medium$BasicArbitrator this;

        this := @this: avrora.sim.radio.Medium$BasicArbitrator;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }

    public boolean lockTransmission(avrora.sim.radio.Medium$Receiver, avrora.sim.radio.Medium$Transmission, int)
    {
        avrora.sim.radio.Medium$BasicArbitrator this;
        avrora.sim.radio.Medium$Receiver receiver;
        avrora.sim.radio.Medium$Transmission trans;
        int Milliseconds;

        this := @this: avrora.sim.radio.Medium$BasicArbitrator;
        receiver := @parameter0: avrora.sim.radio.Medium$Receiver;
        trans := @parameter1: avrora.sim.radio.Medium$Transmission;
        Milliseconds := @parameter2: int;
        return 1;
    }

    public char mergeTransmissions(avrora.sim.radio.Medium$Receiver, java.util.List, long, int)
    {
        avrora.sim.radio.Medium$BasicArbitrator this;
        avrora.sim.radio.Medium$Receiver receiver;
        java.util.List it;
        long bit;
        int Milliseconds, value, $i0, $i2, $i3;
        boolean $z0;
        java.util.Iterator i;
        avrora.sim.radio.Medium$Transmission first, next;
        short nval;
        java.lang.AssertionError $r0;
        java.lang.Object $r1;
        byte $b1;
        char $c4;

        this := @this: avrora.sim.radio.Medium$BasicArbitrator;
        receiver := @parameter0: avrora.sim.radio.Medium$Receiver;
        it := @parameter1: java.util.List;
        bit := @parameter2: long;
        Milliseconds := @parameter3: int;
        $z0 = <avrora.sim.radio.Medium$BasicArbitrator: boolean $assertionsDisabled>;
        if $z0 != 0 goto label0;

        $i0 = interfaceinvoke it.<java.util.List: int size()>();
        if $i0 > 0 goto label0;

        $r0 = new java.lang.AssertionError;
        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();
        throw $r0;

     label0:
        i = interfaceinvoke it.<java.util.List: java.util.Iterator iterator()>();
        $r1 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        first = (avrora.sim.radio.Medium$Transmission) $r1;
        $b1 = virtualinvoke first.<avrora.sim.radio.Medium$Transmission: byte getByteAtTime(long)>(bit);
        value = 255 & $b1;

     label1:
        $z0 = interfaceinvoke i.<java.util.Iterator: boolean hasNext()>();
        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke i.<java.util.Iterator: java.lang.Object next()>();
        next = (avrora.sim.radio.Medium$Transmission) $r1;
        $b1 = virtualinvoke next.<avrora.sim.radio.Medium$Transmission: byte getByteAtTime(long)>(bit);
        nval = 255 & $b1;
        $i2 = nval << 8;
        $i3 = value << 8;
        $i2 = $i2 ^ $i3;
        value = value | $i2;
        value = value | nval;
        goto label1;

     label2:
        $c4 = (char) value;
        return $c4;
    }

    public double computeReceivedPower(avrora.sim.radio.Medium$Transmission, avrora.sim.radio.Medium$Receiver, int)
    {
        avrora.sim.radio.Medium$BasicArbitrator this;
        avrora.sim.radio.Medium$Transmission t;
        avrora.sim.radio.Medium$Receiver receiver;
        int Milliseconds;
        double $d0;

        this := @this: avrora.sim.radio.Medium$BasicArbitrator;
        t := @parameter0: avrora.sim.radio.Medium$Transmission;
        receiver := @parameter1: avrora.sim.radio.Medium$Receiver;
        Milliseconds := @parameter2: int;
        $d0 = staticinvoke <avrora.sim.radio.Medium: double access$300()>();
        return $d0;
    }

    public int getNoise(int)
    {
        avrora.sim.radio.Medium$BasicArbitrator this;
        int index, $i0;

        this := @this: avrora.sim.radio.Medium$BasicArbitrator;
        index := @parameter0: int;
        $i0 = staticinvoke <avrora.sim.radio.Medium: int access$400()>();
        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0;

        $r0 = class "avrora/sim/radio/Medium";
        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();
        if $z0 != 0 goto label0;

        $z0 = 1;
        goto label1;

     label0:
        $z0 = 0;

     label1:
        <avrora.sim.radio.Medium$BasicArbitrator: boolean $assertionsDisabled> = $z0;
        return;
    }
}
