public class spec.reporter.Run extends java.lang.Object
{
    static final java.lang.String COPYRIGHT;
    private static final double MB;
    public int count;
    public double totaltime;
    public double minimumtime;
    public double maximumtime;
    public double averagetime;
    public double usedMemoryEnd;
    public double usedMemoryStart;
    private spec.reporter.ReportProps props;
    public spec.reporter.Result result;
    public double time;
    public double totalMemoryEnd;
    public double totalMemoryStart;
    public static java.lang.String[] transaction;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[6];
        $r0[0] = "new_order";
        $r0[1] = "payment";
        $r0[2] = "order_status";
        $r0[3] = "delivery";
        $r0[4] = "stock_level";
        $r0[5] = "cust_report";
        <spec.reporter.Run: java.lang.String[] transaction> = $r0;
        return;
    }

    public void <init>(spec.reporter.ReportProps, int, double, spec.reporter.Result)
    {
        spec.reporter.Run this;
        spec.reporter.ReportProps props;
        int runNumber, $i0;
        double time, $d0;
        spec.reporter.Result result;
        java.lang.String prefix, $r1, $r4, $r5;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String[] $r2;

        this := @this: spec.reporter.Run;
        props := @parameter0: spec.reporter.ReportProps;
        runNumber := @parameter1: int;
        time := @parameter2: double;
        result := @parameter3: spec.reporter.Result;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<spec.reporter.Run: spec.reporter.ReportProps props> = props;
        this.<spec.reporter.Run: double time> = time;
        this.<spec.reporter.Run: spec.reporter.Result result> = result;
        $r0 = new java.lang.StringBuilder;
        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("result.");
        $r1 = result.<spec.reporter.Result: java.lang.String name>;
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".company.");
        $r2 = <spec.reporter.Run: java.lang.String[] transaction>;
        $r1 = $r2[runNumber];
        $r0 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);
        prefix = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();
        $r3 = new java.lang.StringBuilder;
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(prefix);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".count");
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $i0 = virtualinvoke props.<spec.reporter.ReportProps: int getInt(java.lang.Object)>($r5);
        this.<spec.reporter.Run: int count> = $i0;
        $r3 = new java.lang.StringBuilder;
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(prefix);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".totaltime");
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $d0 = virtualinvoke props.<spec.reporter.ReportProps: double getDouble(java.lang.Object)>($r5);
        this.<spec.reporter.Run: double totaltime> = $d0;
        $r3 = new java.lang.StringBuilder;
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(prefix);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".minimumtime");
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $d0 = virtualinvoke props.<spec.reporter.ReportProps: double getDouble(java.lang.Object)>($r5);
        this.<spec.reporter.Run: double minimumtime> = $d0;
        $r3 = new java.lang.StringBuilder;
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(prefix);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".maximumtime");
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $d0 = virtualinvoke props.<spec.reporter.ReportProps: double getDouble(java.lang.Object)>($r5);
        this.<spec.reporter.Run: double maximumtime> = $d0;
        $r3 = new java.lang.StringBuilder;
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(prefix);
        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);
        $r3 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".averagetime");
        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();
        $d0 = virtualinvoke props.<spec.reporter.ReportProps: double getDouble(java.lang.Object)>($r5);
        this.<spec.reporter.Run: double averagetime> = $d0;
        return;
    }

    public double ratio()
    {
        spec.reporter.Run this;
        double ref, $d0, $d1;
        spec.reporter.Result $r0;
        byte $b0;

        this := @this: spec.reporter.Run;
        $r0 = this.<spec.reporter.Run: spec.reporter.Result result>;
        ref = $r0.<spec.reporter.Result: double referenceTime>;
        $d0 = this.<spec.reporter.Run: double time>;
        $b0 = $d0 cmpg 0.0;
        if $b0 > 0 goto label0;

        return 0.0;

     label0:
        $d1 = this.<spec.reporter.Run: double time>;
        $d0 = ref / $d1;
        return $d0;
    }
}
