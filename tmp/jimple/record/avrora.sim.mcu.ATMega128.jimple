public class avrora.sim.mcu.ATMega128 extends avrora.sim.mcu.ATMegaFamily
{
    public static final int _1kb;
    public static final int ATMEGA128_IOREG_SIZE;
    public static final int ATMEGA128_SRAM_SIZE;
    public static final int ATMEGA128_FLASH_SIZE;
    public static final int ATMEGA128_EEPROM_SIZE;
    public static final int ATMEGA128_NUM_PINS;
    public static final int ATMEGA128_NUM_INTS;
    public static final int MODE_IDLE;
    public static final int MODE_ADCNRED;
    public static final int MODE_POWERDOWN;
    public static final int MODE_POWERSAVE;
    public static final int MODE_RESERVED1;
    public static final int MODE_RESERVED2;
    public static final int MODE_STANDBY;
    public static final int MODE_EXTSTANDBY;
    protected static final java.lang.String[] idleModeNames;
    private static final double[] modeAmpere;
    protected static final int[] wakeupTimes;
    protected final avrora.sim.ActiveRegister MCUCR_reg;
    private static final int[][] transitionTimeMatrix;
    public static final avrora.arch.avr.AVRProperties props;
    private static final int[] MCUCR_sm_perm;

    public void <init>(int, avrora.sim.Simulation, avrora.sim.clock.ClockDomain, avrora.core.Program)
    {
        avrora.sim.mcu.ATMega128 this;
        int id;
        avrora.sim.Simulation sim;
        avrora.sim.clock.ClockDomain cd;
        avrora.core.Program p;
        avrora.arch.avr.AVRProperties $r0;
        avrora.sim.FiniteStateMachine $r1, $r12;
        java.lang.String[] $r2;
        int[][] $r3;
        avrora.sim.clock.MainClock $r4;
        avrora.arch.legacy.LegacyInterpreter$Factory $r5;
        avrora.sim.Simulator $r6;
        avrora.sim.Interpreter $r7;
        avrora.sim.AtmelInterpreter $r8;
        avrora.sim.ActiveRegister $r9;
        avrora.sim.energy.Energy $r10;
        double[] $r11;
        avrora.sim.energy.EnergyControl $r13;

        this := @this: avrora.sim.mcu.ATMega128;
        id := @parameter0: int;
        sim := @parameter1: avrora.sim.Simulation;
        cd := @parameter2: avrora.sim.clock.ClockDomain;
        p := @parameter3: avrora.core.Program;
        $r0 = <avrora.sim.mcu.ATMega128: avrora.arch.avr.AVRProperties props>;
        $r1 = new avrora.sim.FiniteStateMachine;
        $r4 = virtualinvoke cd.<avrora.sim.clock.ClockDomain: avrora.sim.clock.MainClock getMainClock()>();
        $r2 = <avrora.sim.mcu.ATMega128: java.lang.String[] idleModeNames>;
        $r3 = <avrora.sim.mcu.ATMega128: int[][] transitionTimeMatrix>;
        specialinvoke $r1.<avrora.sim.FiniteStateMachine: void <init>(avrora.sim.clock.Clock,int,java.lang.String[],int[][])>($r4, 0, $r2, $r3);
        specialinvoke this.<avrora.sim.mcu.ATMegaFamily: void <init>(avrora.sim.clock.ClockDomain,avrora.arch.avr.AVRProperties,avrora.sim.FiniteStateMachine)>(cd, $r0, $r1);
        $r5 = <avrora.arch.legacy.LegacyInterpreter: avrora.arch.legacy.LegacyInterpreter$Factory FACTORY>;
        $r6 = virtualinvoke sim.<avrora.sim.Simulation: avrora.sim.Simulator createSimulator(int,avrora.sim.InterpreterFactory,avrora.sim.mcu.Microcontroller,avrora.core.Program)>(id, $r5, this, p);
        this.<avrora.sim.mcu.ATMega128: avrora.sim.Simulator simulator> = $r6;
        $r6 = this.<avrora.sim.mcu.ATMega128: avrora.sim.Simulator simulator>;
        $r7 = virtualinvoke $r6.<avrora.sim.Simulator: avrora.sim.Interpreter getInterpreter()>();
        $r8 = (avrora.sim.AtmelInterpreter) $r7;
        this.<avrora.sim.mcu.ATMega128: avrora.sim.AtmelInterpreter interpreter> = $r8;
        $r9 = virtualinvoke this.<avrora.sim.mcu.ATMega128: avrora.sim.ActiveRegister getIOReg(java.lang.String)>("MCUCR");
        this.<avrora.sim.mcu.ATMega128: avrora.sim.ActiveRegister MCUCR_reg> = $r9;
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void installPins()>();
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void installDevices()>();
        $r10 = new avrora.sim.energy.Energy;
        $r11 = <avrora.sim.mcu.ATMega128: double[] modeAmpere>;
        $r12 = this.<avrora.sim.mcu.ATMega128: avrora.sim.FiniteStateMachine sleepState>;
        $r13 = virtualinvoke sim.<avrora.sim.Simulation: avrora.sim.energy.EnergyControl getEnergyControl()>();
        specialinvoke $r10.<avrora.sim.energy.Energy: void <init>(java.lang.String,double[],avrora.sim.FiniteStateMachine,avrora.sim.energy.EnergyControl)>("CPU", $r11, $r12, $r13);
        return;
    }

    protected void installPins()
    {
        avrora.sim.mcu.ATMega128 this;
        int cntr, $i0;
        avrora.sim.mcu.DefaultMCU$Pin $r0;
        avrora.arch.avr.AVRProperties $r1;
        avrora.sim.mcu.Microcontroller$Pin[] $r2;

        this := @this: avrora.sim.mcu.ATMega128;
        cntr = 0;

     label0:
        $r1 = this.<avrora.sim.mcu.ATMega128: avrora.arch.avr.AVRProperties properties>;
        $i0 = $r1.<avrora.arch.avr.AVRProperties: int num_pins>;
        if cntr >= $i0 goto label1;

        $r2 = this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.Microcontroller$Pin[] pins>;
        $r0 = new avrora.sim.mcu.DefaultMCU$Pin;
        specialinvoke $r0.<avrora.sim.mcu.DefaultMCU$Pin: void <init>(avrora.sim.mcu.DefaultMCU,int)>(this, cntr);
        $r2[cntr] = $r0;
        cntr = cntr + 1;
        goto label0;

     label1:
        return;
    }

    protected void installDevices()
    {
        avrora.sim.mcu.ATMega128 this;
        int[] ETIFR_mapping, $r3;
        avrora.sim.mcu.ATMegaFamily$FlagRegister $r0, $r7;
        avrora.sim.ActiveRegister $r1;
        avrora.sim.mcu.ATMegaFamily$MaskRegister $r2, $r5;
        avrora.sim.AtmelInterpreter $r4;
        avrora.sim.mcu.ATMegaFamily$Timer0 $r8;
        avrora.sim.mcu.ATMegaFamily$Timer1 $r9;
        avrora.sim.mcu.ATMegaFamily$Timer2 $r10;
        avrora.sim.mcu.ATMegaFamily$Timer3 $r11;
        avrora.sim.mcu.EEPROM $r12;
        avrora.arch.avr.AVRProperties $r13;
        int $i0;
        avrora.sim.mcu.USART $r14;
        avrora.sim.mcu.SPI $r15;
        avrora.sim.mcu.ADC $r16;

        this := @this: avrora.sim.mcu.ATMega128;
        $r0 = virtualinvoke this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$FlagRegister buildInterruptRange(boolean,java.lang.String,java.lang.String,int,int)>(1, "EIMSK", "EIFR", 2, 8);
        this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$FlagRegister EIFR_reg> = $r0;
        $r0 = virtualinvoke this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$FlagRegister buildInterruptRange(boolean,java.lang.String,java.lang.String,int,int)>(0, "TIMSK", "TIFR", 17, 8);
        this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$FlagRegister TIFR_reg> = $r0;
        $r1 = virtualinvoke this.<avrora.sim.mcu.ATMega128: avrora.sim.ActiveRegister getIOReg(java.lang.String)>("TIMSK");
        $r2 = (avrora.sim.mcu.ATMegaFamily$MaskRegister) $r1;
        this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$MaskRegister TIMSK_reg> = $r2;
        $r3 = newarray (int)[8];
        $r3[0] = 25;
        $r3[1] = 29;
        $r3[2] = 30;
        $r3[3] = 28;
        $r3[4] = 27;
        $r3[5] = 26;
        $r3[6] = -1;
        $r3[7] = -1;
        ETIFR_mapping = $r3;
        $r0 = new avrora.sim.mcu.ATMegaFamily$FlagRegister;
        $r4 = this.<avrora.sim.mcu.ATMega128: avrora.sim.AtmelInterpreter interpreter>;
        specialinvoke $r0.<avrora.sim.mcu.ATMegaFamily$FlagRegister: void <init>(avrora.sim.AtmelInterpreter,int[])>($r4, ETIFR_mapping);
        this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$FlagRegister ETIFR_reg> = $r0;
        $r2 = new avrora.sim.mcu.ATMegaFamily$MaskRegister;
        $r4 = this.<avrora.sim.mcu.ATMega128: avrora.sim.AtmelInterpreter interpreter>;
        specialinvoke $r2.<avrora.sim.mcu.ATMegaFamily$MaskRegister: void <init>(avrora.sim.AtmelInterpreter,int[])>($r4, ETIFR_mapping);
        this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$MaskRegister ETIMSK_reg> = $r2;
        $r5 = this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$MaskRegister ETIMSK_reg>;
        virtualinvoke this.<avrora.sim.mcu.ATMega128: avrora.sim.ActiveRegister installIOReg(java.lang.String,avrora.sim.ActiveRegister)>("ETIMSK", $r5);
        $r7 = this.<avrora.sim.mcu.ATMega128: avrora.sim.mcu.ATMegaFamily$FlagRegister ETIFR_reg>;
        virtualinvoke this.<avrora.sim.mcu.ATMega128: avrora.sim.ActiveRegister installIOReg(java.lang.String,avrora.sim.ActiveRegister)>("ETIFR", $r7);
        $r8 = new avrora.sim.mcu.ATMegaFamily$Timer0;
        specialinvoke $r8.<avrora.sim.mcu.ATMegaFamily$Timer0: void <init>(avrora.sim.mcu.ATMegaFamily)>(this);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r8);
        $r9 = new avrora.sim.mcu.ATMegaFamily$Timer1;
        specialinvoke $r9.<avrora.sim.mcu.ATMegaFamily$Timer1: void <init>(avrora.sim.mcu.ATMegaFamily,int)>(this, 3);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r9);
        $r10 = new avrora.sim.mcu.ATMegaFamily$Timer2;
        specialinvoke $r10.<avrora.sim.mcu.ATMegaFamily$Timer2: void <init>(avrora.sim.mcu.ATMegaFamily)>(this);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r10);
        $r11 = new avrora.sim.mcu.ATMegaFamily$Timer3;
        specialinvoke $r11.<avrora.sim.mcu.ATMegaFamily$Timer3: void <init>(avrora.sim.mcu.ATMegaFamily,int)>(this, 3);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r11);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void buildPort(char)>(65);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void buildPort(char)>(66);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void buildPort(char)>(67);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void buildPort(char)>(68);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void buildPort(char)>(69);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void buildPort(char)>(70);
        $r12 = new avrora.sim.mcu.EEPROM;
        $r13 = this.<avrora.sim.mcu.ATMega128: avrora.arch.avr.AVRProperties properties>;
        $i0 = $r13.<avrora.arch.avr.AVRProperties: int eeprom_size>;
        specialinvoke $r12.<avrora.sim.mcu.EEPROM: void <init>(int,avrora.sim.mcu.AtmelMicrocontroller)>($i0, this);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r12);
        $r14 = new avrora.sim.mcu.USART;
        specialinvoke $r14.<avrora.sim.mcu.USART: void <init>(java.lang.String,avrora.sim.mcu.AtmelMicrocontroller)>("0", this);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r14);
        $r14 = new avrora.sim.mcu.USART;
        specialinvoke $r14.<avrora.sim.mcu.USART: void <init>(java.lang.String,avrora.sim.mcu.AtmelMicrocontroller)>("1", this);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r14);
        $r15 = new avrora.sim.mcu.SPI;
        specialinvoke $r15.<avrora.sim.mcu.SPI: void <init>(avrora.sim.mcu.AtmelMicrocontroller)>(this);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r15);
        $r16 = new avrora.sim.mcu.ADC;
        specialinvoke $r16.<avrora.sim.mcu.ADC: void <init>(avrora.sim.mcu.AtmelMicrocontroller,int)>(this, 8);
        virtualinvoke this.<avrora.sim.mcu.ATMega128: void addDevice(avrora.sim.mcu.AtmelInternalDevice)>($r16);
        return;
    }

    protected int getSleepMode()
    {
        avrora.sim.mcu.ATMega128 this;
        byte value;
        boolean sleepEnable;
        avrora.sim.ActiveRegister $r0;
        int[] $r1;
        int $i0;

        this := @this: avrora.sim.mcu.ATMega128;
        $r0 = this.<avrora.sim.mcu.ATMega128: avrora.sim.ActiveRegister MCUCR_reg>;
        value = interfaceinvoke $r0.<avrora.sim.ActiveRegister: byte read()>();
        sleepEnable = staticinvoke <cck.util.Arithmetic: boolean getBit(byte,int)>(value, 5);
        if sleepEnable == 0 goto label0;

        $r1 = <avrora.sim.mcu.ATMega128: int[] MCUCR_sm_perm>;
        $i0 = staticinvoke <cck.util.Arithmetic: int getBitField(int,int[])>(value, $r1);
        $i0 = $i0 + 1;
        return $i0;

     label0:
        return 1;
    }

    static void <clinit>()
    {
        java.util.HashMap pinAssignments, interruptAssignments, $r7;
        avrora.sim.mcu.RegisterLayout rl, $r8;
        avrora.sim.mcu.ReprogrammableCodeSegment$Factory $r0;
        java.lang.String[] $r1;
        double[] $r2;
        int[] $r3, $r4, $r5;
        int $i0, $i1;
        int[][] $r6;
        avrora.arch.avr.AVRProperties $r9;

        $r1 = newarray (java.lang.String)[9];
        $r1[0] = "Active";
        $r1[1] = "Idle";
        $r1[2] = "ADC Noise Reduction";
        $r1[3] = "Power Down";
        $r1[4] = "Power Save";
        $r1[5] = "RESERVED 1";
        $r1[6] = "RESERVED 2";
        $r1[7] = "Standby";
        $r1[8] = "Extended Standby";
        <avrora.sim.mcu.ATMega128: java.lang.String[] idleModeNames> = $r1;
        $r2 = newarray (double)[9];
        $r2[0] = 0.0075667;
        $r2[1] = 0.0033433;
        $r2[2] = 9.884E-4;
        $r2[3] = 1.158E-4;
        $r2[4] = 1.237E-4;
        $r2[5] = 0.0;
        $r2[6] = 0.0;
        $r2[7] = 2.356E-4;
        $r2[8] = 2.433E-4;
        <avrora.sim.mcu.ATMega128: double[] modeAmpere> = $r2;
        $r3 = newarray (int)[9];
        $r3[0] = 0;
        $r3[1] = 0;
        $r3[2] = 0;
        $r3[3] = 1000;
        $r3[4] = 1000;
        $r3[5] = 0;
        $r3[6] = 0;
        $r3[7] = 6;
        $r3[8] = 6;
        <avrora.sim.mcu.ATMega128: int[] wakeupTimes> = $r3;
        $r1 = <avrora.sim.mcu.ATMega128: java.lang.String[] idleModeNames>;
        $i0 = lengthof $r1;
        $r4 = <avrora.sim.mcu.ATMega128: int[] wakeupTimes>;
        $r5 = <avrora.sim.mcu.ATMega128: int[] wakeupTimes>;
        $i1 = lengthof $r5;
        $r5 = newarray (int)[$i1];
        $r6 = staticinvoke <avrora.sim.FiniteStateMachine: int[][] buildBimodalTTM(int,int,int[],int[])>($i0, 0, $r4, $r5);
        <avrora.sim.mcu.ATMega128: int[][] transitionTimeMatrix> = $r6;
        $r7 = new java.util.HashMap;
        specialinvoke $r7.<java.util.HashMap: void <init>(int)>(150);
        pinAssignments = $r7;
        $r7 = new java.util.HashMap;
        specialinvoke $r7.<java.util.HashMap: void <init>(int)>(50);
        interruptAssignments = $r7;
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 1, "PEN");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 2, "PE0", "RXD0", "PDI");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 3, "PE1", "TXD0", "PDO");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 4, "PE2", "XCK0", "AIN0");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 5, "PE3", "OC3A", "AIN1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 6, "PE4", "OC3B", "INT4");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 7, "PE5", "OC3C", "INT5");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 8, "PE6", "T3", "INT6");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 9, "PE7", "IC3", "INT7");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 10, "PB0", "SS");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 11, "PB1", "SCK");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 12, "PB2", "MOSI");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 13, "PB3", "MISO");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 14, "PB4", "OC0");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 15, "PB5", "OC1A");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 16, "PB6", "OC1B");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 17, "PB7", "OC2", "OC1C");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 18, "PG3", "TOSC2");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 19, "PG4", "TOSC1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 20, "RESET");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 21, "VCC");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 22, "GND");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 23, "XTAL2");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 24, "XTAL1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 25, "PD0", "SCL", "INT0");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 26, "PD1", "SDA", "INT1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 27, "PD2", "RXD1", "INT2");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 28, "PD3", "TXD1", "INT3");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 29, "PD4", "IC1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 30, "PD5", "XCK1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 31, "PD6", "T1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 32, "PD7", "T2");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 33, "PG0", "WR");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 34, "PG1", "RD");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 35, "PC0", "A8");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 36, "PC1", "A9");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 37, "PC2", "A10");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 38, "PC3", "A11");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 39, "PC4", "A12");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 40, "PC5", "A13");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 41, "PC6", "A14");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 42, "PC7", "A15");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 43, "PG2", "ALE");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 44, "PA7", "AD7");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 45, "PA6", "AD5");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 46, "PA5", "AD5");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 47, "PA4", "AD4");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 48, "PA3", "AD3");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 49, "PA2", "AD2");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 50, "PA1", "AD1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 51, "PA0", "AD0");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 52, "VCC.b");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 53, "GND.b");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 54, "PF7", "ADC7", "TDI");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 55, "PF6", "ADC6", "TDO");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 56, "PF5", "ADC5", "TMS");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String,java.lang.String)>(pinAssignments, 57, "PF4", "ADC4", "TCK");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 58, "PF3", "ADC3");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 59, "PF2", "ADC2");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 60, "PF1", "ADC1");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String,java.lang.String)>(pinAssignments, 61, "PF0", "ADC0");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 62, "AREF");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 63, "GND.c");
        staticinvoke <avrora.sim.mcu.ATMega128: void addPin(java.util.HashMap,int,java.lang.String)>(pinAssignments, 64, "AVCC");
        $r8 = new avrora.sim.mcu.RegisterLayout;
        specialinvoke $r8.<avrora.sim.mcu.RegisterLayout: void <init>(int,int)>(224, 8);
        rl = $r8;
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UCSR1C", 125);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UDR1", 124);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UCSR1A", 123);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UCSR1B", 122);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UBRR1L", 121);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UBRR1H", 120);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UCSR0C", 117);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UBRR0H", 112);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int,java.lang.String)>("TCCR3C", 108, "FOC3A,FOC3B,FOC3C,.....");
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int,java.lang.String)>("TCCR3A", 107, "COM3A[1:0],COM3B[1:0],COM3C[1:0],WGM3[1:0]");
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int,java.lang.String)>("TCCR3B", 106, ".,ICES3,.,WGM3[3:2],CS3[2:0]");
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCNT3H", 105);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCNT3L", 104);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR3AH", 103);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR3AL", 102);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR3BH", 101);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR3BL", 100);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR3CH", 99);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR3CL", 98);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ICR3H", 97);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ICR3L", 96);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ETIMSK", 93);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ETIFR", 92);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int,java.lang.String)>("TCCR1C", 90, "FOC1A,FOC1B,FOC1C,.....");
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR1CH", 89);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR1CL", 88);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TWCR", 84);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TWDR", 83);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TWAR", 82);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TWSR", 81);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TWBR", 80);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OSCCAL", 79);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("XMCRA", 77);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("XMCRB", 76);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EICRA", 74);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SPMCSR", 72);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTG", 69);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRG", 68);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PING", 67);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTF", 66);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRF", 65);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SREG", 63);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SPH", 62);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SPL", 61);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("XDIV", 60);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("RAMPZ", 59);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EICRB", 58);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EIMSK", 57);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EIFR", 56);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TIMSK", 55);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TIFR", 54);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("MCUCR", 53);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("MCUCSR", 52);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCCR0", 51);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCNT0", 50);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR0", 49);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ASSR", 48);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int,java.lang.String)>("TCCR1A", 47, "COM1A[1:0],COM1B[1:0],COM1C[1:0],WGM1[1:0]");
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int,java.lang.String)>("TCCR1B", 46, ".,ICES1,.,WGM1[3:2],CS1[2:0]");
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCNT1H", 45);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCNT1L", 44);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR1AH", 43);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR1AL", 42);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR1BH", 41);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR1BL", 40);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ICR1H", 39);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ICR1L", 38);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCCR2", 37);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("TCNT2", 36);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCR2", 35);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("OCDR", 34);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("WDTCR", 33);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SFIOR", 32);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EEARH", 31);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EEARL", 30);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EEDR", 29);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("EECR", 28);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTA", 27);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRA", 26);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PINA", 25);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTB", 24);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRB", 23);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PINB", 22);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTC", 21);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRC", 20);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PINC", 19);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTD", 18);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRD", 17);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PIND", 16);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SPDR", 15);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SPSR", 14);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("SPCR", 13);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UDR0", 12);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UCSR0A", 11);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UCSR0B", 10);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("UBRR0L", 9);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ACSR", 8);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ADMUX", 7);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ADCSRA", 6);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ADCH", 5);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("ADCL", 4);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PORTE", 3);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("DDRE", 2);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PINE", 1);
        virtualinvoke rl.<avrora.sim.mcu.RegisterLayout: void addIOReg(java.lang.String,int)>("PINF", 0);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "RESET", 1);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT0", 2);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT1", 3);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT2", 4);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT3", 5);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT4", 6);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT5", 7);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT6", 8);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "INT7", 9);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER2 COMP", 10);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER2 OVF", 11);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER1 CAPT", 12);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER1 COMPA", 13);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER1 COMPB", 14);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER1 OVF", 15);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER0 COMP", 16);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER0 OVF", 17);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "SPI, STC", 18);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "USART0, RX", 19);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "USART0, UDRE", 20);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "USART0, TX", 21);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "ADC", 22);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "EE READY", 23);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "ANALOG COMP", 24);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER1 COMPC", 25);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER3 CAPT", 26);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER3 COMPA", 27);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER3 COMPB", 28);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER3 COMPC", 29);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TIMER3 OVF", 30);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "USART1, RX", 31);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "USART1, UDRE", 32);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "USART1, TX", 33);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "TWI", 34);
        staticinvoke <avrora.sim.mcu.ATMega128: void addInterrupt(java.util.HashMap,java.lang.String,int)>(interruptAssignments, "SPM READY", 35);
        $r9 = new avrora.arch.avr.AVRProperties;
        $r0 = new avrora.sim.mcu.ReprogrammableCodeSegment$Factory;
        specialinvoke $r0.<avrora.sim.mcu.ReprogrammableCodeSegment$Factory: void <init>(int,int)>(131072, 7);
        specialinvoke $r9.<avrora.arch.avr.AVRProperties: void <init>(int,int,int,int,int,int,avrora.sim.CodeSegment$Factory,java.util.HashMap,avrora.sim.mcu.RegisterLayout,java.util.HashMap)>(224, 4096, 131072, 4096, 65, 36, $r0, pinAssignments, rl, interruptAssignments);
        <avrora.sim.mcu.ATMega128: avrora.arch.avr.AVRProperties props> = $r9;
        $r3 = newarray (int)[3];
        $r3[0] = 2;
        $r3[1] = 4;
        $r3[2] = 3;
        <avrora.sim.mcu.ATMega128: int[] MCUCR_sm_perm> = $r3;
        return;
    }
}
