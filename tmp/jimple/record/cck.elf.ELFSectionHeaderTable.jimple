public class cck.elf.ELFSectionHeaderTable extends java.lang.Object
{
    public static final int SHT_NULL;
    public static final int SHT_PROGBITS;
    public static final int SHT_SYMTAB;
    public static final int SHT_STRTAB;
    public static final int SHT_RELA;
    public static final int SHT_HASH;
    public static final int SHT_DYNAMIC;
    public static final int SHT_NOTE;
    public static final int SHT_NOBITS;
    public static final int SHT_REL;
    public static final int SHT_SHLIB;
    public static final int SHT_DYNSYM;
    public static final int SHT_LOPROC;
    public static final int SHT_HIPROC;
    public static final int SHT_LOUSER;
    public static final int SHT_HIUSER;
    public static final int SHF_WRITE;
    public static final int SHF_ALLOC;
    public static final int SHF_EXECINSTR;
    public static final int SHF_MASKPROC;
    public final cck.elf.ELFHeader header;
    public final cck.elf.ELFSectionHeaderTable$Entry32[] entries;
    protected cck.elf.ELFStringTable strtab;

    public void <init>(cck.elf.ELFHeader)
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFHeader header;
        short $s0;
        cck.elf.ELFSectionHeaderTable$Entry32[] $r0;

        this := @this: cck.elf.ELFSectionHeaderTable;
        header := @parameter0: cck.elf.ELFHeader;
        specialinvoke this.<java.lang.Object: void <init>()>();
        this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header> = header;
        $s0 = header.<cck.elf.ELFHeader: short e_shnum>;
        $r0 = newarray (cck.elf.ELFSectionHeaderTable$Entry32)[$s0];
        this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries> = $r0;
        return;
    }

    public void read(java.io.RandomAccessFile) throws java.io.IOException
    {
        cck.elf.ELFSectionHeaderTable this;
        java.io.RandomAccessFile fis;
        cck.elf.ELFDataInputStream is, $r2;
        int cntr, pad, $i0, $i1;
        cck.elf.ELFSectionHeaderTable$Entry32 e, $r5;
        cck.elf.ELFSectionHeaderTable$Entry32[] $r0, $r4;
        cck.elf.ELFHeader $r1, $r3;
        long $l2;
        short $s3;

        this := @this: cck.elf.ELFSectionHeaderTable;
        fis := @parameter0: java.io.RandomAccessFile;
        $r0 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r0;
        if $i0 != 0 goto label0;

        return;

     label0:
        $r1 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;
        $i1 = $r1.<cck.elf.ELFHeader: int e_shoff>;
        $l2 = (long) $i1;
        virtualinvoke fis.<java.io.RandomAccessFile: void seek(long)>($l2);
        $r2 = new cck.elf.ELFDataInputStream;
        $r3 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;
        specialinvoke $r2.<cck.elf.ELFDataInputStream: void <init>(cck.elf.ELFHeader,java.io.RandomAccessFile)>($r3, fis);
        is = $r2;
        cntr = 0;

     label1:
        $r4 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        $i1 = lengthof $r4;
        if cntr >= $i1 goto label4;

        $r5 = new cck.elf.ELFSectionHeaderTable$Entry32;
        specialinvoke $r5.<cck.elf.ELFSectionHeaderTable$Entry32: void <init>(cck.elf.ELFSectionHeaderTable)>(this);
        e = $r5;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_name> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_type> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_flags> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Addr()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addr> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Off()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_offset> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_size> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_link> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_info> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_addralign> = $i1;
        $i1 = virtualinvoke is.<cck.elf.ELFDataInputStream: int read_Elf32_Word()>();
        e.<cck.elf.ELFSectionHeaderTable$Entry32: int sh_entsize> = $i1;
        $r0 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        $r0[cntr] = e;
        pad = 40;

     label2:
        $r1 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFHeader header>;
        $s3 = $r1.<cck.elf.ELFHeader: short e_shentsize>;
        if pad >= $s3 goto label3;

        virtualinvoke fis.<java.io.RandomAccessFile: int read()>();
        pad = pad + 1;
        goto label2;

     label3:
        cntr = cntr + 1;
        goto label1;

     label4:
        return;
    }

    public void setStringTable(cck.elf.ELFStringTable)
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFStringTable str;

        this := @this: cck.elf.ELFSectionHeaderTable;
        str := @parameter0: cck.elf.ELFStringTable;
        this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab> = str;
        return;
    }

    public cck.elf.ELFStringTable getStringTable()
    {
        cck.elf.ELFSectionHeaderTable this;
        cck.elf.ELFStringTable $r0;

        this := @this: cck.elf.ELFSectionHeaderTable;
        $r0 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFStringTable strtab>;
        return $r0;
    }

    public java.lang.String getSectionName(int)
    {
        cck.elf.ELFSectionHeaderTable this;
        int ind, $i0;
        cck.elf.ELFSectionHeaderTable$Entry32 e;
        cck.elf.ELFSectionHeaderTable$Entry32[] $r0, $r1;
        java.lang.String $r2;

        this := @this: cck.elf.ELFSectionHeaderTable;
        ind := @parameter0: int;
        if ind < 0 goto label0;

        $r0 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        $i0 = lengthof $r0;
        if ind < $i0 goto label1;

     label0:
        return "";

     label1:
        $r1 = this.<cck.elf.ELFSectionHeaderTable: cck.elf.ELFSectionHeaderTable$Entry32[] entries>;
        e = $r1[ind];
        $r2 = virtualinvoke e.<cck.elf.ELFSectionHeaderTable$Entry32: java.lang.String getName()>();
        return $r2;
    }
}
