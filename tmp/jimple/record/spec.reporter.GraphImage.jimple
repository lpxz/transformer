public class spec.reporter.GraphImage extends java.awt.image.BufferedImage
{
    static final java.lang.String COPYRIGHT;
    private double prevx;
    private double prevy;
    private boolean prevSet;
    private double alphax;
    private double alphay;
    private int pixelsize;
    private int pixeltype;
    private java.awt.Color pixelcolor;
    private java.awt.Graphics graphics;
    private float quality;
    private boolean connectPointsEnabled;
    public static final int MINX;
    public static final int MAXX;
    public static final int MINY;
    public static final int MAXY;
    public static final int DASH_LENGTH;
    public static final int AXIS_TICK_RADIUS;
    public static final int DEFAULT_WIDTH;
    public static final int DEFAULT_HEIGHT;
    public static final int PIXEL_TYPE_CIRCLE;
    public static final int PIXEL_TYPE_SQUARE;
    public static final int DEFAULT_PIXEL_SIZE;
    public static final int DEFAULT_PIXEL_TYPE;
    public static final java.awt.Color DEFAULT_FOREGROUND_COLOR;
    public static final java.awt.Color DEFAULT_BACKGROUND_COLOR;
    public static final java.lang.String DEFAULT_FILENAME;
    public static final float DEFAULT_JPEG_QUALITY;
    public static final java.awt.Font FONT;
    public static final double[] DEFAULT_SCALE;
    private final double[] scale;
    private final java.text.DecimalFormat dfx;
    private final java.text.DecimalFormat dfy;

    static void <clinit>()
    {
        java.awt.Color $r0;
        java.awt.Font $r1;
        double[] $r2;

        $r0 = <java.awt.Color: java.awt.Color red>;
        <spec.reporter.GraphImage: java.awt.Color DEFAULT_FOREGROUND_COLOR> = $r0;
        $r0 = <java.awt.Color: java.awt.Color black>;
        <spec.reporter.GraphImage: java.awt.Color DEFAULT_BACKGROUND_COLOR> = $r0;
        $r1 = new java.awt.Font;
        specialinvoke $r1.<java.awt.Font: void <init>(java.lang.String,int,int)>("Monospaced", 0, 10);
        <spec.reporter.GraphImage: java.awt.Font FONT> = $r1;
        $r2 = newarray (double)[4];
        $r2[0] = -5.0;
        $r2[1] = 5.0;
        $r2[2] = -5.0;
        $r2[3] = 5.0;
        <spec.reporter.GraphImage: double[] DEFAULT_SCALE> = $r2;
        return;
    }

    public void <init>()
    {
        spec.reporter.GraphImage this;

        this := @this: spec.reporter.GraphImage;
        specialinvoke this.<spec.reporter.GraphImage: void <init>(int,int)>(250, 250);
        return;
    }

    public void <init>(int, int)
    {
        spec.reporter.GraphImage this;
        int width, height, $i0;
        double[] $r0;
        java.text.DecimalFormat $r1;

        this := @this: spec.reporter.GraphImage;
        width := @parameter0: int;
        height := @parameter1: int;
        specialinvoke this.<java.awt.image.BufferedImage: void <init>(int,int,int)>(width, height, 5);
        $r0 = <spec.reporter.GraphImage: double[] DEFAULT_SCALE>;
        $i0 = lengthof $r0;
        $r0 = newarray (double)[$i0];
        this.<spec.reporter.GraphImage: double[] scale> = $r0;
        $r1 = new java.text.DecimalFormat;
        specialinvoke $r1.<java.text.DecimalFormat: void <init>(java.lang.String)>("#.##");
        this.<spec.reporter.GraphImage: java.text.DecimalFormat dfx> = $r1;
        $r1 = new java.text.DecimalFormat;
        specialinvoke $r1.<java.text.DecimalFormat: void <init>(java.lang.String)>("#.##");
        this.<spec.reporter.GraphImage: java.text.DecimalFormat dfy> = $r1;
        specialinvoke this.<spec.reporter.GraphImage: void init()>();
        return;
    }

    private void init()
    {
        spec.reporter.GraphImage this;
        java.awt.Graphics $r0, $r1;
        java.awt.Font $r2;
        double[] $r3;
        java.awt.Color $r4;
        long tid_init;
        java.lang.Thread thread_init;

        this := @this: spec.reporter.GraphImage;
        thread_init = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_init = virtualinvoke thread_init.<java.lang.Thread: long getId()>();
        $r0 = virtualinvoke this.<spec.reporter.GraphImage: java.awt.Graphics getGraphics()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_init, "spec.reporter.GraphImage", 117, $r0);
        this.<spec.reporter.GraphImage: java.awt.Graphics graphics> = $r0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_init, "spec.reporter.GraphImage", 118, $r1);
        $r1 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $r2 = <spec.reporter.GraphImage: java.awt.Font FONT>;
        virtualinvoke $r1.<java.awt.Graphics: void setFont(java.awt.Font)>($r2);
        $r3 = <spec.reporter.GraphImage: double[] DEFAULT_SCALE>;
        virtualinvoke this.<spec.reporter.GraphImage: void setScale(double[])>($r3);
        virtualinvoke this.<spec.reporter.GraphImage: void setPixelSize(int)>(1);
        virtualinvoke this.<spec.reporter.GraphImage: void setPixelType(int)>(0);
        $r4 = <spec.reporter.GraphImage: java.awt.Color DEFAULT_BACKGROUND_COLOR>;
        virtualinvoke this.<spec.reporter.GraphImage: void setBackground(java.awt.Color)>($r4);
        $r4 = <spec.reporter.GraphImage: java.awt.Color DEFAULT_FOREGROUND_COLOR>;
        virtualinvoke this.<spec.reporter.GraphImage: void setForeground(java.awt.Color)>($r4);
        virtualinvoke this.<spec.reporter.GraphImage: void setImageQuality(float)>(1.0F);
        virtualinvoke this.<spec.reporter.GraphImage: void setConnectPointsEnabled(boolean)>(0);
        virtualinvoke this.<spec.reporter.GraphImage: void setXYAxesLabelsPrecision(int,int)>(2, 2);
        return;
    }

    public void setImageQuality(float)
    {
        spec.reporter.GraphImage this;
        float quality;
        byte $b0;
        long tid_setImageQuality;
        java.lang.Thread thread_setImageQuality;

        this := @this: spec.reporter.GraphImage;
        quality := @parameter0: float;
        thread_setImageQuality = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setImageQuality = virtualinvoke thread_setImageQuality.<java.lang.Thread: long getId()>();
        $b0 = quality cmpg 0.0F;
        if $b0 < 0 goto label0;

        $b0 = quality cmpl 1.0F;
        if $b0 <= 0 goto label1;

     label0:
        return;

     label1:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,float)>(this, 140, tid_setImageQuality, "spec.reporter.GraphImage", 132, quality);
        this.<spec.reporter.GraphImage: float quality> = quality;
        return;
    }

    public void setPixelSize(int)
    {
        spec.reporter.GraphImage this;
        int pixelsize;
        long tid_setPixelSize;
        java.lang.Thread thread_setPixelSize;

        this := @this: spec.reporter.GraphImage;
        pixelsize := @parameter0: int;
        thread_setPixelSize = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setPixelSize = virtualinvoke thread_setPixelSize.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 141, tid_setPixelSize, "spec.reporter.GraphImage", 136, pixelsize);
        this.<spec.reporter.GraphImage: int pixelsize> = pixelsize;
        return;
    }

    public void setPixelType(int)
    {
        spec.reporter.GraphImage this;
        int pixeltype;
        long tid_setPixelType;
        java.lang.Thread thread_setPixelType;

        this := @this: spec.reporter.GraphImage;
        pixeltype := @parameter0: int;
        thread_setPixelType = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setPixelType = virtualinvoke thread_setPixelType.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 142, tid_setPixelType, "spec.reporter.GraphImage", 140, pixeltype);
        this.<spec.reporter.GraphImage: int pixeltype> = pixeltype;
        return;
    }

    public void setBackground(java.awt.Color)
    {
        spec.reporter.GraphImage this;
        java.awt.Color color;
        java.awt.Graphics $r0;
        int $i0, $i1;
        long tid_setBackground;
        java.lang.Thread thread_setBackground;

        this := @this: spec.reporter.GraphImage;
        color := @parameter0: java.awt.Color;
        thread_setBackground = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setBackground = virtualinvoke thread_setBackground.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_setBackground, "spec.reporter.GraphImage", 144, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(color);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_setBackground, "spec.reporter.GraphImage", 145, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = virtualinvoke this.<spec.reporter.GraphImage: int getWidth()>();
        $i1 = virtualinvoke this.<spec.reporter.GraphImage: int getHeight()>();
        virtualinvoke $r0.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i0, $i1);
        return;
    }

    public void setForeground(java.awt.Color)
    {
        spec.reporter.GraphImage this;
        java.awt.Color color;
        long tid_setForeground;
        java.lang.Thread thread_setForeground;

        this := @this: spec.reporter.GraphImage;
        color := @parameter0: java.awt.Color;
        thread_setForeground = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setForeground = virtualinvoke thread_setForeground.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 143, tid_setForeground, "spec.reporter.GraphImage", 149, color);
        this.<spec.reporter.GraphImage: java.awt.Color pixelcolor> = color;
        return;
    }

    public int getSuggestedYAxisTickInterval(int, double)
    {
        spec.reporter.GraphImage this;
        int suggestedNumTicks, ll, lu, i, index, delta, diff, $i0, $i1, $i2, $i3;
        double maxy, t, ddiff, $d0, $d1, $d2;
        int[] ti;
        byte $b4;
        long tid_getSuggestedYAxisTickInterval;
        java.lang.Thread thread_getSuggestedYAxisTickInterval;

        this := @this: spec.reporter.GraphImage;
        suggestedNumTicks := @parameter0: int;
        maxy := @parameter1: double;
        thread_getSuggestedYAxisTickInterval = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getSuggestedYAxisTickInterval = virtualinvoke thread_getSuggestedYAxisTickInterval.<java.lang.Thread: long getId()>();
        $d0 = (double) suggestedNumTicks;
        t = maxy / $d0;
        $d1 = staticinvoke <java.lang.Math: double log(double)>(t);
        $d0 = staticinvoke <java.lang.Math: double log(double)>(10.0);
        $d1 = $d1 / $d0;
        ll = (int) $d1;
        lu = ll + 1;
        ti = newarray (int)[10];
        $d2 = (double) ll;
        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d2);
        $i0 = (int) $d0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 161, 0, $i0);
        ti[0] = $i0;
        $d2 = (double) lu;
        $d0 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d2);
        $i0 = (int) $d0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 162, 9, $i0);
        ti[9] = $i0;
        i = 0;
        goto label1;

     label0:
        $i1 = i + 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 164, i, $i0);
        $i0 = ti[i];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 164, 0, $i2);
        $i2 = ti[0];
        $i0 = $i0 + $i2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 164, $i1, $i0);
        ti[$i1] = $i0;
        i = i + 1;

     label1:
        $i1 = lengthof ti;
        $i1 = $i1 - 1;
        if i < $i1 goto label0;

        index = 9;
        delta = 2147483647;
        $i3 = lengthof ti;
        i = $i3 - 1;
        goto label6;

     label2:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 169, i, $i3);
        $i3 = ti[i];
        $d1 = (double) $i3;
        ddiff = $d1 - t;
        $b4 = ddiff cmpg 0.0;
        if $b4 >= 0 goto label3;

        goto label7;

     label3:
        diff = (int) ddiff;
        if diff <= delta goto label4;

        if delta >= 0 goto label5;

     label4:
        delta = diff;
        index = i;

     label5:
        i = i + -1;

     label6:
        if i >= 0 goto label2;

     label7:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,int)>(ti, 18, tid_getSuggestedYAxisTickInterval, "spec.reporter.GraphImage", 179, index, $i3);
        $i3 = ti[index];
        return $i3;
    }

    public double getSuggestedMinXScale(double, double)
    {
        spec.reporter.GraphImage this;
        double maxx, maxy, minx, $d0, $d1, $d2;
        double[] scale, $r0, $r1;
        java.awt.FontMetrics fm;
        int w, $i0, $i1;
        java.awt.Graphics $r2;
        java.text.DecimalFormat $r3;
        java.lang.String $r4;
        java.lang.Object localthislockgetSuggestedMinXScale;
        java.lang.Throwable throwableLocal13;
        long tid_getSuggestedMinXScale;
        java.lang.Thread thread_getSuggestedMinXScale;

        this := @this: spec.reporter.GraphImage;
        maxx := @parameter0: double;
        maxy := @parameter1: double;
        thread_getSuggestedMinXScale = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getSuggestedMinXScale = virtualinvoke thread_getSuggestedMinXScale.<java.lang.Thread: long getId()>();
        localthislockgetSuggestedMinXScale = this;

     label0:
        entermonitor localthislockgetSuggestedMinXScale;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockgetSuggestedMinXScale, 0, tid_getSuggestedMinXScale);
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        $i0 = lengthof $r0;
        scale = newarray (double)[$i0];
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        $i1 = lengthof scale;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, scale, 0, $i1);
        $r1 = newarray (double)[4];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 186, 0, 0.0);
        $r1[0] = 0.0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 186, 1, maxx);
        $r1[1] = maxx;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 186, 2, 0.0);
        $r1[2] = 0.0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 186, 3, maxy);
        $r1[3] = maxy;
        virtualinvoke this.<spec.reporter.GraphImage: void setScale(double[])>($r1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 188, $r2);
        $r2 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        fm = virtualinvoke $r2.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();
        $r3 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfy>;
        $r4 = virtualinvoke $r3.<java.text.DecimalFormat: java.lang.String format(double)>(maxy);
        $i0 = virtualinvoke fm.<java.awt.FontMetrics: int stringWidth(java.lang.String)>($r4);
        $i0 = $i0 + 4;
        w = $i0 + 20;
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r0, 71, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 190, 0, $d0);
        $d0 = $r0[0];
        $d1 = (double) w;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 144, tid_getSuggestedMinXScale, "spec.reporter.GraphImage", 190, $d2);
        $d2 = this.<spec.reporter.GraphImage: double alphax>;
        $d1 = $d1 * $d2;
        $d0 = $d0 + $d1;
        minx = neg $d0;
        virtualinvoke this.<spec.reporter.GraphImage: void setScale(double[])>(scale);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockgetSuggestedMinXScale, 0, tid_getSuggestedMinXScale);
        exitmonitor localthislockgetSuggestedMinXScale;
        goto label1;

     label1:
        return minx;

     label2:
        throwableLocal13 := @caughtexception;

     label3:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockgetSuggestedMinXScale, 0, tid_getSuggestedMinXScale);
        exitmonitor localthislockgetSuggestedMinXScale;

     label4:
        throw throwableLocal13;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public double getSuggestedMinYScale(double, double)
    {
        spec.reporter.GraphImage this;
        double maxx, maxy, miny, $d0, $d1, $d2;
        double[] scale, $r0, $r1, $r3;
        java.awt.FontMetrics fm;
        int h, $i0, $i1, $i2;
        java.awt.Graphics $r2;
        java.lang.Object localthislockgetSuggestedMinYScale;
        java.lang.Throwable throwableLocal14;
        long tid_getSuggestedMinYScale;
        java.lang.Thread thread_getSuggestedMinYScale;

        this := @this: spec.reporter.GraphImage;
        maxx := @parameter0: double;
        maxy := @parameter1: double;
        thread_getSuggestedMinYScale = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getSuggestedMinYScale = virtualinvoke thread_getSuggestedMinYScale.<java.lang.Thread: long getId()>();
        localthislockgetSuggestedMinYScale = this;

     label0:
        entermonitor localthislockgetSuggestedMinYScale;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void enterMonitorAfter(java.lang.Object,int,long)>(localthislockgetSuggestedMinYScale, 0, tid_getSuggestedMinYScale);
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        $i0 = lengthof $r0;
        scale = newarray (double)[$i0];
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        $i1 = lengthof scale;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, 0, scale, 0, $i1);
        $r1 = newarray (double)[4];
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 199, 0, 0.0);
        $r1[0] = 0.0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 199, 1, maxx);
        $r1[1] = maxx;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 199, 2, 0.0);
        $r1[2] = 0.0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 199, 3, maxy);
        $r1[3] = maxy;
        virtualinvoke this.<spec.reporter.GraphImage: void setScale(double[])>($r1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 201, $r2);
        $r2 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        fm = virtualinvoke $r2.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();
        $i2 = virtualinvoke fm.<java.awt.FontMetrics: int getHeight()>();
        $i0 = 4 + $i2;
        h = $i0 + 40;
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r0, 71, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 203, 3, $d0);
        $d0 = $r0[3];
        $d1 = (double) h;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 145, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 203, $d2);
        $d2 = this.<spec.reporter.GraphImage: double alphay>;
        $d1 = $d1 * $d2;
        $d0 = $d0 - $d1;
        $r3 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r3, 71, tid_getSuggestedMinYScale, "spec.reporter.GraphImage", 203, 3, $d1);
        $d1 = $r3[3];
        miny = $d0 - $d1;
        virtualinvoke this.<spec.reporter.GraphImage: void setScale(double[])>(scale);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockgetSuggestedMinYScale, 0, tid_getSuggestedMinYScale);
        exitmonitor localthislockgetSuggestedMinYScale;
        goto label1;

     label1:
        return miny;

     label2:
        throwableLocal14 := @caughtexception;

     label3:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void exitMonitorBefore(java.lang.Object,int,long)>(localthislockgetSuggestedMinYScale, 0, tid_getSuggestedMinYScale);
        exitmonitor localthislockgetSuggestedMinYScale;

     label4:
        throw throwableLocal14;

        catch java.lang.Throwable from label0 to label1 with label2;
        catch java.lang.Throwable from label3 to label4 with label2;
    }

    public void setScale(double[])
    {
        spec.reporter.GraphImage this;
        double[] scale, $r0, $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        double $d0, $d1;
        long tid_setScale;
        java.lang.Thread thread_setScale;

        this := @this: spec.reporter.GraphImage;
        scale := @parameter0: double[];
        thread_setScale = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setScale = virtualinvoke thread_setScale.<java.lang.Thread: long getId()>();
        if scale == null goto label0;

        $i0 = lengthof scale;
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        $i1 = lengthof $r0;
        if $i0 >= $i1 goto label1;

     label0:
        return;

     label1:
        $r1 = this.<spec.reporter.GraphImage: double[] scale>;
        $r2 = this.<spec.reporter.GraphImage: double[] scale>;
        $i2 = lengthof $r2;
        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(scale, 0, $r1, 0, $i2);
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r0, 71, tid_setScale, "spec.reporter.GraphImage", 212, 1, $d0);
        $d0 = $r0[1];
        $r3 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r3, 71, tid_setScale, "spec.reporter.GraphImage", 212, 0, $d1);
        $d1 = $r3[0];
        $d0 = $d0 - $d1;
        $i3 = virtualinvoke this.<spec.reporter.GraphImage: int getWidth()>();
        $d1 = (double) $i3;
        $d0 = $d0 / $d1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 144, tid_setScale, "spec.reporter.GraphImage", 212, $d0);
        this.<spec.reporter.GraphImage: double alphax> = $d0;
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r0, 71, tid_setScale, "spec.reporter.GraphImage", 213, 3, $d0);
        $d0 = $r0[3];
        $r3 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r3, 71, tid_setScale, "spec.reporter.GraphImage", 213, 2, $d1);
        $d1 = $r3[2];
        $d0 = $d0 - $d1;
        $i3 = virtualinvoke this.<spec.reporter.GraphImage: int getHeight()>();
        $d1 = (double) $i3;
        $d0 = $d0 / $d1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 145, tid_setScale, "spec.reporter.GraphImage", 213, $d0);
        this.<spec.reporter.GraphImage: double alphay> = $d0;
        return;
    }

    private int getLinearMapX(double)
    {
        spec.reporter.GraphImage this;
        double x, $d0, $d1;
        double[] $r0;
        long $l0, tid_getLinearMapX;
        int $i1;
        java.lang.Thread thread_getLinearMapX;

        this := @this: spec.reporter.GraphImage;
        x := @parameter0: double;
        thread_getLinearMapX = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getLinearMapX = virtualinvoke thread_getLinearMapX.<java.lang.Thread: long getId()>();
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r0, 71, tid_getLinearMapX, "spec.reporter.GraphImage", 217, 0, $d0);
        $d0 = $r0[0];
        $d1 = x - $d0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 144, tid_getLinearMapX, "spec.reporter.GraphImage", 217, $d0);
        $d0 = this.<spec.reporter.GraphImage: double alphax>;
        $d1 = $d1 / $d0;
        $l0 = staticinvoke <java.lang.Math: long round(double)>($d1);
        $i1 = (int) $l0;
        return $i1;
    }

    private int getLinearMapY(double)
    {
        spec.reporter.GraphImage this;
        double y, $d0, $d1;
        double[] $r0;
        long $l0, tid_getLinearMapY;
        int $i1;
        java.lang.Thread thread_getLinearMapY;

        this := @this: spec.reporter.GraphImage;
        y := @parameter0: double;
        thread_getLinearMapY = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_getLinearMapY = virtualinvoke thread_getLinearMapY.<java.lang.Thread: long getId()>();
        $r0 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r0, 71, tid_getLinearMapY, "spec.reporter.GraphImage", 221, 3, $d0);
        $d0 = $r0[3];
        $d0 = $d0 - y;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 145, tid_getLinearMapY, "spec.reporter.GraphImage", 221, $d1);
        $d1 = this.<spec.reporter.GraphImage: double alphay>;
        $d0 = $d0 / $d1;
        $l0 = staticinvoke <java.lang.Math: long round(double)>($d0);
        $i1 = (int) $l0;
        return $i1;
    }

    private void setAxisLabelsPrecision(java.text.DecimalFormat, int, int)
    {
        spec.reporter.GraphImage this;
        java.text.DecimalFormat df;
        int i, f;

        this := @this: spec.reporter.GraphImage;
        df := @parameter0: java.text.DecimalFormat;
        i := @parameter1: int;
        f := @parameter2: int;
        virtualinvoke df.<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>(i);
        virtualinvoke df.<java.text.DecimalFormat: void setMinimumFractionDigits(int)>(f);
        virtualinvoke df.<java.text.DecimalFormat: void setMaximumFractionDigits(int)>(f);
        return;
    }

    public void setXAxisLabelsPrecision(int, int)
    {
        spec.reporter.GraphImage this;
        int i, f;
        java.text.DecimalFormat $r0;

        this := @this: spec.reporter.GraphImage;
        i := @parameter0: int;
        f := @parameter1: int;
        $r0 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfx>;
        specialinvoke this.<spec.reporter.GraphImage: void setAxisLabelsPrecision(java.text.DecimalFormat,int,int)>($r0, i, f);
        return;
    }

    public void setYAxisLabelsPrecision(int, int)
    {
        spec.reporter.GraphImage this;
        int i, f;
        java.text.DecimalFormat $r0;

        this := @this: spec.reporter.GraphImage;
        i := @parameter0: int;
        f := @parameter1: int;
        $r0 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfy>;
        specialinvoke this.<spec.reporter.GraphImage: void setAxisLabelsPrecision(java.text.DecimalFormat,int,int)>($r0, i, f);
        return;
    }

    public void setXYAxesLabelsPrecision(int, int)
    {
        spec.reporter.GraphImage this;
        int x, y;
        java.text.DecimalFormat $r0;

        this := @this: spec.reporter.GraphImage;
        x := @parameter0: int;
        y := @parameter1: int;
        $r0 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfx>;
        specialinvoke this.<spec.reporter.GraphImage: void setAxisLabelsPrecision(java.text.DecimalFormat,int,int)>($r0, 1, x);
        $r0 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfy>;
        specialinvoke this.<spec.reporter.GraphImage: void setAxisLabelsPrecision(java.text.DecimalFormat,int,int)>($r0, 1, y);
        return;
    }

    public void plotXYAxes(java.awt.Color)
    {
        spec.reporter.GraphImage this;
        java.awt.Color c;
        int pixelOriginX, pixelOriginY, $i0, $i1;
        java.awt.Graphics $r0;
        long tid_plotXYAxes;
        java.lang.Thread thread_plotXYAxes;

        this := @this: spec.reporter.GraphImage;
        c := @parameter0: java.awt.Color;
        thread_plotXYAxes = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plotXYAxes = virtualinvoke thread_plotXYAxes.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXYAxes, "spec.reporter.GraphImage", 244, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(c);
        pixelOriginX = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(0.0);
        pixelOriginY = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(0.0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXYAxes, "spec.reporter.GraphImage", 247, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = virtualinvoke this.<spec.reporter.GraphImage: int getWidth()>();
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(0, pixelOriginY, $i0, pixelOriginY);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXYAxes, "spec.reporter.GraphImage", 248, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i1 = virtualinvoke this.<spec.reporter.GraphImage: int getHeight()>();
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(pixelOriginX, 0, pixelOriginX, $i1);
        return;
    }

    public void plotXAxisTicks(double, java.awt.Color, java.lang.String)
    {
        spec.reporter.GraphImage this;
        double step, x, $d0, $d1;
        java.awt.Color c;
        java.lang.String label, sx;
        int py, px, $i0, sw, $i3, $i5, $i6, $i8, $i10;
        java.awt.FontMetrics fm;
        byte $b1, $b2, $b4, $b7, $b9;
        java.awt.Graphics $r0;
        java.text.DecimalFormat $r1;
        double[] $r2, $r3;
        long tid_plotXAxisTicks;
        java.lang.Thread thread_plotXAxisTicks;

        this := @this: spec.reporter.GraphImage;
        step := @parameter0: double;
        c := @parameter1: java.awt.Color;
        label := @parameter2: java.lang.String;
        thread_plotXAxisTicks = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plotXAxisTicks = virtualinvoke thread_plotXAxisTicks.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXAxisTicks, "spec.reporter.GraphImage", 252, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(c);
        py = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(0.0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXAxisTicks, "spec.reporter.GraphImage", 254, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        fm = virtualinvoke $r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();
        x = 0.0;
        goto label7;

     label0:
        px = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXAxisTicks, "spec.reporter.GraphImage", 257, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i3 = px;
        $b1 = 4;
        $b4 = x cmpl 0.0;
        if $b4 != 0 goto label1;

        $b4 = 2;
        goto label2;

     label1:
        $b4 = 1;

     label2:
        $i5 = $b1 * $b4;
        $i0 = py - $i5;
        $i5 = px;
        $b2 = 4;
        $b7 = x cmpl 0.0;
        if $b7 != 0 goto label3;

        $b7 = 2;
        goto label4;

     label3:
        $b7 = 1;

     label4:
        $i8 = $b2 * $b7;
        $i6 = py + $i8;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i3, $i0, $i5, $i6);
        $b9 = x cmpl 0.0;
        if $b9 != 0 goto label5;

        goto label6;

     label5:
        $r1 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfx>;
        sx = virtualinvoke $r1.<java.text.DecimalFormat: java.lang.String format(double)>(x);
        $i10 = virtualinvoke fm.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(sx);
        sw = $i10 / 2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXAxisTicks, "spec.reporter.GraphImage", 263, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = px - sw;
        $i5 = py + 4;
        $i6 = virtualinvoke fm.<java.awt.FontMetrics: int getAscent()>();
        $i5 = $i5 + $i6;
        virtualinvoke $r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(sx, $i0, $i5);

     label6:
        x = x + step;

     label7:
        $r2 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r2, 71, tid_plotXAxisTicks, "spec.reporter.GraphImage", 255, 1, $d0);
        $d0 = $r2[1];
        $b9 = x cmpg $d0;
        if $b9 <= 0 goto label0;

        x = 0.0;
        goto label9;

     label8:
        px = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXAxisTicks, "spec.reporter.GraphImage", 268, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = py - 4;
        $i6 = py + 4;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(px, $i0, px, $i6);
        x = x - step;

     label9:
        $r2 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r2, 71, tid_plotXAxisTicks, "spec.reporter.GraphImage", 266, 0, $d0);
        $d0 = $r2[0];
        $b9 = x cmpl $d0;
        if $b9 >= 0 goto label8;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotXAxisTicks, "spec.reporter.GraphImage", 271, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $r3 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r3, 71, tid_plotXAxisTicks, "spec.reporter.GraphImage", 271, 1, $d1);
        $d1 = $r3[1];
        $d1 = $d1 - 2.0;
        $i0 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>($d1);
        $i5 = py + 12;
        $i6 = virtualinvoke fm.<java.awt.FontMetrics: int getAscent()>();
        $i5 = $i5 + $i6;
        virtualinvoke $r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(label, $i0, $i5);
        return;
    }

    public void plotYAxisTicks(double, java.awt.Color, java.lang.String)
    {
        spec.reporter.GraphImage this;
        double step, y, $d0, $d1;
        java.awt.Color c;
        java.lang.String label, sy;
        int px, py, $i2, $i4, $i5, $i7;
        java.awt.FontMetrics fm;
        byte $b0, $b1, $b3, $b6, $b8;
        java.awt.Graphics $r0;
        java.text.DecimalFormat $r1;
        double[] $r2, $r3;
        long tid_plotYAxisTicks;
        java.lang.Thread thread_plotYAxisTicks;

        this := @this: spec.reporter.GraphImage;
        step := @parameter0: double;
        c := @parameter1: java.awt.Color;
        label := @parameter2: java.lang.String;
        thread_plotYAxisTicks = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plotYAxisTicks = virtualinvoke thread_plotYAxisTicks.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotYAxisTicks, "spec.reporter.GraphImage", 276, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(c);
        px = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(0.0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotYAxisTicks, "spec.reporter.GraphImage", 278, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        fm = virtualinvoke $r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();
        y = 0.0;
        goto label7;

     label0:
        py = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotYAxisTicks, "spec.reporter.GraphImage", 281, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $b0 = 4;
        $b3 = y cmpl 0.0;
        if $b3 != 0 goto label1;

        $b3 = 2;
        goto label2;

     label1:
        $b3 = 1;

     label2:
        $i4 = $b0 * $b3;
        $i2 = px - $i4;
        $i4 = py;
        $b1 = 4;
        $b6 = y cmpl 0.0;
        if $b6 != 0 goto label3;

        $b6 = 2;
        goto label4;

     label3:
        $b6 = 1;

     label4:
        $i7 = $b1 * $b6;
        $i5 = px + $i7;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i2, $i4, $i5, py);
        $b8 = y cmpl 0.0;
        if $b8 != 0 goto label5;

        goto label6;

     label5:
        $r1 = this.<spec.reporter.GraphImage: java.text.DecimalFormat dfy>;
        sy = virtualinvoke $r1.<java.text.DecimalFormat: java.lang.String format(double)>(y);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotYAxisTicks, "spec.reporter.GraphImage", 286, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i4 = px - 4;
        $i5 = virtualinvoke fm.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(sy);
        $i4 = $i4 - $i5;
        $i4 = $i4 - 2;
        $i7 = virtualinvoke fm.<java.awt.FontMetrics: int getDescent()>();
        $i5 = py + $i7;
        virtualinvoke $r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(sy, $i4, $i5);

     label6:
        y = y + step;

     label7:
        $r2 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r2, 71, tid_plotYAxisTicks, "spec.reporter.GraphImage", 279, 3, $d0);
        $d0 = $r2[3];
        $d0 = $d0 - step;
        $b8 = y cmpg $d0;
        if $b8 <= 0 goto label0;

        y = 0.0;
        goto label9;

     label8:
        py = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotYAxisTicks, "spec.reporter.GraphImage", 291, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i2 = px - 4;
        $i5 = px + 4;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i2, py, $i5, py);
        y = y - step;

     label9:
        $r2 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r2, 71, tid_plotYAxisTicks, "spec.reporter.GraphImage", 289, 2, $d0);
        $d0 = $r2[2];
        $b8 = y cmpl $d0;
        if $b8 >= 0 goto label8;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotYAxisTicks, "spec.reporter.GraphImage", 294, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i4 = px - 4;
        $i5 = virtualinvoke fm.<java.awt.FontMetrics: int stringWidth(java.lang.String)>(label);
        $i4 = $i4 - $i5;
        $r3 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r3, 71, tid_plotYAxisTicks, "spec.reporter.GraphImage", 295, 3, $d1);
        $d1 = $r3[3];
        $i5 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>($d1);
        $i5 = $i5 + 4;
        $i7 = virtualinvoke fm.<java.awt.FontMetrics: int getDescent()>();
        $i5 = $i5 + $i7;
        virtualinvoke $r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>(label, $i4, $i5);
        return;
    }

    public void drawLegend(java.lang.String, double, double, java.awt.Color, java.awt.Color, java.lang.String)
    {
        spec.reporter.GraphImage this;
        java.lang.String legend, legendType, $r3;
        double XOffset, YOffset, $d0, $d1;
        java.awt.Color symbolColor, legendColor;
        java.awt.FontMetrics fm;
        int tx, ty, p, r, $i0, $i1, $i3, $i4, $i5, $i6;
        java.awt.Graphics $r0;
        double[] $r1;
        long $l2, tid_drawLegend;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.Thread thread_drawLegend;

        this := @this: spec.reporter.GraphImage;
        legend := @parameter0: java.lang.String;
        XOffset := @parameter1: double;
        YOffset := @parameter2: double;
        symbolColor := @parameter3: java.awt.Color;
        legendColor := @parameter4: java.awt.Color;
        legendType := @parameter5: java.lang.String;
        thread_drawLegend = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_drawLegend = virtualinvoke thread_drawLegend.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 301, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        fm = virtualinvoke $r0.<java.awt.Graphics: java.awt.FontMetrics getFontMetrics()>();
        $r1 = this.<spec.reporter.GraphImage: double[] scale>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeArrayElem(java.lang.Object,int,long,java.lang.String,int,int,double)>($r1, 71, tid_drawLegend, "spec.reporter.GraphImage", 302, 0, $d0);
        $d0 = $r1[0];
        $d0 = $d0 + XOffset;
        tx = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>($d0);
        $i0 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(0.0);
        $d0 = YOffset * 4.0;
        $i1 = (int) $d0;
        $i0 = $i0 + $i1;
        $i1 = virtualinvoke fm.<java.awt.FontMetrics: int getAscent()>();
        ty = $i0 + $i1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 141, tid_drawLegend, "spec.reporter.GraphImage", 305, p);
        p = this.<spec.reporter.GraphImage: int pixelsize>;
        $d1 = (double) p;
        $d1 = $d1 / 2.0;
        $l2 = staticinvoke <java.lang.Math: long round(double)>($d1);
        r = (int) $l2;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 307, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(symbolColor);
        $z0 = virtualinvoke legendType.<java.lang.String: boolean equals(java.lang.Object)>("Line");
        if $z0 == 0 goto label0;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 309, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i3 = virtualinvoke fm.<java.awt.FontMetrics: int getAscent()>();
        $i3 = $i3 / 2;
        $i4 = ty - $i3;
        $i3 = tx + 20;
        $i5 = virtualinvoke fm.<java.awt.FontMetrics: int getAscent()>();
        $i5 = $i5 / 2;
        $i6 = ty - $i5;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(tx, $i4, $i3, $i6);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 311, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(legendColor);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 312, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(" - ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(legend);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
        $i4 = tx + 22;
        virtualinvoke $r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>($r3, $i4, ty);
        goto label1;

     label0:
        $z0 = virtualinvoke legendType.<java.lang.String: boolean equals(java.lang.Object)>("Dot");
        if $z0 == 0 goto label1;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 315, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i1 = tx - r;
        $i4 = ty - r;
        $i3 = virtualinvoke fm.<java.awt.FontMetrics: int getAscent()>();
        $i3 = $i3 / 2;
        $i4 = $i4 - $i3;
        virtualinvoke $r0.<java.awt.Graphics: void fillArc(int,int,int,int,int,int)>($i1, $i4, p, p, 0, 360);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 316, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(legendColor);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_drawLegend, "spec.reporter.GraphImage", 317, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $r2 = new java.lang.StringBuilder;
        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>(" - ");
        $r2 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(legend);
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r0.<java.awt.Graphics: void drawString(java.lang.String,int,int)>($r3, tx, ty);

     label1:
        return;
    }

    public void setConnectPointsEnabled(boolean)
    {
        spec.reporter.GraphImage this;
        boolean connectPointsEnabled;
        long tid_setConnectPointsEnabled;
        java.lang.Thread thread_setConnectPointsEnabled;

        this := @this: spec.reporter.GraphImage;
        connectPointsEnabled := @parameter0: boolean;
        thread_setConnectPointsEnabled = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_setConnectPointsEnabled = virtualinvoke thread_setConnectPointsEnabled.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 146, tid_setConnectPointsEnabled, "spec.reporter.GraphImage", 322, connectPointsEnabled);
        this.<spec.reporter.GraphImage: boolean connectPointsEnabled> = connectPointsEnabled;
        return;
    }

    public void resetConnectPoints()
    {
        spec.reporter.GraphImage this;
        long tid_resetConnectPoints;
        java.lang.Thread thread_resetConnectPoints;

        this := @this: spec.reporter.GraphImage;
        thread_resetConnectPoints = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_resetConnectPoints = virtualinvoke thread_resetConnectPoints.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 147, tid_resetConnectPoints, "spec.reporter.GraphImage", 326, 0);
        this.<spec.reporter.GraphImage: boolean prevSet> = 0;
        return;
    }

    public void plotLine(double, double, double, double)
    {
        spec.reporter.GraphImage this;
        double x1, y1, x2, y2;
        java.awt.Graphics $r0;
        java.awt.Color $r1;
        int $i0, $i1, $i2, $i3;
        long tid_plotLine;
        java.lang.Thread thread_plotLine;

        this := @this: spec.reporter.GraphImage;
        x1 := @parameter0: double;
        y1 := @parameter1: double;
        x2 := @parameter2: double;
        y2 := @parameter3: double;
        thread_plotLine = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plotLine = virtualinvoke thread_plotLine.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotLine, "spec.reporter.GraphImage", 330, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 143, tid_plotLine, "spec.reporter.GraphImage", 330, $r1);
        $r1 = this.<spec.reporter.GraphImage: java.awt.Color pixelcolor>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>($r1);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotLine, "spec.reporter.GraphImage", 331, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x1);
        $i1 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y1);
        $i2 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x2);
        $i3 = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y2);
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>($i0, $i1, $i2, $i3);
        return;
    }

    public void plotFlatLine(double, double, double, java.awt.Color)
    {
        spec.reporter.GraphImage this;
        double x1, x2, y;
        java.awt.Color c;
        int py, px, ex, x, $i0;
        java.awt.Graphics $r0;
        long tid_plotFlatLine;
        java.lang.Thread thread_plotFlatLine;

        this := @this: spec.reporter.GraphImage;
        x1 := @parameter0: double;
        x2 := @parameter1: double;
        y := @parameter2: double;
        c := @parameter3: java.awt.Color;
        thread_plotFlatLine = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plotFlatLine = virtualinvoke thread_plotFlatLine.<java.lang.Thread: long getId()>();
        py = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y);
        px = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x1);
        ex = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x2);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotFlatLine, "spec.reporter.GraphImage", 339, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(c);
        x = px;
        goto label1;

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotFlatLine, "spec.reporter.GraphImage", 341, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = x + 10;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(x, py, $i0, py);
        x = x + 20;

     label1:
        if x < ex goto label0;

        return;
    }

    public void plotFlatLine(double, java.awt.Color)
    {
        spec.reporter.GraphImage this;
        double y;
        java.awt.Color c;
        int w, py, px, x, $i0;
        java.awt.Graphics $r0;
        long tid_plotFlatLine;
        java.lang.Thread thread_plotFlatLine;

        this := @this: spec.reporter.GraphImage;
        y := @parameter0: double;
        c := @parameter1: java.awt.Color;
        thread_plotFlatLine = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plotFlatLine = virtualinvoke thread_plotFlatLine.<java.lang.Thread: long getId()>();
        w = virtualinvoke this.<spec.reporter.GraphImage: int getWidth()>();
        py = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y);
        px = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(0.0);
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotFlatLine, "spec.reporter.GraphImage", 349, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(c);
        x = px;
        goto label1;

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plotFlatLine, "spec.reporter.GraphImage", 351, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i0 = x + 10;
        virtualinvoke $r0.<java.awt.Graphics: void drawLine(int,int,int,int)>(x, py, $i0, py);
        x = x + 20;

     label1:
        if x < w goto label0;

        return;
    }

    public void plot(double, double, int, java.awt.Color)
    {
        spec.reporter.GraphImage this;
        double x, y, $d0, $d1, $d2;
        int p, px, py, r, $i1, $i2, $i3;
        java.awt.Color c;
        boolean $z0;
        java.awt.Graphics $r0;
        long $l0, tid_plot;
        java.lang.Thread thread_plot;

        this := @this: spec.reporter.GraphImage;
        x := @parameter0: double;
        y := @parameter1: double;
        p := @parameter2: int;
        c := @parameter3: java.awt.Color;
        thread_plot = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plot = virtualinvoke thread_plot.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 146, tid_plot, "spec.reporter.GraphImage", 356, $z0);
        $z0 = this.<spec.reporter.GraphImage: boolean connectPointsEnabled>;
        if $z0 == 0 goto label1;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,boolean)>(this, 147, tid_plot, "spec.reporter.GraphImage", 357, $z0);
        $z0 = this.<spec.reporter.GraphImage: boolean prevSet>;
        if $z0 == 0 goto label0;

        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 148, tid_plot, "spec.reporter.GraphImage", 358, $d0);
        $d0 = this.<spec.reporter.GraphImage: double prevx>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 149, tid_plot, "spec.reporter.GraphImage", 358, $d1);
        $d1 = this.<spec.reporter.GraphImage: double prevy>;
        virtualinvoke this.<spec.reporter.GraphImage: void plotLine(double,double,double,double)>($d0, $d1, x, y);

     label0:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 147, tid_plot, "spec.reporter.GraphImage", 360, 1);
        this.<spec.reporter.GraphImage: boolean prevSet> = 1;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 148, tid_plot, "spec.reporter.GraphImage", 361, x);
        this.<spec.reporter.GraphImage: double prevx> = x;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,double)>(this, 149, tid_plot, "spec.reporter.GraphImage", 362, y);
        this.<spec.reporter.GraphImage: double prevy> = y;
        goto label2;

     label1:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void writeBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 147, tid_plot, "spec.reporter.GraphImage", 365, 0);
        this.<spec.reporter.GraphImage: boolean prevSet> = 0;

     label2:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plot, "spec.reporter.GraphImage", 367, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        virtualinvoke $r0.<java.awt.Graphics: void setColor(java.awt.Color)>(c);
        px = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapX(double)>(x);
        py = specialinvoke this.<spec.reporter.GraphImage: int getLinearMapY(double)>(y);
        $d2 = (double) p;
        $d2 = $d2 / 2.0;
        $l0 = staticinvoke <java.lang.Math: long round(double)>($d2);
        r = (int) $l0;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 142, tid_plot, "spec.reporter.GraphImage", 371, $i1);
        $i1 = this.<spec.reporter.GraphImage: int pixeltype>;
        tableswitch($i1)
        {
            case 0: goto label3;
            case 1: goto label4;
            default: goto label5;
        };

     label3:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plot, "spec.reporter.GraphImage", 373, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i2 = px - r;
        $i3 = py - r;
        virtualinvoke $r0.<java.awt.Graphics: void fillArc(int,int,int,int,int,int)>($i2, $i3, p, p, 0, 360);
        goto label5;

     label4:
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 139, tid_plot, "spec.reporter.GraphImage", 376, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Graphics graphics>;
        $i2 = px - r;
        $i3 = py - r;
        virtualinvoke $r0.<java.awt.Graphics: void fillRect(int,int,int,int)>($i2, $i3, p, p);

     label5:
        return;
    }

    public void plot(double, double, java.awt.Color)
    {
        spec.reporter.GraphImage this;
        double x, y;
        java.awt.Color c;
        int $i0;
        long tid_plot;
        java.lang.Thread thread_plot;

        this := @this: spec.reporter.GraphImage;
        x := @parameter0: double;
        y := @parameter1: double;
        c := @parameter2: java.awt.Color;
        thread_plot = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plot = virtualinvoke thread_plot.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 141, tid_plot, "spec.reporter.GraphImage", 382, $i0);
        $i0 = this.<spec.reporter.GraphImage: int pixelsize>;
        virtualinvoke this.<spec.reporter.GraphImage: void plot(double,double,int,java.awt.Color)>(x, y, $i0, c);
        return;
    }

    public void plot(double, double)
    {
        spec.reporter.GraphImage this;
        double x, y;
        int $i0;
        java.awt.Color $r0;
        long tid_plot;
        java.lang.Thread thread_plot;

        this := @this: spec.reporter.GraphImage;
        x := @parameter0: double;
        y := @parameter1: double;
        thread_plot = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();
        tid_plot = virtualinvoke thread_plot.<java.lang.Thread: long getId()>();
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,int)>(this, 141, tid_plot, "spec.reporter.GraphImage", 386, $i0);
        $i0 = this.<spec.reporter.GraphImage: int pixelsize>;
        staticinvoke <edu.hkust.leap.monitor.RecordMonitor: void readBeforeInstance(java.lang.Object,int,long,java.lang.String,int,java.lang.Object)>(this, 143, tid_plot, "spec.reporter.GraphImage", 386, $r0);
        $r0 = this.<spec.reporter.GraphImage: java.awt.Color pixelcolor>;
        virtualinvoke this.<spec.reporter.GraphImage: void plot(double,double,int,java.awt.Color)>(x, y, $i0, $r0);
        return;
    }

    public void make()
    {
        spec.reporter.GraphImage this;

        this := @this: spec.reporter.GraphImage;
        virtualinvoke this.<spec.reporter.GraphImage: void make(java.lang.String)>("GraphImage.jpg");
        return;
    }

    public void make(java.lang.String)
    {
        spec.reporter.GraphImage this;
        java.lang.String filename, $r5, $r6;
        java.io.File outfile, $r0;
        java.lang.Exception e, $r1;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r3;
        java.lang.StringBuilder $r4;

        this := @this: spec.reporter.GraphImage;
        filename := @parameter0: java.lang.String;
        if filename != null goto label0;

        return;

     label0:
        $r0 = new java.io.File;
        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(filename);
        outfile = $r0;
        staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.File)>(this, "jpeg", outfile);

     label1:
        goto label3;

     label2:
        $r1 := @caughtexception;
        e = $r1;
        $r2 = staticinvoke <spec.jbb.JBButil: java.util.logging.Logger getLog()>();
        $r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;
        $r4 = new java.lang.StringBuilder;
        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Exception: ");
        $r5 = virtualinvoke e.<java.lang.Exception: java.lang.String getMessage()>();
        $r4 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);
        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();
        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, $r6, e);

     label3:
        return;

        catch java.lang.Exception from label0 to label1 with label2;
    }
}
