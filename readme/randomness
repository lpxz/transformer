1 For random, they should be treated as raw data.
We should capture them and replay the value.
 For simplicity, I fix the seed and therefore fix the values used.
 No need to record the value and replay any more.
 As a result, the randomness is sacrificed.
 
 
     public synchronized void setSeed(long)
    {
        java.util.Random r0;
        long l0, $l1, l2;
        java.util.concurrent.atomic.AtomicLong $r1;

        r0 := @this: java.util.Random;
        l0 := @parameter0: long;
        $l1 = l0 ^ 25214903917L;
        l2 = $l1 & 281474976710655L;
        $r1 = r0.<java.util.Random: java.util.concurrent.atomic.AtomicLong seed>;
        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicLong: void set(long)>(0L);
        r0.<java.util.Random: boolean haveNextNextGaussian> = 0;
        return;
    }
    
    Note that, every random method would invoke the above method to gain the randomness, we de-randomize it by 
    setting the seed to be 0 eventually.
    
 //=======================specjbb checks even the fucking randomness.
 I will ban it!
    